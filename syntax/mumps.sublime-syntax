%YAML 1.2
---
# https://github.com/ksherlock/MUMPS.tmbundle/blob/master/Syntaxes/mumps.sublime-syntax
name: MUMPS
file_extensions: [int]
scope: source.mumps

variables:
  ws: '[ \t]'
  ident: '[%A-Za-z][A-Za-z0-9]*'


contexts:
  # prototype can't set.
  # prototype:
    # - include: comments
    # - include: eol

  main:
    - include: comment

    - match: '^({{ident}})(\()'
      captures:
        1: entity.name.function.mumps
        2: punctuation.section.group.begin.mumps
      set: parms

    - match: '^{{ident}}\b'
      scope: entity.name.function.mumps

    - match: '{{ws}}+'
      set: indent

  parms:
    - match: \b{{ident}}\b
      scope: variable.parameter.function
    - match: \n
      scope: invalid.illegal
      set: main
    - match: \)
      scope: punctuation.section.group.end.mumps
      set: indent

  indent:
    - include: eol
    - match: ([\. ]*)
      set: stmt

  stmt:
    - include: eol


    - match: '\b(?i:f|for|i|if)\b'
      scope: keyword.control
      set: unconditional

    - match: '\b(?i:e|else)\b'
      scope: keyword.control
      set:
        - match: '  '
          set: stmt
        - include: dot

    - match: '\b(?i:d|do)\b'
      scope: keyword.control
      set: conditional



    - match: '\b(?i:b|break|c|close|e|else|g|goto|h|halt|hang|i|if|j|job|k|kill|l|lock|m|merge|n|new|o|open|q|quit|r|read|s|set|u|use|v|view|w|write|x|xecute)\b'
      scope: keyword
      set: conditional

    - match: '\b(?i:tc|tcommit|tro|trollback|ts|tstart)\b'
      scope: keyword
      set: pc


      # cache keywords
    - match: '\b(?i:continue)\b'
      scope: keyword.cache
      set: pc

    - match: '\b(?i:return|zk|zkill|zn|znspace|ztrap|zw|zwrite|zzdump|zzwrite)\b'
      scope: keyword.cache
      set: conditional

    - match: '\b(?i:throw)\b'
      scope: keyword.cache
      set: unconditional


    # post conditional, no argument.
  pc:
    - include: eol
    - match: ':'
      set: [stmt, cond-expr]
    - match: ' '
      set: stmt
    - include: dot

  conditional:
    - include: eol
    - match: ':'
      set: [expr, cond-expr]
    - match: ' '
      set: expr
    - include: dot


  unconditional:
    - include: eol
    - match: ' {2}'
      set: stmt
    - match: ' '
      set: expr
    - include: dot


  cond-expr:
    # prevent eol/comment matching here since stack in effect.
    - match: '$'
      pop: true
    - match: '(?=;)'
      pop: true
    - match: ' '
      pop: true
    - include: expr


  expr:
    - include: eol
    - include: dollar
    - match: '{{ident}}'
    - match: \d+
      scope: constant.numeric
    - match: '{{ws}}'
      set: stmt
    - include: string


  dollar:

    - match: '\$(?i:a|ascii|c|char|d|data|e|extract|f|find|fn|fnumber|g|get|j|justify|l|length|na|name|n|next|o|order|p|piece|ql|qlength|sq|qsubscript|q|query|r|random|re|reverse|s|select|t|text|tr|translate|v|view)(?=\()'
      scope: support.function.language

    - match: '\$(?i:bit|bitcount|bitfind|bitlogic|case|classmethod|classname|compile|decimal|double|factor|i|increment|in|inumber|isobject|isvaliddouble|isvalidnum|li|list|lb|listbuild|ld|listdata|lf|listfind|lfs|listfromstring|lg|listget|ll|listlength|listnext|ls|listsame|lts|listtostring|lu|listupdate|lv|listvalid|locate|match|method|nc|nconvert|normalize|now|num|number|parameter|prefetchoff|prefetchon|property|replace|sc|sconvert|seq|sequence|sortbegin|sortend|st|stack|wa|wascii|wc|wchar|we|wextract|wf|wfind|wiswide|wl|wlength|wre|wreverse|xecute)(?=\()'
      scope: support.function.cache

    # system and other functions
    - match: '\$(?i:zb|zboolean|zcvt|zconvert|zcrc|zc|zcyc|zda|zdascii|zdc|zdchar|zf|ziswide|zla|zlascii|zlc|zlchar|zname|zposition|zqa|zqascii|zqc|zqchar|zse|zsearch|zseek|zstrip|zversion|zwa|zwascii|zwc|zwchar|zwidth|zwpack|zwbpack|zwunpack|zwbunpack|zzenkaku)(?=\()'
      scope: support.function.language.cache

    - match: '\$(?i:zbitand|zbitcount|zbitfind|zbitget|zbitlen|zbitnot|zbitor|zbitset|zbitstr|zbitxor|zincrement|znext|zorder|zp|zprevious|zsort)(?=\()'
      scope: support.function.cache.legacy

    - match: '\$(?i:device|ec|ecode|estack|es|et|etrap|halt|h|horolog|i|io|j|job|k|key|namespace|p|principal|q|quit|roles|st|stack|s|sy|system|storage|t|test|this|throwobj|tl|tlevel|username|x|y|za|zb|zc|zchild|zeof|zeos|ze|zerror)\b'
      scope: variable.language

    - match: '\$(?i:zh|zhorolog|zi|zio|zj|zjob|zm|zmode|zn|zname|znspace|zo|zorder|zp|zparent|zpi|zpos|zr|zreference|zs|zstorage|zts|ztimestamp|ztz|ztimezone|zt|ztrap|zv|zversion)\b'
      scope: variable.language.cache


    - match: '\$(?i:zd|zdate|zdh|zdateh|zdatetime|zdt|zdth|zdatetimeh|zt|ztime|zth|ztimeh)(?=\()'
      scope: support.function.date

    - match: '\$(?i:zabs|zarccos|zarcsin|zarctan|zcos|zcot|zcsc|zexp|zh|zhex|zln|zlog|zpower|zsec|zsin|zsqr|ztan)(?=\()'
      scope: support.function.math

    - match: '\$\${{ident}}\^{{ident}}'
      scope: meta.function-call
    - match: '\$\$(\^?){{ident}}'
      scope: meta.function-call


  string:
    - match: '"'
      scope: punctuation.definition.string.begin.mumps
      push:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.mumps
        - match: '"'
          scope: punctuation.definition.string.end.mumps
          pop: true
        - match: '\n'
          scope: invalid.illegal
          pop: true

  dot:
    - match: '.+$'
      scope: invalid.illegal.dot
      set: main

  eol:
    - match: ';.*$'
      scope: punctuation.definition.comment.mumps
      push:
        - meta_include_prototype: false
        - meta_scope: comment.line.mumps
        - match: '\n'
          pop: true
    - match: '$'
      set: main


  comment:
    - match: ';'
      scope: punctuation.definition.comment.mumps
      push:
        - meta_include_prototype: false
        - meta_scope: comment.line.mumps
        - match: '$'
          pop: true
