<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/atom.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>the website of jyn</title>
    <subtitle>i write about code, and things that bring me joy, and sometimes other things too</subtitle>
    <link rel="self" type="application/atom+xml" href="https://jyn.dev/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://jyn.dev"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-08-21T00:00:00+00:00</updated>
    <id>https://jyn.dev/atom.xml</id><entry xml:lang="en">
        <title>the core of rust</title>
        <published>2025-08-21T00:00:00+00:00</published>
        <updated>2025-08-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/the-core-of-rust/"/>
        <id>https://jyn.dev/the-core-of-rust/</id>
        
        <content type="html" xml:base="https://jyn.dev/the-core-of-rust/">&lt;p&gt;&lt;strong&gt;NOTE: this is not a rust tutorial.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every year it was an incredible challenge to fit teaching Rust into lectures since you basically need all the concepts right from the start to understand a lot of programs. I never knew how to order things. The flip side was that usually when you understand all the basic components in play lots of it just fits together. i.e. there&#x27;s some point where the interwovenness turns from a barrier into something incredibly valuable and helpful.
—&lt;a href=&quot;https:&#x2F;&#x2F;donsz.nl&#x2F;&quot;&gt;Jana Dönszelmann&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;vision&quot;&gt;Vision&lt;a class=&quot;zola-anchor&quot; href=&quot;#vision&quot; aria-label=&quot;Anchor link for: vision&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;One thing I admire in a language is a strong vision. &lt;a href=&quot;https:&#x2F;&#x2F;www.uiua.org&#x2F;&quot;&gt;Uiua&lt;&#x2F;a&gt;, for example, has a very strong vision: what does it take to eliminate all local named variables from a language? &lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;&quot;&gt;Zig&lt;&#x2F;a&gt; similarly has a strong vision: explicit, simple language features, easy to cross compile, drop-in replacement for C.&lt;&#x2F;p&gt;
&lt;p&gt;Note that you don’t have to agree with a language’s vision to note that it &lt;em&gt;has&lt;&#x2F;em&gt; one. I expect most people to find Uiua unpleasant to program in. That’s fine. You are not the target audience.&lt;&#x2F;p&gt;
&lt;p&gt;There’s a famous quote by Bjarne Strousup that goes “Within C++, there is a much smaller and cleaner language struggling to get out.” Within Rust, too, there is a much smaller and cleaner language struggling to get out: one with a clear vision, goals, focus. One that is coherent, because its features &lt;em&gt;cohere&lt;&#x2F;em&gt;. This post is about that language.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;learning-rust-requires-learning-many-things-at-once&quot;&gt;Learning Rust requires learning many things at once&lt;a class=&quot;zola-anchor&quot; href=&quot;#learning-rust-requires-learning-many-things-at-once&quot; aria-label=&quot;Anchor link for: learning-rust-requires-learning-many-things-at-once&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Rust is hard to learn. Not for lack of trying—many, many people have spent person-years on improving the diagnostics, documentation, and APIs—but because it’s complex. When people first learn the language, they are learning many different interleaving concepts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;first class functions&lt;&#x2F;li&gt;
&lt;li&gt;enums&lt;&#x2F;li&gt;
&lt;li&gt;pattern matching&lt;&#x2F;li&gt;
&lt;li&gt;generics&lt;&#x2F;li&gt;
&lt;li&gt;traits&lt;&#x2F;li&gt;
&lt;li&gt;references&lt;&#x2F;li&gt;
&lt;li&gt;the borrow checker&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Send&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;Sync&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Iterator&lt;&#x2F;code&gt;s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These concepts interlock. It is very hard to learn them one at a time because they interact with each other, and each affects the design of the others. Additionally, the standard library uses all of them heavily.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s look at a Rust program that does something non-trivial:&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-1&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-rust&quot;&gt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt;usr&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt;bin&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt;env &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;S cargo &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;Zscript
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;package&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;edition &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;2024&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;dependencies&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;notify &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;=8.2.0&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;path&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Path&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;notify&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;RecursiveMode&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; Watcher&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;notify&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Error&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; paths &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;pages&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;templates&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;static&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; watcher &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;notify&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;recommended_watcher&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;result&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;notify&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Event, &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;event&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; result &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;            &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; paths&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; event&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;paths
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;                &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;                &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;map&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;path&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;path&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;display&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;                &lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;            &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;:&lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{:?}&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; event&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;kind&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; paths&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;join&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;?&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; path &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; paths &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        watcher&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;watch&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;Path&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;path&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;RecursiveMode&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Recursive&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;?&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;loop&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;thread&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;park&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; sleep forever
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I tried to make this program as simple as possible: I used only the simplest iterator combinators, I don&#x27;t touch &lt;code&gt;std::mpsc&lt;&#x2F;code&gt; at all, I don&#x27;t use async, and I don&#x27;t do any complicated error handling.&lt;&#x2F;p&gt;
&lt;p&gt;Already, this program has many interleaving concepts. I&#x27;ll ignore the module system and macros, which are mostly independent of the rest of the language. To understand this program, you need to know that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;recommended_watcher&lt;&#x2F;code&gt; and &lt;code&gt;map&lt;&#x2F;code&gt; take a function as an argument. In our program, that function is constructed inline as an anonymous function (closure).&lt;&#x2F;li&gt;
&lt;li&gt;Errors are handled using something called &lt;code&gt;Result&lt;&#x2F;code&gt;, not with exceptions or error codes. I happened to use &lt;code&gt;fn main() -&amp;gt; Result&lt;&#x2F;code&gt; and &lt;code&gt;?&lt;&#x2F;code&gt;, but you would still need to understand Result even without that, because Rust does not let you access the value inside unless you check for an error condition first.&lt;&#x2F;li&gt;
&lt;li&gt;Result takes a generic error; in our case, &lt;code&gt;notify::Error&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Result is an data-holding enum that can be either Ok or Err, and you can check which variant it is using pattern matching.&lt;&#x2F;li&gt;
&lt;li&gt;Iterators can be traversed either with a &lt;code&gt;for&lt;&#x2F;code&gt; loop or with &lt;code&gt;into_iter()&lt;&#x2F;code&gt;. &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-2-1&quot;&gt;&lt;a href=&quot;#fn-2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;code&gt;for&lt;&#x2F;code&gt; is eager and &lt;code&gt;into_iter&lt;&#x2F;code&gt; is lazy. &lt;code&gt;iter&lt;&#x2F;code&gt; has different ownership semantics than &lt;code&gt;into_iter&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you want to modify this program, you need to know some additional things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;println&lt;&#x2F;code&gt; can only print things that implement the traits &lt;code&gt;Display&lt;&#x2F;code&gt; or &lt;code&gt;Debug&lt;&#x2F;code&gt;. As a result, &lt;code&gt;Path&lt;&#x2F;code&gt;s cannot be printed directly.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;path.display()&lt;&#x2F;code&gt; returns a struct that borrows from the path. Sending it to another thread (e.g. through a channel) won&#x27;t work, because &lt;code&gt;event.paths&lt;&#x2F;code&gt; goes out of scope when the closure passed to &lt;code&gt;recommended_watcher&lt;&#x2F;code&gt; finishes running. You need to convert it to an owned value or pass &lt;code&gt;event.paths&lt;&#x2F;code&gt; as a whole.
&lt;ul&gt;
&lt;li&gt;As an aside, this kind of thing encourages people to break work into &quot;large&quot; chunks instead of &quot;small&quot; chunks, which I think is often good for performance in CPU-bound programs, although as always it depends.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;recommended_watcher&lt;&#x2F;code&gt; only accepts functions that are &lt;code&gt;Send + &#x27;static&lt;&#x2F;code&gt;. Small changes to this program, such as passing the current path into the closure, will give a compile error related to ownership. Fixing it requires learning the &lt;code&gt;move&lt;&#x2F;code&gt; keyword, knowing that closures borrow their arguments by default, and the meaning of &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;.
&lt;ul&gt;
&lt;li&gt;If you are using &lt;code&gt;Rc&amp;lt;RefCell&amp;lt;String&amp;gt;&amp;gt;&lt;&#x2F;code&gt;, which is often recommended for beginners&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-3-1&quot;&gt;&lt;a href=&quot;#fn-3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, your program will need to be rewritten from scratch (either to use Arc&#x2F;Mutex or to use exterior mutability). For example, if you wanted to print changes from the main thread instead of worker threads to avoid interleaving output, you couldn&#x27;t simply push to the end of an &lt;code&gt;all_changes&lt;&#x2F;code&gt; collection, you would have to use &lt;code&gt;Arc&amp;lt;Mutex&amp;lt;Vec&amp;lt;Path&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt; in order to communicate between threads.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is a &lt;em&gt;lot&lt;&#x2F;em&gt; of concepts for a 20 line program. For comparison, here is an equivalent javascript program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript z-code&quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;fs&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-function z-ts&quot;&gt;require&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;fs&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-constant z-ts&quot;&gt;paths&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-ts&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-array z-literal z-ts&quot;&gt; &lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;pages&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;templates&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;static&lt;span class=&quot;z-punctuation z-definition z-string z-end z-ts&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-square z-ts&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-ts&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-var z-expr z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-ts&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-var-single-variable z-expr z-ts&quot;&gt;&lt;span class=&quot;z-meta z-definition z-variable z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;path&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-expression z-of z-ts&quot;&gt;of&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;paths&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-object z-ts&quot;&gt;fs&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-ts&quot;&gt;watch&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;path&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-ts&quot;&gt;,&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt; &lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;eventType&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameter z-ts&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-ts&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-ts&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-conditional z-ts&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;filename&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-ts&quot;&gt;!==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-null z-ts&quot;&gt;null&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-ts&quot;&gt;&lt;span class=&quot;z-support z-class z-console z-ts&quot;&gt;console&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-ts&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-console z-ts&quot;&gt;log&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-template z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-template z-begin z-ts&quot;&gt;`&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-begin z-ts&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-embedded z-line z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;eventType&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-end z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-begin z-ts&quot;&gt;${&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-template z-expression z-ts&quot;&gt;&lt;span class=&quot;z-meta z-embedded z-line z-ts&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-ts&quot;&gt;filename&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-template-expression z-end z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-template z-end z-ts&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;    &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;  &lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-control z-flow z-ts&quot;&gt;await&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-new z-expr z-ts&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-new z-ts&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-ts&quot;&gt;Promise&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-meta z-parameters z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-begin z-ts&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-parameters z-end z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-arrow z-ts&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-arrow z-ts&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-block z-ts&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brace z-round z-ts&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-ts&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-ts&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-ts&quot;&gt; sleep forever&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For this JS program, you need to understand:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;first class functions&lt;&#x2F;li&gt;
&lt;li&gt;nullability&lt;&#x2F;li&gt;
&lt;li&gt;yeah that&#x27;s kinda it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m cheating a little here because &lt;code&gt;notify&lt;&#x2F;code&gt; returns a list of paths and &lt;code&gt;node:fs&#x2F;watch&lt;&#x2F;code&gt; doesn&#x27;t. But only a little.&lt;&#x2F;p&gt;
&lt;p&gt;My point is not that JS is a simpler language; that&#x27;s debatable. My point is that you can do things in JS without understanding the whole language. It&#x27;s very hard to do non-trivial things in Rust without understanding the whole core.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust-s-core-is-interwoven-on-purpose&quot;&gt;Rust&#x27;s core is interwoven on purpose&lt;a class=&quot;zola-anchor&quot; href=&quot;#rust-s-core-is-interwoven-on-purpose&quot; aria-label=&quot;Anchor link for: rust-s-core-is-interwoven-on-purpose&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The previous section makes it out to seem like I&#x27;m saying all these concepts are bad. I&#x27;m not. Rather the opposite, actually. Because these language features were designed in tandem, they interplay very nicely:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enums without pattern matching &lt;a href=&quot;https:&#x2F;&#x2F;en.cppreference.com&#x2F;w&#x2F;cpp&#x2F;utility&#x2F;variant.html&quot;&gt;are very painful to work with&lt;&#x2F;a&gt; and pattern matching without enums &lt;a href=&quot;https:&#x2F;&#x2F;www.hillelwayne.com&#x2F;post&#x2F;python-abc&#x2F;&quot;&gt;has very odd semantics&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Result&lt;&#x2F;code&gt; and &lt;code&gt;Iterator&lt;&#x2F;code&gt;s are impossible to implement without generics (or duck-typing, which I think of as type-erased generics)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Send&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;Sync&lt;&#x2F;code&gt;, and the preconditions to &lt;code&gt;println&lt;&#x2F;code&gt;, are impossible to encode without traits—and this often comes up in other languages, for example printing a function in clojure shows something like &lt;code&gt;#object[clojure.core$map 0x2e7de98a &quot;clojure.core$map@2e7de98a&quot;]&lt;&#x2F;code&gt;. In Rust it gives a compile error unless you opt-in with Debug.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Send&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;Sync&lt;&#x2F;code&gt; are only possible to enforce because the borrow checker does capture analysis for closures. Java, which is &lt;em&gt;wildly&lt;&#x2F;em&gt; committed to thread-safety by the standards of most languages, cannot verify this at compile time and so has to &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;en&#x2F;java&#x2F;javase&#x2F;24&#x2F;docs&#x2F;api&#x2F;java.base&#x2F;java&#x2F;text&#x2F;SimpleDateFormat.html#synchronization&quot;&gt;document synchronization concerns explicitly&lt;&#x2F;a&gt; instead.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are more interplays than I can easily describe in a post, and all of them are what make Rust what it is.&lt;&#x2F;p&gt;
&lt;p&gt;Rust has other excellent language features—for example the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;reference&#x2F;inline-assembly.html&quot;&gt;inline assembly syntax&lt;&#x2F;a&gt; is a work of art, props to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;amanieu&quot;&gt;Amanieu&lt;&#x2F;a&gt;. But they are not interwoven into the standard library in the same way, and they do not affect the way people &lt;em&gt;think&lt;&#x2F;em&gt; about writing code in the same way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-smaller-rust&quot;&gt;A smaller Rust&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-smaller-rust&quot; aria-label=&quot;Anchor link for: a-smaller-rust&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;without.boats wrote a post in 2019 titled &lt;a href=&quot;https:&#x2F;&#x2F;without.boats&#x2F;blog&#x2F;notes-on-a-smaller-rust&#x2F;&quot;&gt;&quot;Notes on a smaller Rust&quot;&lt;&#x2F;a&gt; (and a follow-up &lt;a href=&quot;https:&#x2F;&#x2F;without.boats&#x2F;blog&#x2F;revisiting-a-smaller-rust&#x2F;&quot;&gt;revisiting&lt;&#x2F;a&gt; it). In a manner of speaking, that smaller Rust &lt;em&gt;is&lt;&#x2F;em&gt; the language I fell in love with when I first learned it in 2018. Rust is a lot bigger today, in many ways, and the smaller Rust is just a nostalgic rose-tinted memory. But I think it&#x27;s worth studying as an example of how well &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Orthogonality#Computer_science&quot;&gt;orthogonal&lt;&#x2F;a&gt; features can compose when they&#x27;re designed as one cohesive whole.&lt;&#x2F;p&gt;
&lt;p&gt;If you liked this post, consider reading &lt;a href=&quot;https:&#x2F;&#x2F;matklad.github.io&#x2F;2020&#x2F;07&#x2F;15&#x2F;two-beautiful-programs.html&quot;&gt;Two Beautiful Rust Programs&lt;&#x2F;a&gt; by matklad.&lt;&#x2F;p&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;This program intentionally uses a file watcher because file IO is not possible to implement efficiently with async on Linux (and also because I wrote a file watcher recently for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;flower&#x2F;&quot;&gt;flower&lt;&#x2F;a&gt;, so it&#x27;s fresh in my mind). Tokio itself just uses a threadpool, alongside channels for notifying the future. I don’t want to get into async here; this just demonstrates Send&#x2F;Sync bounds and callbacks. &lt;a href=&quot;#fr-1-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;Technically, &lt;code&gt;for&lt;&#x2F;code&gt; is syntax sugar around &lt;code&gt;into_iter()&lt;&#x2F;code&gt;, but you don&#x27;t need to know that for most rust programs. &lt;a href=&quot;#fr-2-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-3&quot;&gt;
&lt;p&gt;which is a terrible idea by the way, even more experienced Rust programmers often don&#x27;t understand the interior mutability very well; see &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;dtolnay&#x2F;latest&#x2F;dtolnay&#x2F;macro._02__reference_types.html&quot;&gt;this blog post by dtolnay&lt;&#x2F;a&gt; on the difference between mutability and uniqueness in reference types. It would be better to suggest using owned types with exterior mutability and cloning frequently. &lt;a href=&quot;#fr-3-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>how to communicate with intent</title>
        <published>2025-08-11T00:00:00+00:00</published>
        <updated>2025-08-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/how-to-communicate-with-intent/"/>
        <id>https://jyn.dev/how-to-communicate-with-intent/</id>
        
        <content type="html" xml:base="https://jyn.dev/how-to-communicate-with-intent/">&lt;p&gt;As you can see from this blog, I like to talk (my friends will be the first to confirm this). Just as important as knowing how to talk, though, is knowing what to say and when to listen.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I will give a few simple tips on how to improve your communication in various parts of your life. My goal is partly to help you to be a more effective communicator, and partly to reduce the number of people in my life who get on my nerves :P&lt;&#x2F;p&gt;
&lt;p&gt;You don&#x27;t always need these tips. In casual conversations and when brainstorming, it&#x27;s healthy to just say the first thing on your mind. But not all conversations are casual, and conversations can slip into seriousness faster than you expect. For those situations, you need to be intentional. Otherwise, it&#x27;s easy to end up with hurt feelings on both sides, or waste the time of everyone involved.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adapt-to-your-audience&quot;&gt;adapt to your audience&lt;a class=&quot;zola-anchor&quot; href=&quot;#adapt-to-your-audience&quot; aria-label=&quot;Anchor link for: adapt-to-your-audience&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;First, think about your audience. Adapt your message to the person you’re speaking to. Someone learning Rust for the first time does not need an infodump about variance and type coercion, they need an introduction to enums, generics, and pattern matching. Similarly, if a barista asks you what the weird code on your screen is, don’t tell them you’re writing a &lt;a href=&quot;https:&#x2F;&#x2F;codeberg.org&#x2F;jyn514&#x2F;flower&#x2F;&quot;&gt;meta-Static Site Generator in Clojure&lt;&#x2F;a&gt;, tell them you’re building a tool to help people create websites.&lt;&#x2F;p&gt;
&lt;p&gt;If you are writing a promotion doc, a resume, or a tutorial, don&#x27;t just dump a list of everything that&#x27;s relevant. Think about the structure of your document: the questions your reader is likely to have, the amount of time they are likely going to spend reading, and the order they are likely to read in. You need to be &lt;em&gt;legible&lt;&#x2F;em&gt;, which means explaining concrete impacts in terms your audience understands. It&#x27;s not enough to say what&#x27;s true; you have to also say why it&#x27;s important.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;consider-your-purpose&quot;&gt;consider your purpose&lt;a class=&quot;zola-anchor&quot; href=&quot;#consider-your-purpose&quot; aria-label=&quot;Anchor link for: consider-your-purpose&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Consider your intended effect. If a teacher goes on Twitter saying she doesn’t understand why maths is important and we should just give out A’s like candy (real thing that happened on my feed!), dog piling on her is not going to change her mind. Show her a case in her life where maths would be useful, and don’t talk down to her. Self-righteousness feels good in the moment, but doesn’t actually achieve anything. If you just want to gloat about how other people are stupid, go play an FPS or something; Twitter has enough negativity.&lt;&#x2F;p&gt;
&lt;p&gt;If you are writing a blog post, know why you are writing it. If you are writing to practice the skill of writing, or to have a reference document, or to share with your friends, infodumping is fine. If you are writing with a goal in mind—say you want to &lt;a href=&quot;https:&#x2F;&#x2F;www.joelonsoftware.com&#x2F;2002&#x2F;11&#x2F;11&#x2F;the-law-of-leaky-abstractions&#x2F;&quot;&gt;give a name to an idea&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;devblogs.microsoft.com&#x2F;oldnewthing&#x2F;20250808-00&#x2F;?p=111447&quot;&gt;communicate when software can fail&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;how-i-use-my-terminal&#x2F;&quot;&gt;enter an idea into the overton window&lt;&#x2F;a&gt;—be intentional. Consider your audience, and the background you expect them to start from. Posting the equivalent of a wikipedia article is rarely the most effective way to instill an idea.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;corollary-don-t-argue-for-argument-s-sake&quot;&gt;corollary: don&#x27;t argue for argument&#x27;s sake&lt;a class=&quot;zola-anchor&quot; href=&quot;#corollary-don-t-argue-for-argument-s-sake&quot; aria-label=&quot;Anchor link for: corollary-don-t-argue-for-argument-s-sake&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Don’t fight losing causes, &lt;a href=&quot;https:&#x2F;&#x2F;boardgamegeek.com&#x2F;blog&#x2F;5988&#x2F;blogpost&#x2F;76876&#x2F;if-youre-going-to-do-something-that-crazy&quot;&gt;unless the cause is really worth it&lt;&#x2F;a&gt;. Someone on hacker news saying &quot;language A Sucks and you Should use language B instead&quot; is not worth arguing with. Someone who says &quot;language A is good in scenario X, but has shortcomings in scenario Y compared to language B&quot; is much more serious and worth listening to. Arguing with someone who refuses to be convinced wastes everyone’s time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;balance-conversational-effort&quot;&gt;balance conversational effort&lt;a class=&quot;zola-anchor&quot; href=&quot;#balance-conversational-effort&quot; aria-label=&quot;Anchor link for: balance-conversational-effort&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Be a good conversational partner. Ask directed probing questions: they show you are listening to the other person and invested in the topic. Saying “I don’t understand” puts the burden on them to figure out the source of the misunderstanding. If you really aren’t sure what to ask, because you’re confused or the other person was vague, I like “say more?” as a way to leave it open ended for the other person on how to elaborate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;consider-implications&quot;&gt;consider implications&lt;a class=&quot;zola-anchor&quot; href=&quot;#consider-implications&quot; aria-label=&quot;Anchor link for: consider-implications&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Consider the implications of how you communicate. When you say things, you are not just communicating the words you speak, you are also affecting the person you&#x27;re talking to.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;not-everyone-wants-to-hear-an-infodump&quot;&gt;not everyone wants to hear an infodump&lt;a class=&quot;zola-anchor&quot; href=&quot;#not-everyone-wants-to-hear-an-infodump&quot; aria-label=&quot;Anchor link for: not-everyone-wants-to-hear-an-infodump&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;If the person you&#x27;re infodumping to isn&#x27;t interested in the topic, infodumping anyway puts them in an awkward situation where they either have to ask you to stop or sit through a long conversation they didn&#x27;t want to be in.&lt;&#x2F;p&gt;
&lt;p&gt;Another tricky scenario is when the other person is interested, but an infodump is not the right level of detail for them right now. Perhaps they are new to the topic, or perhaps they asked a direct question. If they&#x27;re still trying to get the &quot;big picture&quot;, zooming in to fine-grained details will often just confuse them further.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;apologies-are-not-the-time-to-infodump&quot;&gt;apologies are not the time to infodump&lt;a class=&quot;zola-anchor&quot; href=&quot;#apologies-are-not-the-time-to-infodump&quot; aria-label=&quot;Anchor link for: apologies-are-not-the-time-to-infodump&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Info-dumping during an apology—even if it’s related to the thing you&#x27;re apologizing for!—buries the apology. More than that, it implies that you expect &lt;em&gt;mitigated judgement&lt;&#x2F;em&gt;. If there is a power dynamic between you (say a wealth gap, or you are a manager and they are an employee), that expectation of mitigated judgment implies you &lt;em&gt;expect to be forgiven&lt;&#x2F;em&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;bsky.app&#x2F;profile&#x2F;did:plc:h2okxbr76w5522tailkxmidq&#x2F;post&#x2F;3lvrxmdvb3s2r&quot;&gt;an apology given in expectation of forgiveness is really just a request for absolution&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, apologize directly. If you were in an altered mental state (angry, sleep-deprived, experiencing a trauma trigger), you can add at most 1-2 sentences of context asking the other person to mitigate judgement. Not all apologies need context; often &quot;i was wrong, i&#x27;m sorry&quot; is enough.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;infodumps-will-not-prevent-all-miscommunication&quot;&gt;infodumps will not prevent all miscommunication&lt;a class=&quot;zola-anchor&quot; href=&quot;#infodumps-will-not-prevent-all-miscommunication&quot; aria-label=&quot;Anchor link for: infodumps-will-not-prevent-all-miscommunication&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;As we&#x27;ve seen above, there are times when infodumps actively hurt you. Even when they don&#x27;t, though, there can be times when they aren&#x27;t helping. Everyone comes to a conversation with a different background, and you cannot perfectly predict how they will respond. Rather than trying to avoid every possible miscommunication by packing the maximum amount of information—Say what you mean to say. Then, address the actual miscommunication (or regular conversation!) that happens afterwards. This saves time and energy for both conversational partners.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-legible&quot;&gt;be legible&lt;a class=&quot;zola-anchor&quot; href=&quot;#be-legible&quot; aria-label=&quot;Anchor link for: be-legible&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The common theme of all of the above is to communicate &lt;em&gt;effectively&lt;&#x2F;em&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@ElizAyer&#x2F;dont-ask-forgiveness-radiate-intent-d36fd22393a3&quot;&gt;&lt;em&gt;radiate intent&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;. Making it easy for the other person to understand both what you&#x27;re saying and why you&#x27;re saying it incurs a lot of goodwill, and makes it possible to say more things more bluntly than you would otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;A common trap I see people fall into is to say the first thing on their mind. This is fine for conversations between friends (although you should still consider how it affects your relationship!) but but is often counterproductive in other contexts. Slow down. Take your time. Say what you mean to say. If you don&#x27;t mean to say anything, don&#x27;t say anything at all.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>an engineer's perspective on hiring</title>
        <published>2025-08-08T00:00:00+00:00</published>
        <updated>2025-08-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/an-engineers-perspective-on-hiring/"/>
        <id>https://jyn.dev/an-engineers-perspective-on-hiring/</id>
        
        <content type="html" xml:base="https://jyn.dev/an-engineers-perspective-on-hiring/">&lt;p&gt;&lt;strong&gt;note for my friends: this post is targeted at companies and engineering managers. i know you know that hiring sucks and companies waste your time. this is a business case for why they shouldn&#x27;t do that.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hiring-sucks&quot;&gt;hiring sucks&lt;a class=&quot;zola-anchor&quot; href=&quot;#hiring-sucks&quot; aria-label=&quot;Anchor link for: hiring-sucks&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;most companies suck at hiring. they waste everyone’s time (i once had a 9-round interview pipeline!), they &lt;a href=&quot;https:&#x2F;&#x2F;danluu.com&#x2F;programmer-moneyball&#x2F;&quot;&gt;chase the trendiest programmers&lt;&#x2F;a&gt;, and they &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@weswinham&#x2F;chatgpt-killed-the-tech-interview-i-tested-11-methods-and-heres-what-survived-5652a3e95190&quot;&gt;can’t even tell programmers apart from an LLM&lt;&#x2F;a&gt;. in short, &lt;a href=&quot;https:&#x2F;&#x2F;predr.ag&#x2F;blog&#x2F;mediocrity-can-be-a-sign-of-excellence&#x2F;&quot;&gt;they are not playing moneyball&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;things are bad for interviewees too. some of the best programmers i know (think people maintaining the rust compiler) can’t get jobs because &lt;a href=&quot;https:&#x2F;&#x2F;hadid.dev&#x2F;posts&#x2F;living-coding&#x2F;&quot;&gt;they interview poorly under stress&lt;&#x2F;a&gt;. one with 4 years of Haskell experience and 2 years of Rust experience was labeled as “non-technical” by a recruiter. and of course, companies repeatedly ghost people for weeks or months about whether they actually got a job.&lt;&#x2F;p&gt;
&lt;p&gt;this post explores why hiring is hard, how existing approaches fail, and what a better approach could look like. my goal, of course, is to get my friends hired. &lt;a href=&quot;mailto:blog@jyn.dev&quot;&gt;reach out to me&lt;&#x2F;a&gt; if you like the ideas here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-makes-a-good-interview&quot;&gt;what makes a good interview&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-makes-a-good-interview&quot; aria-label=&quot;Anchor link for: what-makes-a-good-interview&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;before i start talking about my preferred approach, let’s start by establishing some (hopefully uncontroversial) principles.&lt;&#x2F;p&gt;
&lt;p&gt;interviews should:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;differentiate&lt;&#x2F;strong&gt;. be able to tell the difference between a senior programmer and a marketer using chatgpt.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;be applicable&lt;&#x2F;strong&gt;. reflect the actual job duties.
&lt;ul&gt;
&lt;li&gt;this includes coding. but it also includes architecture design, PR review, documentation, on and on and on. all good senior software engineers are generalists.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;think long term&lt;&#x2F;strong&gt;. select for applicants who will be good employees for years to come, not just in the next quarter.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;danluu.com&#x2F;people-matter&#x2F;&quot;&gt;people are not fungible&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;yosefk.com&#x2F;blog&#x2F;compensation-rationality-and-the-projectperson-fit.html&quot;&gt;there is a high cost to losing employees who are a good fit to the project&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;theory-building-without-a-mentor&#x2F;#theory-building&quot;&gt;there is a high cost to losing employees in general&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;companies often over-index on crystallized knowledge over fluid intelligence. spending an additional month to find people who specialize in your tech stack, when you could have onboarded them to that stack in a month, is an advanced form of self-sabotage.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;be time efficient&lt;&#x2F;strong&gt;. spend as little time as possible interviewing.
&lt;ul&gt;
&lt;li&gt;engineer time is expensive.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;be respectful&lt;&#x2F;strong&gt;. respect the applicant and their time.
&lt;ul&gt;
&lt;li&gt;if you don&#x27;t respect the applicant, you will select for people who don&#x27;t respect themselves, and drive away the best applicants.&lt;&#x2F;li&gt;
&lt;li&gt;&quot;but i want to select for people that don&#x27;t respect themselves so i can pay them less&quot;—get the hell off my site and don&#x27;t come back.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;there is also a 6th criteria that&#x27;s more controversial. let&#x27;s call it &lt;strong&gt;taste&lt;&#x2F;strong&gt;. an engineer with poor &lt;strong&gt;taste&lt;&#x2F;strong&gt; can ship things very quickly at the expense of leaving a giant mess for everyone else on the team to clean up. measuring this is very hard but also very important. conversely, &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;4yleYA2giPE?si=6ukBDYiqAikWPKhp&amp;amp;t=1348&quot;&gt;someone who spends time empowering the rest of their team has a multiplicative effect on their team&#x27;s productivity&lt;&#x2F;a&gt; (c.f. &lt;a href=&quot;https:&#x2F;&#x2F;www.noidea.dog&#x2F;glue&quot;&gt;&quot;Being Glue&quot;&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;let&#x27;s look at some common interviews and how they fare.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;live-coding-often-called-leetcode-interviews&quot;&gt;live coding, often called &quot;leetcode interviews&quot;&lt;a class=&quot;zola-anchor&quot; href=&quot;#live-coding-often-called-leetcode-interviews&quot; aria-label=&quot;Anchor link for: live-coding-often-called-leetcode-interviews&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;fails on &lt;strong&gt;differentiating, applicability, respect, taste&lt;&#x2F;strong&gt;. gives very little signal about &lt;strong&gt;long term value&lt;&#x2F;strong&gt;. live coding &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@weswinham&#x2F;chatgpt-killed-the-tech-interview-i-tested-11-methods-and-heres-what-survived-5652a3e95190&quot;&gt;cannot distinguish a senior programmer from a marketer using chatGPT&lt;&#x2F;a&gt;, and most interview questions have very little to do with day-to-day responsibilities. all good software engineers are generalist and live coding does not select for generalists.&lt;&#x2F;p&gt;
&lt;p&gt;you can augment live coding with multiple rounds of interviews, each of which tests one of the above responsibilities. but now you lose &lt;strong&gt;time efficiency&lt;&#x2F;strong&gt;; everything takes lots of engineer time. doing this despite the expense is a show of wealth, and now you are no longer playing moneyball.&lt;&#x2F;p&gt;
&lt;p&gt;additionally, people with lots of experience often find the experience demeaning, so you are filtering out the best applicants. a friend explicitly said &quot;I have 18 years of experience on GitHub; if you can&#x27;t tell I&#x27;m a competent programmer from that it&#x27;s not a good fit.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;something not often thought about is that this also loses you &lt;strong&gt;taste&lt;&#x2F;strong&gt;. the code that someone puts together under pressure is not a reflection of how they normally work, and does not let you judge if your engineers will like working with them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;take-home-interviews&quot;&gt;take-home interviews&lt;a class=&quot;zola-anchor&quot; href=&quot;#take-home-interviews&quot; aria-label=&quot;Anchor link for: take-home-interviews&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;fails on &lt;strong&gt;differentiating&lt;&#x2F;strong&gt; and &lt;strong&gt;respect&lt;&#x2F;strong&gt;, and partially on &lt;strong&gt;applicability&lt;&#x2F;strong&gt;. take home interviews are very easy for chatGPT to game and have all the other problems of live interviews, except that they remove the &quot;interview poorly under stress&quot; component. but they trade off a fundamental &lt;strong&gt;time asymmetry&lt;&#x2F;strong&gt; with the applicant, which again drives away the best people.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;architecture-design&quot;&gt;architecture design&lt;a class=&quot;zola-anchor&quot; href=&quot;#architecture-design&quot; aria-label=&quot;Anchor link for: architecture-design&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;this does a lot better. you can&#x27;t use chatGPT to fake an architecture interview&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-1&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. it fails at &lt;strong&gt;applicability&lt;&#x2F;strong&gt; (you don&#x27;t ever see the applicant&#x27;s code). at first glance it appears to give you some insight into &lt;strong&gt;taste&lt;&#x2F;strong&gt;, but often it is measuring &quot;how well does the applicant know the problem domain&quot; instead of &quot;how does the applicant think about design problems&quot;, so you have to be careful about over-indexing on it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;meet-the-team&quot;&gt;&quot;meet the team&quot;&lt;a class=&quot;zola-anchor&quot; href=&quot;#meet-the-team&quot; aria-label=&quot;Anchor link for: meet-the-team&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;i haven&#x27;t seen this one a lot for external interviews, but i see it very commonly for internal transfers within a company. it has much of the same tradeoffs as architecture design interviews, except it usually isn&#x27;t trying to judge skills at all, mostly personality and &quot;fit&quot; (i.e. it fails on &lt;strong&gt;differentiating&lt;&#x2F;strong&gt; and partially on &lt;strong&gt;applicability&lt;&#x2F;strong&gt;). i think it makes sense in environments where the candidate has a very strong recommendation and there&#x27;s little competition for the position; or if you have some other reason to highly value their skills without a formal assessment.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;extended-essays-and-work-samples&quot;&gt;extended essays and work samples&lt;a class=&quot;zola-anchor&quot; href=&quot;#extended-essays-and-work-samples&quot; aria-label=&quot;Anchor link for: extended-essays-and-work-samples&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;this is an interesting one. i&#x27;ve only ever seen it from &lt;a href=&quot;https:&#x2F;&#x2F;rfd.shared.oxide.computer&#x2F;rfd&#x2F;0003#_mechanics_of_evaluation&quot;&gt;Oxide Computer Company&lt;&#x2F;a&gt;. i like it really quite a lot. the process looks like this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;the applicant submits samples of their existing work (or writes new documents specially for the interview)&lt;&#x2F;li&gt;
&lt;li&gt;the applicant writes detailed responses to 8 questions about their values, work, career, and goals.&lt;&#x2F;li&gt;
&lt;li&gt;the applicant goes through 9 hours of interviews with several oxide employees.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;this does really really well on nearly every criteria (including &lt;strong&gt;respect&lt;&#x2F;strong&gt;—note that the time spent here is symmetric, it takes a &lt;em&gt;long&lt;&#x2F;em&gt; time for Oxide&#x27;s engineers to read that much written material).&lt;&#x2F;p&gt;
&lt;p&gt;it fails on &lt;strong&gt;time efficiency&lt;&#x2F;strong&gt;. i have not gone through this process, but based on the questions and my knowledge of who gets hired at oxide, i would expect &lt;em&gt;just&lt;&#x2F;em&gt; the written work to take at around 5-15 hours of time for a single application. given oxide and their goals, and the sheer number of people who apply there, i suspect they are ok with that tradeoff (and indeed probably value that it drives away people who aren&#x27;t committed to the application). but most companies are not oxide and cannot afford this amount of time on both sides.&lt;&#x2F;p&gt;
&lt;p&gt;if i were to take ideas from the oxide process without sacrificing too much time, i’d keep &quot;you write the code ahead of time and discuss it in the interview&quot;. this keeps the advantage of take-home interviews—no time pressure, less stressful environment—while adding a &lt;strong&gt;symmetric time&lt;&#x2F;strong&gt; component that makes talented engineers less likely to dismiss the job posting out of hand, without an enormous up-front expenditure of time. and discussing the code live filters out people who just vibecoded the whole thing (they won&#x27;t be able to explain what it does!) while giving everyone else a chance to explain their thinking, helping with &lt;strong&gt;applicability&lt;&#x2F;strong&gt; and &lt;strong&gt;taste&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;this still has some &lt;strong&gt;time asymmetry&lt;&#x2F;strong&gt; if the applicant doesn’t have existing open source work they want to show to an interviewer, but it’s a lot less than 5-15 hours, and the company is forced to dedicate some of their own engineer time, so they have motivation not to “throw work over the wall”, showing respect for the applicant.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;code-review&quot;&gt;code review &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-2-1&quot;&gt;&lt;a href=&quot;#fn-2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#code-review&quot; aria-label=&quot;Anchor link for: code-review&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;this one i’ve also only ever seen once. the format is that the interviewer writes some mediocre code ahead of time and asks the applicant how they would improve it. i did very well on this format so i&#x27;m biased, but i like it a lot. it aces all our criteria:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;it reverses the &lt;strong&gt;time asymmetry&lt;&#x2F;strong&gt; and reduces the amount of &lt;strong&gt;time spent&lt;&#x2F;strong&gt;. the interviewer makes one up front time commitment, the applicant makes no up front commitment, and they spend the same amount of time per interview.&lt;&#x2F;li&gt;
&lt;li&gt;it’s &lt;strong&gt;applicable&lt;&#x2F;strong&gt;: you see how the applicant gives interpersonal feedback; discussions about the code naturally lead into discussions about design; and you get information about their sense of taste.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;imagining-a-better-interview-process&quot;&gt;imagining a better interview process&lt;a class=&quot;zola-anchor&quot; href=&quot;#imagining-a-better-interview-process&quot; aria-label=&quot;Anchor link for: imagining-a-better-interview-process&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;if i were a hiring manager, i would use a combo of a code review interview and a work sample discussed live, giving precedence to the code review and telling the applicant ahead of time that the work sample doesn’t have to be perfect.&lt;&#x2F;p&gt;
&lt;p&gt;programming is fundamentally a collaborative process. having the applicant collaborate on both sides (reviewing and authoring) shows you a lot about how they work, and signals to them that you care about more than the equivalent of their SAT score.&lt;&#x2F;p&gt;
&lt;p&gt;i also suggest there always be at least one interview between the applicant and their future manager (this seems to already be common practice—yay!). &quot;people don&#x27;t quit jobs, they quit bosses&quot;: letting them meet ahead of time saves everyone pain down the road.&lt;&#x2F;p&gt;
&lt;p&gt;thank you for reading! i hope this inspires you to change your own hiring processes, or at least to write a comment telling me why i&#x27;m wrong ^^. you can reach me by &lt;a href=&quot;mailto:blog@jyn.dev&quot;&gt;email&lt;&#x2F;a&gt; if you want to comment privately.&lt;&#x2F;p&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;update from after publishing: a friend said they’ve seen people successfully use chatgpt to game design interviews. oof. &lt;a href=&quot;#fr-1-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;this section was added the day after publishing in response to feedback from senior engineers and hiring managers. &lt;a href=&quot;#fr-2-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>you are in a box</title>
        <published>2025-07-14T00:00:00+00:00</published>
        <updated>2025-07-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/you-are-in-a-box/"/>
        <id>https://jyn.dev/you-are-in-a-box/</id>
        
        <content type="html" xml:base="https://jyn.dev/you-are-in-a-box/">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You are trapped in a box. You have been for a long time.&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
—&lt;a href=&quot;https:&#x2F;&#x2F;drmaciver.substack.com&#x2F;i&#x2F;145700143&#x2F;you-are-in-a-box&quot;&gt;&lt;em&gt;D. R. MacIver&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Every program attempts to expand until it can read mail. Those programs which cannot so expand are replaced by ones which can.&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
—&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Jamie_Zawinski#Zawinski&amp;#x27;s_Law&quot;&gt;&lt;em&gt;Zawinski&#x27;s Law of Software Envelopment&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;switching-costs-and-growth&quot;&gt;switching costs and growth&lt;a class=&quot;zola-anchor&quot; href=&quot;#switching-costs-and-growth&quot; aria-label=&quot;Anchor link for: switching-costs-and-growth&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;most tools simultaneously think too small and too big. “i will let you do anything!”, they promise, “as long as you give up your other tools and switch to me!”&lt;&#x2F;p&gt;
&lt;p&gt;this is true of languages too. any new programming language makes an implicit claim that “using this language will give you an advantage over any other language”, at least for your current problem.&lt;&#x2F;p&gt;
&lt;p&gt;once you start using a tool for one purpose, due to switching costs, you want to keep using that tool. so you start using it for things that wasn’t designed for, and as a result, tools tend to grow and grow and grow until they &lt;a href=&quot;&#x2F;technical-debt-is-different-from-technical-risk&#x2F;#what-to-do-about-risk&quot;&gt;stagnate&lt;&#x2F;a&gt;. in a sense, we have replicated the business boom-and-bust cycle in our own tools.&lt;&#x2F;p&gt;
&lt;!-- &#x2F;technical-debt-is-different-from-technical-risk&#x2F;#technical-risk-means-a-program-is-hard-to-modify --&gt;
&lt;!--## escaping the boom and bust cycle--&gt;
&lt;h2 id=&quot;interoperability&quot;&gt;interoperability&lt;a class=&quot;zola-anchor&quot; href=&quot;#interoperability&quot; aria-label=&quot;Anchor link for: interoperability&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;there are two possible ways to escape this trap. the first is to &lt;a href=&quot;https:&#x2F;&#x2F;graydon2.dreamwidth.org&#x2F;263429.html&quot;&gt;impose a limit on growth&lt;&#x2F;a&gt;, so that tools can’t grow until they bust. this makes a lot of people very unhappy and is generally regarded as a bad idea.&lt;&#x2F;p&gt;
&lt;p&gt;the second is to decrease switching costs. by making it easier to switch between tools, or to interoperate between multiple tools in the same system, there is not as much pressure to have “one big hammer” that gets used for every problem.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;back-compat&quot;&gt;back-compat&lt;a class=&quot;zola-anchor&quot; href=&quot;#back-compat&quot; aria-label=&quot;Anchor link for: back-compat&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;tools and languages can decrease switching costs by keeping backwards compatibility with older tools, or at least being close enough that they’re &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;SxdOUGdseq4?si=X9OZ975hwwzZOxpo&amp;amp;t=346&quot;&gt;easy to learn&lt;&#x2F;a&gt; for people coming from those tools. for example, ripgrep has almost exactly the same syntax as GNU grep, and nearly every compiled language since C has kept the curly braces.&lt;&#x2F;p&gt;
&lt;!--note that you can think of different versions of a tool as having to interoperate with themselves, so you may see these techniques used even when the authors did not intend a clear interface boundary.--&gt;
&lt;h3 id=&quot;standardization&quot;&gt;standardization&lt;a class=&quot;zola-anchor&quot; href=&quot;#standardization&quot; aria-label=&quot;Anchor link for: standardization&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;tools can also collaborate on standards that make it easier to interoperate. this is the basis of nearly every network protocol, since there&#x27;s no guarantee that the same tool will be on the other side of the connection. to some extent this also happens for languages (most notably for C), where a language specification allows multiple different compilers to work on the same code.&lt;&#x2F;p&gt;
&lt;p&gt;this has limitations, however, because the tool itself has to want (or be forced) to interoperate. for example, the binary format for CUDA (a framework for compiling programs to the GPU) is undocumented, so you&#x27;re stuck with &lt;a href=&quot;https:&#x2F;&#x2F;blog.vivekpanyam.com&#x2F;parsing-an-undocumented-file-format&quot;&gt;reverse engineering&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;docs.vulkan.org&#x2F;guide&#x2F;latest&#x2F;what_is_spirv.html&quot;&gt;re-implementing&lt;&#x2F;a&gt; the toolchain if you want to modify it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ffi&quot;&gt;FFI&lt;a class=&quot;zola-anchor&quot; href=&quot;#ffi&quot; aria-label=&quot;Anchor link for: ffi&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;the last &quot;internal&quot; way to talk to languages is through a &quot;foreign function interface&quot;, where functions in the same process can call each other cheaply. this is hard because each language has to go &lt;a href=&quot;https:&#x2F;&#x2F;faultlore.com&#x2F;blah&#x2F;c-isnt-a-language&#x2F;&quot;&gt;all the way down to the C ABI&lt;&#x2F;a&gt; before there&#x27;s something remotely resembling a standard, and because two languages may have incompatible runtime properties that make FFI &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;cmd&#x2F;cgo#hdr-Passing_pointers&quot;&gt;hard&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;words.filippo.io&#x2F;rustgo&#x2F;#why-not-cgo&quot;&gt;slow&lt;&#x2F;a&gt;. languages that do encourage FFI often require you to write separate bindings for each program: for example, Rust requires you to write &lt;code&gt;extern &quot;C&quot;&lt;&#x2F;code&gt; blocks for each declaration, and python requires you to do that and also write wrappers that translate C types into python objects.&lt;&#x2F;p&gt;
&lt;p&gt;i won&#x27;t talk too much more about this—the work i&#x27;m aware of in this area is mostly around &lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WASM&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;component-model.bytecodealliance.org&#x2F;&quot;&gt;WASM Components&lt;&#x2F;a&gt;, and there are also some efforts to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;3470&quot;&gt;raise the baseline for ABI&lt;&#x2F;a&gt; above the C level.&lt;&#x2F;p&gt;
&lt;!--for instance, take the Go language. Go has many strengths—a performant green threads runtime, excellent devtools, static binaries. in exchange, you are locked into the Go ecosystem. unlike other languages (Python, Rust, JS), calls between Go and other languages are [hard](https:&#x2F;&#x2F;pkg.go.dev&#x2F;cmd&#x2F;cgo#hdr-Passing_pointers) and have a [high performance overhead](), which means that most libraries you might want to use have to be rewritten into Go. Compare this to, for example, Lua, which is intentionally designed to be easy to embed into larger applications due to its small language size and minimal runtime requirements.--&gt;
&lt;h3 id=&quot;ipc&quot;&gt;IPC&lt;a class=&quot;zola-anchor&quot; href=&quot;#ipc&quot; aria-label=&quot;Anchor link for: ipc&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;unix-shells&quot;&gt;Unix shells&lt;a class=&quot;zola-anchor&quot; href=&quot;#unix-shells&quot; aria-label=&quot;Anchor link for: unix-shells&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;another approach is to compose tools. the traditional way to do this is to have a shell that allows you to freely compose programs with IPC. this does unlock a lot of freedom! IPC allows programs to communicate across different languages, different ABIs, and different user-facing APIs. it also unlocks &#x27;ad-hoc&#x27; programs, which can be thought of as &lt;a href=&quot;https:&#x2F;&#x2F;gwern.net&#x2F;doc&#x2F;technology&#x2F;2004-03-30-shirky-situatedsoftware.html&quot;&gt;situated software&lt;&#x2F;a&gt; for developers themselves. consider for example the following shell pipeline:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; verify-pack&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;v&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-continuation z-line z-shell&quot;&gt;\
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;        &lt;span class=&quot;z-meta z-group z-expansion z-command z-parens z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; rev-parse&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;git-common-dir&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;objects&#x2F;pack&#x2F;pack-&lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;*&lt;&#x2F;span&gt;.idx &lt;span class=&quot;z-punctuation z-separator z-continuation z-line z-shell&quot;&gt;\
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;&#x2F;span&gt;    &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sort&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;k3&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;n&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cut&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;f1&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;d&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-continuation z-line z-shell&quot;&gt;\
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;&#x2F;span&gt;    &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-while z-shell&quot;&gt;while&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-read z-shell&quot;&gt;read&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; i&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-do z-shell&quot;&gt;do&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;git&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; ls-tree&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;r&lt;&#x2F;span&gt; HEAD&lt;&#x2F;span&gt;  &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;grep&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-end z-shell&quot;&gt;done&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-punctuation z-separator z-continuation z-line z-shell&quot;&gt;\
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;&#x2F;span&gt;    &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;tail&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;this &lt;a href=&quot;https:&#x2F;&#x2F;askubuntu.com&#x2F;questions&#x2F;1259129&#x2F;&quot;&gt;shows the 10 largest files in the git history for the current repository&lt;&#x2F;a&gt;. let&#x27;s set aside the readability issues for now. there are a lot of good ideas here! note that programs are interacting freely in many ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the output of &lt;code&gt;git rev-parse&lt;&#x2F;code&gt; is passed as a CLI argument to &lt;code&gt;git verify-pack&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;the output of &lt;code&gt;git verify-pack&lt;&#x2F;code&gt; is passed as stdin to &lt;code&gt;sort&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;the output of &lt;code&gt;cut&lt;&#x2F;code&gt; is interpreted as a list and programmatically manipulated by &lt;code&gt;while read&lt;&#x2F;code&gt;. this kind of meta-programming is common in shell and has concise (i won&#x27;t go as far as &quot;simple&quot;) syntax.&lt;&#x2F;li&gt;
&lt;li&gt;the output from the meta-programming loop is itself passed as stdin to the &lt;code&gt;tail&lt;&#x2F;code&gt; command&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;the equivalent in a programming language without spawning a subprocess would be very verbose; not only that, it would require a library for the git operations in each language, bringing back the FFI issues from before (not to mention the hard work designing &quot;cut points&quot; for the API interface&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-1&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;). this shell program can be written, concisely, using only tools that already exist.&lt;&#x2F;p&gt;
&lt;p&gt;note though that the data flow here is a DAG: pipes are one-way, and the CLI arguments are evaluated before the new program is ever spawned. as a result, it’s not possible to do any kind of content negotiation (other than the programmer hard-coding it with CLI args; for example tools commonly have &lt;code&gt;--format=json&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;the downside of this approach is that the interface is completely unstructured; programs work on raw bytes, and there is no common interface. it also doesn&#x27;t work if the program is interactive, unless the program deliberately exposes a way to query a running server (e.g. &lt;code&gt;tmux list-panes&lt;&#x2F;code&gt; or &lt;code&gt;nvim --remote&lt;&#x2F;code&gt;). let&#x27;s talk about both of those.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;structured-ipc&quot;&gt;structured IPC&lt;a class=&quot;zola-anchor&quot; href=&quot;#structured-ipc&quot; aria-label=&quot;Anchor link for: structured-ipc&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;powershell&#x2F;scripting&#x2F;lang-spec&#x2F;chapter-04?view=powershell-7.5&quot;&gt;powershell&lt;&#x2F;a&gt;, and more recently, &lt;a href=&quot;https:&#x2F;&#x2F;www.nushell.sh&#x2F;book&#x2F;types_of_data.html&quot;&gt;nushell&lt;&#x2F;a&gt;, extend traditional unix pipelines with structured data and a typesystem. they have mechanisms for parsing arbitrary text into native types, and helper functions for common data formats.&lt;&#x2F;p&gt;
&lt;p&gt;this is really good! i think it is the first major innovation we have seen in the shell language in many decades, and i&#x27;m glad it exists. but it does have some limitations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;there is no interop between powershell and nushell.&lt;&#x2F;li&gt;
&lt;li&gt;there is no protocol for programs to self-describe their output in a schema, so each program&#x27;s output has to be special-cased by each shell.
&lt;ul&gt;
&lt;li&gt;powershell side-steps this by &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;powershell&#x2F;scripting&#x2F;overview?view=powershell-7.5#scripting-language&quot;&gt;building on the .NET runtime&lt;&#x2F;a&gt;, and having native support for programs which emit .NET objects in their &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;powershell&#x2F;module&#x2F;microsoft.powershell.core&#x2F;about&#x2F;about_output_streams?view=powershell-7.5&quot;&gt;output stream&lt;&#x2F;a&gt;. but this doesn&#x27;t generalize to programs that don&#x27;t run on the &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;standard&#x2F;clr&quot;&gt;CLR&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;there is no stability guarantee between versions of a program. even tools with semi-structured JSON output are free to change the structure of the JSON, breaking whatever code parses it.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and it is very hard to fix these limitations because there is no &quot;out-of-band&quot; communication channel that programs could use to emit a schema; the closest you could get is a &quot;standardized file descriptor number&quot;, but that will lock out any program that happens to already be using that FD. we have limited kinds of reflection in the form of shell completion scripts, but they&#x27;re not standardized: there&#x27;s not a standard for the shell to query the program, and there&#x27;s not a standard for the format the program returns. the CLI framework inside the program often &lt;em&gt;does&lt;&#x2F;em&gt; have a schema and reflection capabilities, but they&#x27;re discarded the second you go over an IPC boundary.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;rpc&quot;&gt;RPC&lt;a class=&quot;zola-anchor&quot; href=&quot;#rpc&quot; aria-label=&quot;Anchor link for: rpc&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;how do you get a schema? well, you establish in-band communication. RPC is theoretically about &quot;remote&quot; procedure calls, but it&#x27;s just as often used for local calls. the thing that really distinguishes it is that it&#x27;s in-band: you have a defined interface that emits structured information.&lt;&#x2F;p&gt;
&lt;p&gt;RPC works really quite well! there are frameworks for &lt;a href=&quot;https:&#x2F;&#x2F;protobuf.dev&#x2F;&quot;&gt;forwards- and backwards-compatible RPC&lt;&#x2F;a&gt;; types and APIs are shared across languages; and interop for a new language only requires writing bindings between that language and the on-wire format, not solving a handshake problem between all pairs of languages nor dropping down to the C ABI.&lt;&#x2F;p&gt;
&lt;p&gt;the main downside is that it is a lot of work to add to your program. you have to extensively modify your code to fit it into the shape the framework expects, and to keep it performant you sometimes even have to modify the in-memory representation of your data structures so they can live in a contiguous buffer. you can avoid these problems, but only by giving up performance when deserializing (e.g. by parsing JSON at runtime).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;you-are-trapped-in-a-box&quot;&gt;you are trapped in a box&lt;a class=&quot;zola-anchor&quot; href=&quot;#you-are-trapped-in-a-box&quot; aria-label=&quot;Anchor link for: you-are-trapped-in-a-box&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;all these &lt;a href=&quot;&#x2F;operators-not-users-and-programmers#the-user-programmer-distinction&quot;&gt;limitations&lt;&#x2F;a&gt; are because &lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20210121181531&#x2F;https:&#x2F;&#x2F;djrobstep.com&#x2F;posts&#x2F;programs-are-a-prison&quot;&gt;programs are a prison&lt;&#x2F;a&gt;. your data is trapped inside the box that is your program. the commonality between all these limitations is that they require work from the program developer, and without that work you&#x27;re stuck. even the data that leaves the program has to go through the narrow entrances and exits of the box, and &lt;a href=&quot;https:&#x2F;&#x2F;siderea.dreamwidth.org&#x2F;1540620.html&quot;&gt;anything that doesn&#x27;t fit is discarded&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;some languages try to make the box bigger—interop between Java, Kotlin, and Clojure is comparatively quite easy because they all run on the JVM. but at the end of the day the JVM is another box; getting a non-JVM language to talk to it is hard.&lt;&#x2F;p&gt;
&lt;p&gt;some languages try to make the box extensible—LISPs, and especially Racket, try to make it very easy to build new languages inside the box. but getting non-LISPs inside the box is hard.&lt;&#x2F;p&gt;
&lt;p&gt;some tools try to give you individual features—smalltalk gets you orthogonal persistence; pluto.jl gets you a “terminal of the future”; rustc gets you sub-process incremental builds. but all those features are inside a box.&lt;&#x2F;p&gt;
&lt;p&gt;often, tools don’t even try. vendor lock in, subtle or otherwise, is everywhere around us. tools with this strategy tend to be the largest, since they have both the biggest budget and the greatest incentive to prevent you from switching tools.&lt;&#x2F;p&gt;
&lt;p&gt;and always, always, always, you are at the mercy of the program author.&lt;&#x2F;p&gt;
&lt;p&gt;in my next post, i will discuss how we can escape this box.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bibliography&quot;&gt;bibliography&lt;a class=&quot;zola-anchor&quot; href=&quot;#bibliography&quot; aria-label=&quot;Anchor link for: bibliography&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;drmaciver.substack.com&#x2F;i&#x2F;145700143&#x2F;you-are-in-a-box&quot;&gt;D. R. MacIver, “This is important”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Jamie_Zawinski&quot;&gt;Wikipedia, “Zawinski’s Law of Software Envelopment”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;graydon2.dreamwidth.org&#x2F;263429.html&quot;&gt;Graydon Hoare, “Rust 2019 and beyond: limits to (some) growth.”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;SxdOUGdseq4?si=X9OZ975hwwzZOxpo&amp;amp;t=346&quot;&gt;Rich Hickey, “Simple Made Easy”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.vivekpanyam.com&#x2F;parsing-an-undocumented-file-format&quot;&gt;Vivek Panyam, “Parsing an undocumented file format”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.vulkan.org&#x2F;guide&#x2F;latest&#x2F;what_is_spirv.html&quot;&gt;The Khronos® Group Inc, “Vulcan Documentation: What is SPIR-V”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;faultlore.com&#x2F;blah&#x2F;c-isnt-a-language&#x2F;&quot;&gt;Aria Desires, “C Isn’t A Language Anymore”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;cmd&#x2F;cgo&quot;&gt;Google LLC, “Standard library: cmd.cgo”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;words.filippo.io&#x2F;rustgo&#x2F;&quot;&gt;Filippo Valsorda, “rustgo: calling Rust from Go with near-zero overhead”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WebAssembly Working Group, “WebAssembly”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;component-model.bytecodealliance.org&#x2F;&quot;&gt;The Bytecode Alliance, “The WebAssembly Component Model”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;3470&quot;&gt;Josh Triplett, “crABI v1”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gwern.net&#x2F;doc&#x2F;technology&#x2F;2004-03-30-shirky-situatedsoftware.html&quot;&gt;Clay Shirky, &quot;Situated Software&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;powershell&#x2F;scripting&#x2F;lang-spec&#x2F;chapter-04?view=powershell-7.5&quot;&gt;Microsoft, &quot;PowerShell 7.5: 4. Types&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;powershell&#x2F;scripting&#x2F;overview?view=powershell-7.5&quot;&gt;Microsoft, &quot;PowerShell 7.5: What is PowerShell?&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;powershell&#x2F;module&#x2F;microsoft.powershell.core&#x2F;about&#x2F;about_output_streams?view=powershell-7.5&quot;&gt;Microsoft, &quot;PowerShell 7.5: about_Output_Streams&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;standard&#x2F;clr&quot;&gt;Microsoft, &quot;.NET Execution model: Common Language Runtime (CLR) overview&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.nushell.sh&#x2F;book&#x2F;types_of_data.html&quot;&gt;Nushell Project, &quot;Nu Fundamentals: Types of Data&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;protobuf.dev&#x2F;&quot;&gt;Google LLC, “Protocol Buffers”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20210121181531&#x2F;https:&#x2F;&#x2F;djrobstep.com&#x2F;posts&#x2F;programs-are-a-prison&quot;&gt;Robert Lechte, “Programs are a prison: Rethinking the fundamental building blocks of computing interfaces”&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;siderea.dreamwidth.org&#x2F;1540620.html&quot;&gt;Siderea, &quot;Procrustean Epistemologies&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;blog post forthcoming &lt;a href=&quot;#fr-1-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>constrained languages are easier to optimize</title>
        <published>2025-07-12T00:00:00+00:00</published>
        <updated>2025-07-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/constrained-languages-are-easier-to-optimize/"/>
        <id>https://jyn.dev/constrained-languages-are-easier-to-optimize/</id>
        
        <content type="html" xml:base="https://jyn.dev/constrained-languages-are-easier-to-optimize/">&lt;h2 id=&quot;jyn-what-the-fuck-are-you-talking-about&quot;&gt;jyn, what the fuck are you talking about&lt;a class=&quot;zola-anchor&quot; href=&quot;#jyn-what-the-fuck-are-you-talking-about&quot; aria-label=&quot;Anchor link for: jyn-what-the-fuck-are-you-talking-about&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;a recurring problem in modern “low-level” languages&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-2-1&quot;&gt;&lt;a href=&quot;#fn-2&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; is that they are hard to optimize. they &lt;a href=&quot;https:&#x2F;&#x2F;queue.acm.org&#x2F;detail.cfm?id=3212479&quot;&gt;do not reflect the hardware&lt;&#x2F;a&gt;, they require doing &lt;a href=&quot;https:&#x2F;&#x2F;www.ralfj.de&#x2F;blog&#x2F;2018&#x2F;07&#x2F;24&#x2F;pointers-and-bytes.html&quot;&gt;complex alias analysis&lt;&#x2F;a&gt;, and they &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@jbyj&#x2F;my-javascript-is-faster-than-your-rust-5f98fe5db1bf&quot;&gt;constantly allocate and deallocate memory&lt;&#x2F;a&gt;. &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-1&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; they looked at &lt;a href=&quot;https:&#x2F;&#x2F;buttondown.com&#x2F;hillelwayne&#x2F;archive&#x2F;the-capability-tractability-tradeoff&#x2F;&quot;&gt;the structure&#x2F;expressiveness tradeoff&lt;&#x2F;a&gt; and consistently chose expressiveness.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-does-a-faster-language-look-like&quot;&gt;what does a faster language look like&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-does-a-faster-language-look-like&quot; aria-label=&quot;Anchor link for: what-does-a-faster-language-look-like&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;consider this paper on &lt;a href=&quot;https:&#x2F;&#x2F;www.cs.tufts.edu&#x2F;~nr&#x2F;cs257&#x2F;archive&#x2F;duncan-coutts&#x2F;stream-fusion.pdf&quot;&gt;stream fusion in Haskell&lt;&#x2F;a&gt;. this takes a series of nested loops, each of which logically allocate an array equal in size to the input, and optimizes them down to constant space using unboxed integers. doing the same with C is inherently less general because the optimizing compiler must first prove that none of the pointers involved alias each other. in fact, optimizations are so much easier to get right in Haskell that &lt;a href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;GHC&#x2F;Using_rules&quot;&gt;GHC exposes a mechanism for users to define them&lt;&#x2F;a&gt;! these optimizations are possible because of &lt;a href=&quot;https:&#x2F;&#x2F;softwareengineering.stackexchange.com&#x2F;questions&#x2F;254304&#x2F;what-is-referential-transparency&quot;&gt;referential transparency&lt;&#x2F;a&gt;—the compiler statically knows whether an expression can have a side effect.&lt;&#x2F;p&gt;
&lt;p&gt;“haskell is known for performance problems, why are you using it as an example. also all GC languages constantly box and unbox values, you need raw pointers to avoid that.”&lt;&#x2F;p&gt;
&lt;p&gt;GC languages do constantly box and unbox &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-4-1&quot;&gt;&lt;a href=&quot;#fn-4&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, but you don’t need raw pointers to avoid that. consider &lt;a href=&quot;https:&#x2F;&#x2F;futhark-lang.org&quot;&gt;futhark&lt;&#x2F;a&gt;, a functional parallel language that compiles to the GPU. its benchmarks show it being &lt;a href=&quot;https:&#x2F;&#x2F;futhark-lang.org&#x2F;performance.html&quot;&gt;up to orders of magnitude faster than sequential C&lt;&#x2F;a&gt; on problems that fit well into its domain. it does so by having unboxed fixed-size integers, disallowing ragged arrays, and constraining many common operations on arrays to only work if the arrays are statically known to have the same size.&lt;&#x2F;p&gt;
&lt;p&gt;futhark is highly restrictive. consider instead SQL. SQL is a declarative language, which means the actual execution is determined by a query planner, it’s not constrained by the source code. SQL has also been around for decades, which means we can compare the performance of the same code over decades. it turns out &lt;a href=&quot;https:&#x2F;&#x2F;rmarcus.info&#x2F;blog&#x2F;2024&#x2F;04&#x2F;12&#x2F;pg-over-time.html&quot;&gt;common operations in postgres are twice as fast as they were a decade ago&lt;&#x2F;a&gt;. you can imagine writing SQL inline—wait no it turns out C# &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;dotnet&#x2F;csharp&#x2F;linq&#x2F;&quot;&gt;already has that covered&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;SQL is not a general purpose language. but you don’t need it to be! your performance issues are not evenly distributed across your code; you can identify the hotspots and choose against a language with raw pointers in favor of one more structured and therefore more amenable to optimization.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sometimes-you-need-raw-pointers&quot;&gt;sometimes you need raw pointers&lt;a class=&quot;zola-anchor&quot; href=&quot;#sometimes-you-need-raw-pointers&quot; aria-label=&quot;Anchor link for: sometimes-you-need-raw-pointers&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;there are various kinds of memory optimizations that are only possible if you have access to raw pointers; for example &lt;a href=&quot;https:&#x2F;&#x2F;piotrduperas.com&#x2F;posts&#x2F;nan-boxing&quot;&gt;NaN boxing&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;laurelmay&#x2F;xorlist&quot;&gt;XOR linked lists&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Tagged_pointer?wprov=sfti1&quot;&gt;tagged pointers&lt;&#x2F;a&gt;. sometimes you need them, which means you need a language that allows them. but these kinds of data structures are very rare! we should steer towards a general purpose language that does not expose raw pointers, and only drop down when we actually need to use them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-does-a-faster-general-purpose-language-look-like&quot;&gt;what does a faster general purpose language look like&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-does-a-faster-general-purpose-language-look-like&quot; aria-label=&quot;Anchor link for: what-does-a-faster-general-purpose-language-look-like&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;well, Rust is a good step in the right direction: raw pointers are opt-in with &lt;code&gt;unsafe&lt;&#x2F;code&gt;; Iterators support functional paradigms that allow removing bounds checks and &lt;a href=&quot;https:&#x2F;&#x2F;ntietz.com&#x2F;blog&#x2F;rusts-iterators-optimize-footgun&#x2F;&quot;&gt;fusing stream-like operations&lt;&#x2F;a&gt;; and libraries like &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;rayon&#x2F;latest&#x2F;rayon&#x2F;&quot;&gt;rayon&lt;&#x2F;a&gt; make it much easier to do multi-threaded compilation.&lt;&#x2F;p&gt;
&lt;p&gt;but i think this is in some sense the wrong question. we should not be asking “what language can i use everywhere for every purpose”; we should build meta-languages that allow you to easily use the right tool for the job. this is already true for regular expressions and query languages; let’s go further. i want inline futhark; inline CSS selectors; inline datalog; ffi between python and C that’s trivially easy. the easier we make it to interop, the easier it becomes to pick the right tool for the job. &lt;!-- TODO: link to systems thinking post --&gt;  &lt;!-- TODO: link to composable compilers --&gt;&lt;&#x2F;p&gt;
&lt;p&gt;next time you hit a missed optimization, ask yourself: why was this hard for the compiler? can i imagine a language where optimizing this is easier?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-have-we-learned&quot;&gt;what have we learned?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-have-we-learned&quot; aria-label=&quot;Anchor link for: what-have-we-learned&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;languages that expose raw pointers are surprisingly hard to optimize&lt;&#x2F;li&gt;
&lt;li&gt;by constraining the language to require additional structure, the compiler has much more freedom to optimize&lt;&#x2F;li&gt;
&lt;li&gt;by making it easier to switch between languages, we make it easier to choose the right tool for the job, increasing the performance of our code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;this is true for all of C, C++, and unsafe Rust (and to some extent Fortran, but Fortran &lt;a href=&quot;https:&#x2F;&#x2F;beza1e1.tuxen.de&#x2F;articles&#x2F;faster_than_C.html&quot;&gt;does not require alias analysis&lt;&#x2F;a&gt;). &lt;a href=&quot;#fr-2-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;also, they require doing PGO ahead of time instead of collecting info dynamically at runtime. but i haven’t found any benchmarks showing Java&#x2F;luaJIT programs that are faster than equivalent C, so i won’t claim that JIT is inherently faster. &lt;a href=&quot;#fr-1-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-4&quot;&gt;
&lt;p&gt;true in the general case, but not always in practice. in Go and Java, the compiler needs to do escape analysis to know whether a variable can be unboxed. in Haskell, the situation is more complicated because of lazy evaluation; see &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;XiTO1EGKrhE?si=z1IqPD4KdEkqcYd9&quot;&gt;Alexis King on the GHC strictness analyzer&lt;&#x2F;a&gt; for more info. &lt;a href=&quot;#fr-4-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>sorry for the rss screwup</title>
        <published>2025-07-06T00:00:00+00:00</published>
        <updated>2025-07-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/sorry-for-the-rss-screwup/"/>
        <id>https://jyn.dev/sorry-for-the-rss-screwup/</id>
        
        <content type="html" xml:base="https://jyn.dev/sorry-for-the-rss-screwup/">&lt;p&gt;a couple days ago i pushed about 10 empty posts at once to everyone subscribed to my RSS feed. oops. sorry about that.&lt;&#x2F;p&gt;
&lt;p&gt;i&#x27;ve since fixed it, but most RSS readers i&#x27;ve seen will cache the posts indefinitely once they&#x27;re published.
the workaround for my own client was to delete my page and then readd it, which will unfortunately discard all your read&#x2F;unread state.&lt;&#x2F;p&gt;
&lt;p&gt;the reason this happened is that i added a new kind of &quot;stub&quot; post, and handled that correctly on the main site, but not on the rss feed. you can see the intended layout of the stub posts &lt;a href=&quot;&#x2F;computer-of-the-future&quot;&gt;here&lt;&#x2F;a&gt; if you&#x27;re interested.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>operators, not users and programmers</title>
        <published>2025-07-05T00:00:00+00:00</published>
        <updated>2025-07-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/operators-not-users-and-programmers/"/>
        <id>https://jyn.dev/operators-not-users-and-programmers/</id>
        
        <content type="html" xml:base="https://jyn.dev/operators-not-users-and-programmers/">&lt;p&gt;&lt;strong&gt;the modern distinction between “programmers” and “users” is evil and destroys agency.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;consider-how-the-spreadsheets-grow&quot;&gt;consider how the spreadsheets grow&lt;a class=&quot;zola-anchor&quot; href=&quot;#consider-how-the-spreadsheets-grow&quot; aria-label=&quot;Anchor link for: consider-how-the-spreadsheets-grow&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;spreadsheets are hugely successful. Felienne Hermans, who has spent her career studying spreadsheets, &lt;a href=&quot;https:&#x2F;&#x2F;www.felienne.com&#x2F;archives&#x2F;2453&quot;&gt;attributes this success&lt;&#x2F;a&gt; to &quot;&lt;em&gt;their immediate feedback system and their continuous deployment model&lt;&#x2F;em&gt;&quot;: the spreadsheet shows you its result as soon as you open it, and it requires no steps to run other than to install Excel and double-click the file.&lt;&#x2F;p&gt;
&lt;p&gt;Rik calls Excel “malleable software” and the resulting programs &lt;a href=&quot;https:&#x2F;&#x2F;nothingisnttrivial.com&#x2F;vines.html&quot;&gt;“vine-like systems”&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The dream of malleable software is that we can enlarge the space of possibilities, users can enjoy more freedom and get more out of their software, without having to rely on software developers to provide it for them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;i would go one step further: the dream of malleable software is to unify users and programmers, such that there are just “operators” of a computer, and “writing a program” doesn’t sound any harder than “writing a resume”:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;the distinction between &quot;user&quot; and &quot;programmer&quot; is an artifact of our presently barely-programmable and barely-usable computing systems.  I would like to use the neutral word &quot;operator&quot; instead.
—&lt;a href=&quot;http:&#x2F;&#x2F;www.loper-os.org&#x2F;?p=284&quot;&gt;Stanislav&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;this is a relatively new distinction! if we look at the history of computing and of programming languages, we see very different patterns:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the 1960’s the supply of programmers was not very deep so IBM and other companies trying to gain a computer sale would often have to sell the business prospect on the idea of creating its own programmer(s). Sometimes it was the shipping clerk; sometimes it was the head order taker; sometimes it was a bookkeeper, and sometimes it was a woman or man packing items in the warehouse.
—&lt;a href=&quot;https:&#x2F;&#x2F;www.barnesandnoble.com&#x2F;w&#x2F;the-as-400-ibm-i-rpg-rpgiv-programming-guide-brian-w-kelly&#x2F;1124946681&quot;&gt;Brian M. Kelly, The AS&#x2F;400 and IBM i RPG Programming Guide&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;this is what i want: for programming to be easy and simple enough to pick up that people can do it without specialized training in the field, so that they can write &lt;a href=&quot;https:&#x2F;&#x2F;gwern.net&#x2F;doc&#x2F;technology&#x2F;2004-03-30-shirky-situatedsoftware.html&quot;&gt;situated software&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-user-programmer-distinction&quot;&gt;the “user&#x2F;programmer” distinction&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-user-programmer-distinction&quot; aria-label=&quot;Anchor link for: the-user-programmer-distinction&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;contrast malleable software to the systems that programmers often build:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Many, many technologists have taken one look at an existing workflow of spreadsheets, reacted with performative disgust, and proposed the trifecta of microservices, Kubernetes and something called a &quot;service mesh&quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This kind of Big Enterprise technology however takes away that basic agency of those Excel users, who no longer understand the business process they run and now have to negotiate with &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=y8OnoxKotPQ&quot;&gt;ludicrous technology dweebs&lt;&#x2F;a&gt; for each software change. The previous pliability of the spreadsheets has been completely lost.
—&lt;a href=&quot;https:&#x2F;&#x2F;calpaterson.com&#x2F;bank-python.html&quot;&gt;Cal Peterson&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;now, this doesn’t happen because programmers are stupid and evil. it happens because the systems we build are amenable to all the features that programmers &lt;a href=&quot;https:&#x2F;&#x2F;www.hillelwayne.com&#x2F;post&#x2F;what-we-can-learn&#x2F;#version-control&quot;&gt;take for granted&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;distributed version control systems (VCS)&lt;&#x2F;li&gt;
&lt;li&gt;automated testing (when integrated with a VCS, often called &quot;continuous integration&quot;)&lt;&#x2F;li&gt;
&lt;li&gt;gradual controlled rollouts (when integrated with a VCS, often called &quot;continuous deployment&quot;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;what i want to imagine is what it would look like to build computing systems that have those features and are also malleable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-could-a-malleable-system-with-low-technical-risk-look-like&quot;&gt;what could a malleable system with &lt;a href=&quot;https:&#x2F;&#x2F;nothingisnttrivial.com&#x2F;technical-functional.html&quot;&gt;low technical risk&lt;&#x2F;a&gt; look like?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-could-a-malleable-system-with-low-technical-risk-look-like&quot; aria-label=&quot;Anchor link for: what-could-a-malleable-system-with-low-technical-risk-look-like&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;let&#x27;s start by looking at what malleable systems already exist.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;malleable-languages&quot;&gt;malleable languages&lt;a class=&quot;zola-anchor&quot; href=&quot;#malleable-languages&quot; aria-label=&quot;Anchor link for: malleable-languages&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;spreadsheets, as previously discussed&lt;&#x2F;li&gt;
&lt;li&gt;WYSIWYG editors: Microsoft Word, Obsidian, Typst, Wordpress. In Word, and in Obsidian&#x27;s default view, the compile step is completely hidden and it appears to the user as if the source and rendered view are the same. in other editors, the rendered view updates quickly and frequently enough that they get immediate feedback, just like a spreadsheet.&lt;&#x2F;li&gt;
&lt;li&gt;browser devtools, where editing an element in the inspector immediately updates the rendered view&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sonic-pi.net&#x2F;&quot;&gt;sonic-pi&lt;&#x2F;a&gt;, where editing code live-updates the sound played&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;how-i-write-blog-posts&#x2F;&quot;&gt;my blog&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;note these aren&#x27;t &lt;em&gt;just&lt;&#x2F;em&gt; hot-patching, where you edit a system while it&#x27;s running. hot-patching is certainly useful and i would like to see more of it, but it doesn&#x27;t unify the source and rendered version of a program, you still have to trip the condition in order to observe the change. malleable languages are a combination of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;hot-patching&lt;&#x2F;li&gt;
&lt;li&gt;live previews that makes updates appear instant&lt;&#x2F;li&gt;
&lt;li&gt;undo&#x2F;redo for the whole system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;malleable-version-control&quot;&gt;malleable version control&lt;a class=&quot;zola-anchor&quot; href=&quot;#malleable-version-control&quot; aria-label=&quot;Anchor link for: malleable-version-control&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;file shares: google drive; sharepoint; onedrive; etc. the tooling for diffing and reverting is very primitive compared to git or hg (in particular diffing is the responsibility of the application, not the VCS), but the primitives are there.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;calpaterson.com&#x2F;bank-python.html#:~:text=barbara&quot;&gt;Bank Python&lt;&#x2F;a&gt;, where the distinction between local and persisted storage is smoothed over by the runtime&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;note a pattern here: these don&#x27;t require prior approval in order to use. anyone can throw a file into google drive and hit share without prior approval (sometimes this is frowned upon, in which case it gets called &quot;Shadow IT&quot;).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;malleable-deployment&quot;&gt;malleable deployment&lt;a class=&quot;zola-anchor&quot; href=&quot;#malleable-deployment&quot; aria-label=&quot;Anchor link for: malleable-deployment&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Bank Python&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;calpaterson.com&#x2F;bank-python.html#:~:text=once%20described&quot;&gt;vouch system&lt;&#x2F;a&gt;, where hitting &quot;approve&quot; insta-deploys to prod. at a technical level this is basically the same as code review, but unlike normal CI systems it’s not configured to require tests to pass, because anything that’s too annoying will end up with people bypassing the system to build shadow IT.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;unfortunately i am not aware of a malleable testing system—if you know of one, please do &lt;a href=&quot;mailto:blog@jyn.dev&quot;&gt;tell me&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;putting-it-together&quot;&gt;putting it together&lt;a class=&quot;zola-anchor&quot; href=&quot;#putting-it-together&quot; aria-label=&quot;Anchor link for: putting-it-together&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;so, we want the following from a malleable system:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;hot-reloading and live previews, like spreadsheets
&lt;ul&gt;
&lt;li&gt;in particular, we want the user to write in the representation that makes the most sense to them, whether that&#x27;s a spreadsheet or an SQL query or a text editor of markup&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;..&#x2F;complected-and-orthogonal-persistence&quot;&gt;automatic and continuous durability&lt;&#x2F;a&gt;, like autosave in microsoft office products.
&lt;ul&gt;
&lt;li&gt;in particular this undo&#x2F;redo capability works on the whole system including derived data, not just the source code itself, so you can try new things without fear of breaking everything. the closest programmers have to this today is &lt;code&gt;jj&lt;&#x2F;code&gt;, which &lt;a href=&quot;https:&#x2F;&#x2F;jj-vcs.github.io&#x2F;jj&#x2F;latest&#x2F;working-copy&#x2F;&quot;&gt;automatically snapshots the working tree&lt;&#x2F;a&gt;, but taking snapshots still requires a manual action, and you need to set up the system in advance.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;distributed version control++
&lt;ul&gt;
&lt;li&gt;with unrestricted &lt;em&gt;distribution&lt;&#x2F;em&gt; and an easy interface, like google drive and dropbox&lt;&#x2F;li&gt;
&lt;li&gt;with diffing&#x2F;merging&#x2F;reverting, like traditional VCS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;automated and instantly triggered testing, like piper at google. this could run your tests in the background as you edit your program, with integrated build caching so that only the affected tests rerun.&lt;&#x2F;li&gt;
&lt;li&gt;continuous deployment
&lt;ul&gt;
&lt;li&gt;we want explicit approval and controlled rollout, like traditional CD, so we can separate &quot;upload the code&quot; from &quot;run the code in prod&quot;&lt;&#x2F;li&gt;
&lt;li&gt;but we want it to be trivially easy to give that approval, like double-clicking an email attachment or the vouch system. don&#x27;t confuse &quot;controlled rollout&quot; with access control—it&#x27;s useful even if you&#x27;re a solo programmer.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;and of course, performance.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;this is a tall order! the rest of this series is dedicated to ideas about how to make this possible.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bibliography&quot;&gt;bibliography&lt;a class=&quot;zola-anchor&quot; href=&quot;#bibliography&quot; aria-label=&quot;Anchor link for: bibliography&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.felienne.com&#x2F;archives&#x2F;2453&quot;&gt;Felienne Hermans, &quot;Proposition #1&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nothingisnttrivial.com&#x2F;vines.html&quot;&gt;Rik de Kort, &quot;Vine-like Systems and Malleability&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nothingisnttrivial.com&#x2F;technical-functional.html&quot;&gt;Rik de Kort, &quot;Technical and functional risk&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.loper-os.org&#x2F;?p=284&quot;&gt;Stanislav Datskovskiy, &quot;Seven Laws of Sane Personal Computing&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.barnesandnoble.com&#x2F;w&#x2F;the-as-400-ibm-i-rpg-rpgiv-programming-guide-brian-w-kelly&#x2F;1124946681&quot;&gt;Brian M. Kelly, &lt;em&gt;The AS&#x2F;400 and IBM i RPG Programming Guide&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gwern.net&#x2F;doc&#x2F;technology&#x2F;2004-03-30-shirky-situatedsoftware.html&quot;&gt;Clay Shirky, &quot;Situated Software&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;calpaterson.com&#x2F;bank-python.html&quot;&gt;Cal Peterson, &quot;An oral history of Bank Python&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.hillelwayne.com&#x2F;post&#x2F;what-we-can-learn&#x2F;#version-control&quot;&gt;Hillel Wayne, &quot;What engineering can teach (and learn from) us&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sonic-pi.net&#x2F;&quot;&gt;Sonic Pi&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jj-vcs.github.io&#x2F;jj&#x2F;latest&#x2F;working-copy&#x2F;&quot;&gt;&quot;Jujutsu—a version control system&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;p-s-what-will-people-build-with-this-power&quot;&gt;P.S: what will people build with this power?&lt;a class=&quot;zola-anchor&quot; href=&quot;#p-s-what-will-people-build-with-this-power&quot; aria-label=&quot;Anchor link for: p-s-what-will-people-build-with-this-power&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;i consulted a local friend of mine, a polisci major, and asked him what he would build if he were able to program. he said a penguin that walks across the screen, followed by a puffin friend for him. so, here&#x27;s to penguins 🐧
&lt;img src=&quot;&#x2F;900.jpg&quot; alt=&quot;penguin&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;Puffin_(Fratercula_arctica).jpg&quot; alt=&quot;puffin&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>complected and orthogonal persistence</title>
        <published>2025-06-30T00:00:00+00:00</published>
        <updated>2025-06-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/complected-and-orthogonal-persistence/"/>
        <id>https://jyn.dev/complected-and-orthogonal-persistence/</id>
        
        <content type="html" xml:base="https://jyn.dev/complected-and-orthogonal-persistence/">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Everything Not Saved Will Be Lost&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;—Ancient Nintendo Proverb&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;persistence-is-hard&quot;&gt;persistence is hard&lt;a class=&quot;zola-anchor&quot; href=&quot;#persistence-is-hard&quot; aria-label=&quot;Anchor link for: persistence-is-hard&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;say that you are writing an editor. you don&#x27;t want to lose people&#x27;s work so you implement an &quot;autobackup&quot; feature, so that people can restore their unsaved changes if the program or whole computer crashes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;danluu.com&#x2F;file-consistency&#x2F;&quot;&gt;implementing this is hard&lt;&#x2F;a&gt;! the way i would do it is to serialize the data structures using something like &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;bincode&#x2F;latest&#x2F;bincode&#x2F;&quot;&gt;bincode&lt;&#x2F;a&gt; and then write them to an SQLite database so that i get crash-consistency. there are other approaches with different tradeoffs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;languages-with-persistence&quot;&gt;languages with persistence&lt;a class=&quot;zola-anchor&quot; href=&quot;#languages-with-persistence&quot; aria-label=&quot;Anchor link for: languages-with-persistence&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;this &lt;a href=&quot;https:&#x2F;&#x2F;archive.cs.st-andrews.ac.uk&#x2F;papers&#x2F;download&#x2F;ABC+83b.pdf&quot;&gt;1983 paper&lt;&#x2F;a&gt; asks: why are we spending so much time rewriting this in applications, instead of doing it once in the runtime? it then introduces a language called &quot;PS-algol&quot;, which supports exactly this through a library. note that arbitrary data types in the language are supported without the need for writing user code.&lt;&#x2F;p&gt;
&lt;p&gt;it turns out that this idea is already being used in production. not in that form—people don’t use Algol anymore—but the idea is the same. M (better known as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;MUMPS&quot;&gt;MUMPS&lt;&#x2F;a&gt;), &lt;a href=&quot;https:&#x2F;&#x2F;calpaterson.com&#x2F;bank-python.html&quot;&gt;Bank Python&lt;&#x2F;a&gt;, and the &lt;a href=&quot;https:&#x2F;&#x2F;www.devever.net&#x2F;~hl&#x2F;f&#x2F;as400guide.pdf&quot;&gt;IBM i&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-4-1&quot;&gt;&lt;a href=&quot;#fn-4&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; are still used in healthcare, financial, and insurance systems, and they work exactly like this&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-5-1&quot;&gt;&lt;a href=&quot;#fn-5&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. here is a snippet of M that persists some data to a database:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;mumps&quot; class=&quot;language-mumps z-code&quot;&gt;&lt;code class=&quot;language-mumps&quot; data-lang=&quot;mumps&quot;&gt;&lt;span class=&quot;z-source z-mumps&quot;&gt; &lt;span class=&quot;z-keyword&quot;&gt;SET&lt;&#x2F;span&gt; ^table(&lt;span class=&quot;z-string z-quoted z-double z-mumps&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-mumps&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;column&lt;span class=&quot;z-punctuation z-definition z-string z-end z-mumps&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,&lt;span class=&quot;z-string z-quoted z-double z-mumps&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-mumps&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;primary key&lt;span class=&quot;z-punctuation z-definition z-string z-end z-mumps&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;)=&lt;span class=&quot;z-string z-quoted z-double z-mumps&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-mumps&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;value&lt;span class=&quot;z-punctuation z-definition z-string z-end z-mumps&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-mumps&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and here is some Bank Python that does the same:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;db&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-arguments z-python&quot;&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&#x2F;my_table&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;Table&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;  &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-sequence z-tuple z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;etf&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;str&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-sequence z-tuple z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;shares&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;float&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;  &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;SPY&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-float z-decimal z-python&quot;&gt;1200&lt;span class=&quot;z-punctuation z-separator z-decimal z-python&quot;&gt;.&lt;&#x2F;span&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and finally some COBOL: &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-3-1&quot;&gt;&lt;a href=&quot;#fn-3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;COBOL&quot; class=&quot;language-COBOL z-code&quot;&gt;&lt;code class=&quot;language-COBOL&quot; data-lang=&quot;COBOL&quot;&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;&lt;span class=&quot;z-keyword z-identifiers z-cobol&quot;&gt;IDENTIFICATION DIVISION&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;&lt;span class=&quot;z-keyword z-verb z-cobol&quot;&gt;PROGRAM-ID&lt;&#x2F;span&gt;. &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;FILES&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;&lt;span class=&quot;z-keyword z-identifiers z-cobol&quot;&gt;ENVIRONMENT DIVISION&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;  &lt;span class=&quot;z-keyword z-identifiers z-cobol&quot;&gt;INPUT-OUTPUT SECTION&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;	&lt;span class=&quot;z-keyword z-identifiers z-cobol&quot;&gt;FILE-CONTROL&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;	  &lt;span class=&quot;z-keyword z-identifiers z-cobol&quot;&gt;SELECT&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;TRANSACTIONS&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-identifers z-cobol&quot;&gt;ASSIGN&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-identifers z-cobol&quot;&gt;TO&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-cobol&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-cobol&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;transactions.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-cobol&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;	  &lt;span class=&quot;z-keyword z-identifers z-cobol&quot;&gt;ORGANIZATION&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-identifers z-cobol&quot;&gt;IS&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-identifers z-cobol&quot;&gt;SEQUENTIAL&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;&lt;span class=&quot;z-keyword z-identifiers z-cobol&quot;&gt;DATA DIVISION&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;  &lt;span class=&quot;z-keyword z-identifiers z-cobol&quot;&gt;FILE SECTION&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;	&lt;span class=&quot;z-keyword z-identifiers z-cobol&quot;&gt;FD&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;TRANSACTIONS&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;	&lt;span class=&quot;z-constant z-numeric z-cobol&quot;&gt;01&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;TRANSACTION-STRUCT&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;	  &lt;span class=&quot;z-constant z-numeric z-cobol&quot;&gt;02&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;UID&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-picture z-cobol&quot;&gt;PIC 9(5).&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;	  &lt;span class=&quot;z-constant z-numeric z-cobol&quot;&gt;02&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;DESC&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-picture z-cobol&quot;&gt;PIC X(25).&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;&lt;span class=&quot;z-keyword z-identifiers z-cobol&quot;&gt;WORKING-STORAGE SECTION&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;	&lt;span class=&quot;z-constant z-numeric z-cobol&quot;&gt;01&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;TRANSACTION-RECORD&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;	  &lt;span class=&quot;z-constant z-numeric z-cobol&quot;&gt;02&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;UID&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-picture z-cobol&quot;&gt;PIC 9(5)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-identifers z-cobol&quot;&gt;VALUE&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-cobol&quot;&gt;12345&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;	  &lt;span class=&quot;z-constant z-numeric z-cobol&quot;&gt;02&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;DESC&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-picture z-cobol&quot;&gt;PIC X(25)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-identifers z-cobol&quot;&gt;VALUE&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-cobol&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-cobol&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;TEST TRANSACTION&lt;span class=&quot;z-punctuation z-definition z-string z-end z-cobol&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;&lt;span class=&quot;z-keyword z-identifiers z-cobol&quot;&gt;PROCEDURE DIVISION&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;  &lt;span class=&quot;z-keyword z-verbs z-cobol&quot;&gt;OPEN&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-identifers z-cobol&quot;&gt;OUTPUT&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;TRANSACTIONS&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;	&lt;span class=&quot;z-keyword z-verbs z-cobol&quot;&gt;WRITE&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;TRANSACTION-STRUCT&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-identifers z-cobol&quot;&gt;FROM&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;TRANSACTION-RECORD&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;  &lt;span class=&quot;z-keyword z-verbs z-cobol&quot;&gt;CLOSE&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-symbol z-cobol&quot;&gt;TRANSACTIONS&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-cobol&quot;&gt;  &lt;span class=&quot;z-keyword z-identifiers z-cobol&quot;&gt;STOP RUN&lt;&#x2F;span&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;note how in all of these, the syntax for persisting the data to disk is essentially the same as persisting it to memory (in MUMPS, persisting to memory is exactly the same, except you would write &lt;code&gt;SET table&lt;&#x2F;code&gt; instead of &lt;code&gt;SET ^table&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;if you don&#x27;t require the runtime to support all datatypes, there are frameworks for doing this as a library. &lt;a href=&quot;https:&#x2F;&#x2F;protobuf.dev&#x2F;&quot;&gt;protobuf&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;flatbuffers.dev&#x2F;&quot;&gt;flatbuffer&lt;&#x2F;a&gt; both autogenerate the code for a restricted set of data types, so that you only have to write the code invoking it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;orthogonal-persistence&quot;&gt;orthogonal persistence&lt;a class=&quot;zola-anchor&quot; href=&quot;#orthogonal-persistence&quot; aria-label=&quot;Anchor link for: orthogonal-persistence&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;the thing these languages and frameworks have in common is that the persistence is part of the program source code; either you have to choose a language that already has this support, or you have to do extensive modifications to the source code to persist the data at the right points. i will call this kind of persistence &lt;em&gt;complected persistence&lt;&#x2F;em&gt; because they tie together the business logic and persistence logic (see &lt;a href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Simple-Made-Easy&#x2F;&quot;&gt;Simple Made Easy&lt;&#x2F;a&gt; by Rich Hickey for the history of the word &quot;complect&quot;).&lt;&#x2F;p&gt;
&lt;p&gt;there is also &lt;em&gt;orthogonal persistence&lt;&#x2F;em&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Persistence_(computer_science)#Orthogonal_or_transparent_persistence&quot;&gt;&quot;orthogonal persistence&quot;&lt;&#x2F;a&gt; means your program&#x27;s state is saved automatically without special work from you the programmer. in particular, the serialization is managed by the OS, database, or language runtime. as a result, you don&#x27;t have to care about persistence, only about implementing business logic; the two concerns are &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Orthogonality#Computer_science&quot;&gt;orthogonal&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;orthogonal persistence is more common than you might think. some examples:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hibernation_(computing)&quot;&gt;hibernation&lt;&#x2F;a&gt; (suspend to disk). first invented in 1992 for the Compaq &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Compaq_LTE#LTE_Lite&quot;&gt;LTE Lite&lt;&#x2F;a&gt;. Windows has this on by default since Windows 8 (2012). MacOS has had it on by default since OS X 10.4 (2005).&lt;&#x2F;li&gt;
&lt;li&gt;virtualized hibernation in hypervisors like VirtualBox and VMWare (usually labeled &quot;Save the machine state&quot; or something similar)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-far-can-we-take-this&quot;&gt;how far can we take this?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-far-can-we-take-this&quot; aria-label=&quot;Anchor link for: how-far-can-we-take-this&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;these forms of orthogonal persistence work on the whole OS state. you could imagine a version that works on individual processes: swap the process to disk, restore it later. the kernel kinda already does this when it does scheduling. you can replicate it in userspace with &lt;a href=&quot;https:&#x2F;&#x2F;thume.ca&#x2F;2020&#x2F;04&#x2F;18&#x2F;telefork-forking-a-process-onto-a-different-computer&#x2F;&quot;&gt;telefork&lt;&#x2F;a&gt;, which even lets you spawn a process onto another machine.&lt;&#x2F;p&gt;
&lt;p&gt;but the rest of the OS moves on while the process is suspended: the files it accesses may have changed, the processes it was talking to over a socket may have exited. what we want is to snapshot the process state: whatever files on disk stay on disk, whatever processes it was talking to continue running. this allows you to rewind and replay the process, as if the whole thing were running in a database transaction.&lt;&#x2F;p&gt;
&lt;p&gt;what do we need in order to do that?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;a filesystem that supports atomic accesses, snapshots, and transaction restarts, such as &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ZFS#Snapshots_and_clones&quot;&gt;ZFS&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;a runtime that supports detailed tracking and replay of syscalls, such as &lt;a href=&quot;https:&#x2F;&#x2F;rr-project.org&#x2F;&quot;&gt;rr&lt;&#x2F;a&gt;. this works by intercepting syscalls with &lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man2&#x2F;ptrace.2.html&quot;&gt;ptrace()&lt;&#x2F;a&gt;, among other mechanisms, and does not require any modifications to the program executable or source code.&lt;&#x2F;li&gt;
&lt;li&gt;a sandbox that prevents talking to processes that weren’t running when the target process was spawned (unless those processes are also in the sandbox and tracked with this mechanism), such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;containers&#x2F;bubblewrap&quot;&gt;bubblewrap&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;effectively, we are turning syscalls into &lt;a href=&quot;http:&#x2F;&#x2F;habitatchronicles.com&#x2F;2017&#x2F;05&#x2F;what-are-capabilities&#x2F;&quot;&gt;capabilities&lt;&#x2F;a&gt;, where the capabilities we give out are “exactly the syscalls the process made last time it spawned”.&lt;&#x2F;p&gt;
&lt;p&gt;note how this is possible to do today, with existing technology and kernel APIs! this doesn’t require building an OS from scratch, nor rewriting all code to be in a language with tracked effects or a capability system. instead, by working at the syscall interface&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-6-1&quot;&gt;&lt;a href=&quot;#fn-6&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; between the program and the kernel, we can build a highly general system that applies to all the programs you already use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;but-why&quot;&gt;“but why?”&lt;a class=&quot;zola-anchor&quot; href=&quot;#but-why&quot; aria-label=&quot;Anchor link for: but-why&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;note that this involves 3 different levels of tracking, which we can think of in terms of progressive enhancement:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;features you can get just by recording and replaying the whole process (&quot;tracking between processes&quot;)&lt;&#x2F;li&gt;
&lt;li&gt;features you can get by replaying from a specific point in the process (&quot;tracking within a process&quot;)&lt;&#x2F;li&gt;
&lt;li&gt;features you can only get with source code changes, by allowing the process to choose where it should be restored to (&quot;tracking that needs source code changes&quot;)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;the editor example i gave at the beginning refers to 3; but you can get really quite a lot of things just with 1 (tracked record&#x2F;replay and transactional semantics). for example, here are some tools that would be easy to build on top:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;needs-tracking-between-processes&quot;&gt;needs tracking between processes&lt;a class=&quot;zola-anchor&quot; href=&quot;#needs-tracking-between-processes&quot; aria-label=&quot;Anchor link for: needs-tracking-between-processes&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;collaborative terminals, where you can “split” your terminal and hand a sandboxed environment of &lt;em&gt;your personal computer&lt;&#x2F;em&gt; to a colleague so they can help you debug an issue. this is more general than OCI containers because you don&#x27;t need to spend time creating a dockerfile that reproduces the problem. this is more general than &lt;a href=&quot;https:&#x2F;&#x2F;robert.ocallahan.org&#x2F;2017&#x2F;09&#x2F;rr-trace-portability.html&quot;&gt;&lt;code&gt;rr pack&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; because you can edit the program source to add printfs, or change the input you pass to it at runtime.&lt;&#x2F;li&gt;
&lt;li&gt;“save&#x2F;undo for your terminal”, where you don’t need to add a &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;coreutils&#x2F;manual&#x2F;html_node&#x2F;Treating-_002f-specially.html&quot;&gt;&lt;code&gt;--no-preserve-root&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; flag to &lt;code&gt;rm&lt;&#x2F;code&gt;, because the underlying filesystem can just restore a snapshot. this generalizes to any command—for example, you can build an arbitrary &lt;code&gt;git undo&lt;&#x2F;code&gt; command that works even if installed after the data is lost, which is &lt;a href=&quot;https:&#x2F;&#x2F;blog.waleedkhan.name&#x2F;git-undo&#x2F;&quot;&gt;not possible today&lt;&#x2F;a&gt;. note that this can undo by-process, not just by point-in-time, so it is strictly more general than FS snapshots.&lt;&#x2F;li&gt;
&lt;li&gt;query which files on disk were modified the last time you ran a command. for example you could ask “where did this &lt;code&gt;curl | sh&lt;&#x2F;code&gt; command install its files?”. the closest we have to this today is &lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man1&#x2F;dpkg.1.html#:~:text=listfiles&quot;&gt;&lt;code&gt;dpkg --listfiles&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which only works for changes done by the package manager.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;needs-tracking-within-a-process&quot;&gt;needs tracking within a process&lt;a class=&quot;zola-anchor&quot; href=&quot;#needs-tracking-within-a-process&quot; aria-label=&quot;Anchor link for: needs-tracking-within-a-process&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;&quot;&gt;asciinema&lt;&#x2F;a&gt;, but you actually run the process instead of building your own terminal emulator. this also lets you edit the recording live instead of having to re-record from scratch.&lt;&#x2F;li&gt;
&lt;li&gt;the &lt;a href=&quot;https:&#x2F;&#x2F;jade.fyi&#x2F;blog&#x2F;the-postmodern-build-system&#x2F;#limits-of-execve-memoization&quot;&gt;“post-modern build system”&lt;&#x2F;a&gt; (also needs a &lt;a href=&quot;https:&#x2F;&#x2F;salsa-rs.netlify.app&#x2F;&quot;&gt;salsa&lt;&#x2F;a&gt;-like &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;queries&#x2F;incremental-compilation-in-detail.html#improving-accuracy-the-red-green-algorithm&quot;&gt;red-green system&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;needs-source-code-changes&quot;&gt;needs source code changes&lt;a class=&quot;zola-anchor&quot; href=&quot;#needs-source-code-changes&quot; aria-label=&quot;Anchor link for: needs-source-code-changes&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;“save&#x2F;undo for your program”, where editors and games can take advantage of cheap snapshots to use the operating system&#x27;s restore mechanism instead of building their own.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;this is not an exhaustive list, just the first things on the top of my head after a couple days of thinking about it. what makes this orthogonal persistence system so useful is that all these tools are near-trivial to build on top: most of them could be done in shell scripts or a short python script, instead of needing a team of developers and a year.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;isn-t-this-horribly-slow&quot;&gt;isn’t this horribly slow?&lt;a class=&quot;zola-anchor&quot; href=&quot;#isn-t-this-horribly-slow&quot; aria-label=&quot;Anchor link for: isn-t-this-horribly-slow&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;not inherently. “turning your file system into a database“ is only as slow as submitting the query is&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-1&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;—and that can be quite fast when the database runs locally instead of over the network; see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spacejam&#x2F;sled?tab=readme-ov-file#performance&quot;&gt;sled&lt;&#x2F;a&gt; for an example of such a DB that has had performance tuning. rr boasts &lt;a href=&quot;https:&#x2F;&#x2F;rr-project.org&#x2F;#:~:text=slowdown&quot;&gt;less than a 20% slowdown&lt;&#x2F;a&gt;. bubblewrap uses the kernel’s native namespacing and to my knowledge imposes no overhead.&lt;&#x2F;p&gt;
&lt;p&gt;now, the final system needs to be designed with performance in mind and then carefully optimized but, you know. that&#x27;s doable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;does-this-work-across-versions-of-my-program&quot;&gt;does this work across versions of my program?&lt;a class=&quot;zola-anchor&quot; href=&quot;#does-this-work-across-versions-of-my-program&quot; aria-label=&quot;Anchor link for: does-this-work-across-versions-of-my-program&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;kinda. there are two possible ways to implement intra-process persistence (i.e. &quot;everything other than disk writes&quot;).&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;take a snapshot of the memory, registers, and kernel state (e.g. file descriptors). this is how &lt;a href=&quot;https:&#x2F;&#x2F;thume.ca&#x2F;2020&#x2F;04&#x2F;18&#x2F;telefork-forking-a-process-onto-a-different-computer&#x2F;&quot;&gt;telefork&lt;&#x2F;a&gt; works. this only works with a single version of the executable; any change, even LTO without changing source code, will break it.&lt;&#x2F;li&gt;
&lt;li&gt;replay all syscalls done by the process. this will work across versions, as long as the program makes the same syscalls in the same order.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;1 is cheap if you don&#x27;t have much memory usage compared to CPU time.
2 is cheap if you don&#x27;t have much CPU time compared to memory usage.
only 2 allows you to modify the binary between saving and restoring.
it&#x27;s possible to do both for the same process, just expensive.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;summary&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;persisting program state is hard and basically requires implementing a database&lt;&#x2F;li&gt;
&lt;li&gt;persistence that does not require action from the program is called “orthogonal persistence”&lt;&#x2F;li&gt;
&lt;li&gt;it is possible to build orthogonal persistence for individual processes with tools that exist today, with only moderate slowdowns depending on how granular you want to be&lt;&#x2F;li&gt;
&lt;li&gt;there are multiple possible ways to implement this system, with different perf&#x2F;generality tradeoffs&lt;&#x2F;li&gt;
&lt;li&gt;such a system unlocks many kinds of tools by making them orders of magnitude easier to build&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;many of the ideas in this post were developed in collaboration with edef. if you want to see them built, consider &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;edef1c&quot;&gt;sponsoring her&lt;&#x2F;a&gt; so she has time to work on them.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bibliography&quot;&gt;bibliography&lt;a class=&quot;zola-anchor&quot; href=&quot;#bibliography&quot; aria-label=&quot;Anchor link for: bibliography&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;danluu.com&#x2F;file-consistency&#x2F;&quot;&gt;Dan Luu, &quot;Files are hard&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;bincode&#x2F;latest&#x2F;bincode&#x2F;&quot;&gt;Ty Overby, Zoey Riordan, Victor Koenders, &lt;em&gt;bincode&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;archive.cs.st-andrews.ac.uk&#x2F;papers&#x2F;download&#x2F;ABC+83b.pdf&quot;&gt;Atkinson, M.P., Bailey, P.J., Chisholm, K.J., Cockshott, W.P. &amp;amp; Morrison, R. “PS-algol: A
Language for Persistent Programming”. In Proc. 10th Australian National Computer
Conference, Melbourne, Australia (1983) pp 70-79.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;calpaterson.com&#x2F;bank-python.html&quot;&gt;Cal Paterson, &quot;An oral history of Bank Python&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.devever.net&#x2F;~hl&#x2F;f&#x2F;as400guide.pdf&quot;&gt;Hugo Landau, &quot;IBM i: An Unofficial Introduction&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;protobuf.dev&#x2F;&quot;&gt;Google LLC, &quot;Protocol Buffers&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;flatbuffers.dev&#x2F;&quot;&gt;Google LLC, &quot;FlatBuffers Docs&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.infoq.com&#x2F;presentations&#x2F;Simple-Made-Easy&#x2F;&quot;&gt;Rich Hickey, &quot;Simple Made Easy&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thume.ca&#x2F;2020&#x2F;04&#x2F;18&#x2F;telefork-forking-a-process-onto-a-different-computer&#x2F;&quot;&gt;Tristan Hume, &quot;Teleforking a process onto a different computer!&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rr-project.org&#x2F;&quot;&gt;Robert O’Callahan et al., &quot;RR&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;containers&#x2F;bubblewrap&quot;&gt;Simon McVittie et al., &quot;bubblewrap&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;habitatchronicles.com&#x2F;2017&#x2F;05&#x2F;what-are-capabilities&#x2F;&quot;&gt;Chip Morningstar and F. Randall Farmer, &quot;What Are Capabilities?&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;robert.ocallahan.org&#x2F;2017&#x2F;09&#x2F;rr-trace-portability.html&quot;&gt;Robert O&#x27;Callahan, &quot;rr Trace Portability&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;coreutils&#x2F;manual&#x2F;html_node&#x2F;Treating-_002f-specially.html&quot;&gt;Free Software Foundation, Inc., &quot;GNU Coreutils&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.waleedkhan.name&#x2F;git-undo&#x2F;&quot;&gt;Waleed Khan, &quot;git undo: We can do better&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;asciinema.org&#x2F;&quot;&gt;Marcin Kulik, &quot;Record and share your terminal sessions, the simple way.&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jade.fyi&#x2F;blog&#x2F;the-postmodern-build-system&#x2F;#limits-of-execve-memoization&quot;&gt;Jade Lovelace, &quot;The postmodern build system&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;salsa-rs.netlify.app&#x2F;&quot;&gt;Salsa developrs, &quot;About salsa&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;queries&#x2F;incremental-compilation-in-detail.html#improving-accuracy-the-red-green-algorithm&quot;&gt;The Rust Project contributors, &quot;Incremental compilation in detail&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;spacejam&#x2F;sled?tab=readme-ov-file#performance&quot;&gt;Tyler Neely, &quot;sled - it&#x27;s all downhill from here!!!&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sponsors&#x2F;edef1c&quot;&gt;edef&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;current&#x2F;wal-intro.html#WAL-INTRO&quot;&gt;The PostgreSQL Global Development Group, &quot;Reliability and the Write-Ahead Log: Write-Ahead Logging (WAL)&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@yvanscher&#x2F;7-cobol-examples-with-explanations-ae1784b4d576&quot;&gt;Yvan Scher, &quot;7 cobol examples with explanations.&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cl.cam.ac.uk&#x2F;research&#x2F;security&#x2F;ctsrd&#x2F;&quot;&gt;Robert N. M. Watson et al., &quot;CTSRD – Rethinking the hardware-software interface for security&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WebAssembly Working Group, &quot;WebAssembly&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.cat-v.org&#x2F;bell_labs&#x2F;utah2000&#x2F;utah2000.html&quot;&gt;Rob Pike, &quot;Systems Software Research is Irrelevant&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man2&#x2F;ptrace.2.html&quot;&gt;System Calls Manual, &quot;ptrace(2)&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man1&#x2F;dpkg.1.html#:~:text=listfiles&quot;&gt;dpkg suite, &quot;dpkg(1)&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;MUMPS&quot;&gt;Wikipedia, &quot;MUMPS&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Persistence_(computer_science)#Orthogonal_or_transparent_persistence&quot;&gt;Wikipedia, &quot;orthogonal persistence&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;IBM_i#Technology_Independent_Machine_Interface_(TIMI)&quot;&gt;Wikipedia, &quot;IBM i&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ZFS#Snapshots_and_clones&quot;&gt;Wikipedia, &quot;ZFS&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Orthogonality#Computer_science&quot;&gt;Wikipedia, &quot;Orthogonality&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hibernation_(computing)&quot;&gt;Wikipedia, &quot;Hibernation (computing)&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Compaq_LTE#LTE_Lite&quot;&gt;Wikipedia, &quot;Compaq LTE Lite&quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-4&quot;&gt;
&lt;p&gt;the IBM i will be coming up many times in this series, particularly block terminals and the object capability model. i will glaze over parts of the system that cannot be intercepted at a syscall boundary; but that said i want to point out that &lt;a href=&quot;https:&#x2F;&#x2F;www.devever.net&#x2F;~hl&#x2F;f&#x2F;as400guide.pdf#page=13&quot;&gt;IBM POWER extensions&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;IBM_i#Technology_Independent_Machine_Interface_(TIMI)&quot;&gt;TIMI&lt;&#x2F;a&gt; correspond roughly to the modern ideas of the &lt;a href=&quot;https:&#x2F;&#x2F;www.cl.cam.ac.uk&#x2F;research&#x2F;security&#x2F;ctsrd&#x2F;&quot;&gt;CHERI&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;webassembly.org&#x2F;&quot;&gt;WASM&lt;&#x2F;a&gt; projects. &lt;a href=&quot;#fr-4-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-5&quot;&gt;
&lt;p&gt;jyn, you might ask, why are all these systems so old! why legacy systems? isn&#x27;t there any new code with these ideas? and the answer is no. &lt;a href=&quot;https:&#x2F;&#x2F;doc.cat-v.org&#x2F;bell_labs&#x2F;utah2000&#x2F;utah2000.html&quot;&gt;systems research is irrelevant&lt;&#x2F;a&gt; and its new ideas, such as they are, do not make it into industry. &lt;a href=&quot;#fr-5-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-3&quot;&gt;
&lt;p&gt;credit &lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@yvanscher&#x2F;7-cobol-examples-with-explanations-ae1784b4d576&quot;&gt;@yvanscher&lt;&#x2F;a&gt; &lt;a href=&quot;#fr-3-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-6&quot;&gt;
&lt;p&gt;on all OSes i know other than Linux, the syscall ABI is not stable and programs are expected to use libc bindings. you can do something similar by using LD_PRELOAD to intercept libc calls. &lt;a href=&quot;#fr-6-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;one might think that you have to flush each write to disk before returning from write() in order to preserve ACID semantics. not so; this is exactly the problem that a &lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;current&#x2F;wal-intro.html#WAL-INTRO&quot;&gt;write-ahead-log&lt;&#x2F;a&gt; fixes. &lt;a href=&quot;#fr-1-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>how i write blog posts</title>
        <published>2025-06-18T00:00:00+00:00</published>
        <updated>2025-06-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/how-i-write-blog-posts/"/>
        <id>https://jyn.dev/how-i-write-blog-posts/</id>
        
        <content type="html" xml:base="https://jyn.dev/how-i-write-blog-posts/">&lt;p&gt;this isn’t about about blogging engines, don’t worry. there’s already plenty of writing about those. i use zola, i am mildly dissatisfied with it, i don’t care enough to switch.&lt;&#x2F;p&gt;
&lt;p&gt;no, this is how i actually write. i have an um. &lt;em&gt;eccentric&lt;&#x2F;em&gt; setup. in particular, i can write draft posts from any of my devices—desktop, laptop, phone—and have them show up live on a hidden subdomain of jyn.dev without any special work on my part.&lt;&#x2F;p&gt;
&lt;p&gt;how does this work? i’m glad you asked.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;on my desktop, i have Caddy running a reverse proxy back to a live zola server. Caddy gives me nice things like https, and makes me less worried about having public ports on the internet.
&lt;ul&gt;
&lt;li&gt;to get live-reloading working, Caddy also reverse-proxies websockets.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;on my desktop, i have the zola content&#x2F; directory sym-linked to a subdirectory of my obsidian notes folder.&lt;&#x2F;li&gt;
&lt;li&gt;on all my devices, i run Obsidian Sync in the background, which automatically syncs my posts everywhere. it costs $5&#x2F;month and doesn’t cause me trouble, which is a lot more than i can say for most technology.&lt;&#x2F;li&gt;
&lt;li&gt;on laptop and mobile, i just write in obsidian, like i would for any other notes. i have a &quot;blog post&quot; template that inserts the zola header; otherwise i just write normal markdown.&lt;&#x2F;li&gt;
&lt;li&gt;when i’m ready to publish, i commit the changes to git on desktop or laptop and push to github, which updates the public facing blog.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;works great!&lt;&#x2F;p&gt;
&lt;p&gt;normally i write outlines and ideas down on mobile, and then clean them up into prose on desktop. when i edit on desktop, i sometimes use nvim (e.g. for posts like &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;how-i-use-my-terminal&#x2F;&quot;&gt;how i use my terminal&lt;&#x2F;a&gt; that have complicated html fragments). unlike obsidian, nvim doesn&#x27;t have autosave, so i &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;dotfiles&#x2F;blob&#x2F;45f6702de2608a972615cd877993a41521f76348&#x2F;config&#x2F;nvim.lua#L242-L268&quot;&gt;added it myself&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; class=&quot;language-lua z-code&quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-comment z-line z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-lua&quot;&gt;--&lt;&#x2F;span&gt; autosave on cursor hold
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-lua&quot;&gt;local&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;timers&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-lua&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-lua&quot;&gt;function&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-name z-function&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-lua&quot;&gt;autosave_enable&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-lua&quot;&gt;local&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;buf&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-lua&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;api&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;nvim_get_current_buf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-conditional z-lua&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;timers&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-lua&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-lua&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-keyword z-control z-conditional z-lua&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-return z-lua&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-end z-lua&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;  &lt;span class=&quot;z-storage z-modifier z-lua&quot;&gt;local&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;buf_name&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-lua&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;expand&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;%&lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;  &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;notify&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;autosaving &lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-concatenation z-lua&quot;&gt;..&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;buf_name&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;  &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;timers&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-lua&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-lua&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-lua&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;api&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;nvim_create_autocmd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;CursorHold&lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-lua&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-key z-lua&quot;&gt;desc&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Save &lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-concatenation z-lua&quot;&gt;..&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;buf_name&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-concatenation z-lua&quot;&gt;..&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt; on change&lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-field z-lua&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-lua&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-lua&quot;&gt;callback&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt; &lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-lua&quot;&gt;function&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;api&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;nvim_buf_call&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;buf&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-lua&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;      &lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-lua&quot;&gt;function&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;silent update&lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-end z-lua&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-end z-lua&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function z-lua&quot;&gt;&lt;span class=&quot;z-meta z-block z-lua&quot;&gt;&lt;span class=&quot;z-keyword z-control z-end z-lua&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-variable z-other z-lua&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;api&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-lua&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-property z-lua&quot;&gt;&lt;span class=&quot;z-variable z-function z-lua&quot;&gt;nvim_create_user_command&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-lua&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;AutoSave&lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-lua&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-lua&quot;&gt;autosave_enable&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-lua&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-lua&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-lua&quot;&gt;&lt;span class=&quot;z-meta z-group z-lua&quot;&gt;	&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-lua&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-key z-lua&quot;&gt;&lt;span class=&quot;z-string z-unquoted z-key z-lua&quot;&gt;desc&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-key-value z-lua&quot;&gt;=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-value z-lua&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Start saving each second on change&lt;span class=&quot;z-punctuation z-definition z-string z-end z-lua&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-mapping z-lua&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-lua&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-lua&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the Caddyfile is also quite simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;Caddyfile&quot; class=&quot;language-Caddyfile z-code&quot;&gt;&lt;code class=&quot;language-Caddyfile&quot; data-lang=&quot;Caddyfile&quot;&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;&lt;span class=&quot;z-variable z-other z-Caddyfile&quot;&gt;subdomain.jyn.dev&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-bracket z-Caddyfile&quot;&gt; {&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;        &lt;span class=&quot;z-comment z-line z-Caddyfile&quot;&gt;# start with `zola serve --drafts --base-url &#x2F;`&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;        &lt;span class=&quot;z-support z-function z-Caddyfile&quot;&gt;reverse_proxy&lt;&#x2F;span&gt; localhost:1111&lt;span class=&quot;z-punctuation z-definition z-bracket z-Caddyfile&quot;&gt; {&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;                &lt;span class=&quot;z-keyword z-other z-Caddyfile&quot;&gt;fail_duration&lt;&#x2F;span&gt; 10s
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-bracket z-Caddyfile&quot;&gt;        }&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;        &lt;span class=&quot;z-support z-function z-Caddyfile&quot;&gt;handle_errors&lt;&#x2F;span&gt; 502 503&lt;span class=&quot;z-punctuation z-definition z-bracket z-Caddyfile&quot;&gt; {&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;                &lt;span class=&quot;z-keyword z-other z-Caddyfile&quot;&gt;header&lt;&#x2F;span&gt; Content-Type text&#x2F;html
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;                &lt;span class=&quot;z-keyword z-other z-Caddyfile&quot;&gt;respond&lt;&#x2F;span&gt; 503&lt;span class=&quot;z-punctuation z-definition z-bracket z-Caddyfile&quot;&gt; {&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;                        &lt;span class=&quot;z-keyword z-other z-Caddyfile&quot;&gt;body&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-Caddyfile&quot;&gt;&amp;quot;&amp;lt;!doctype html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;subdomain.jyn.dev is down right n
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-Caddyfile&quot;&gt;ow; DM jyn to bring it back up. or just visit &amp;lt;a href=&amp;#39;https:&#x2F;&#x2F;jyn.dev&amp;#39;&amp;gt;jyn.dev&amp;lt;&#x2F;a&amp;gt;.&amp;lt;&#x2F;b
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-Caddyfile&quot;&gt;ody&amp;gt;&amp;lt;&#x2F;html&amp;gt;&amp;quot;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-bracket z-Caddyfile&quot;&gt;                }&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-bracket z-Caddyfile&quot;&gt;        }&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-bracket z-Caddyfile&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;&lt;span class=&quot;z-comment z-line z-Caddyfile&quot;&gt;# websocket proxy&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;&lt;span class=&quot;z-variable z-other z-Caddyfile&quot;&gt;subdomain.jyn.dev:1025&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-bracket z-Caddyfile&quot;&gt; {&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;        &lt;span class=&quot;z-support z-function z-Caddyfile&quot;&gt;reverse_proxy&lt;&#x2F;span&gt; localhost:1024 {}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-Caddyfile&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-bracket z-Caddyfile&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the one downside of this is that i get very little visibility on mobile onto why things are not syncing to the desktop. to make up for this, my phone and desktop are on the same &lt;a href=&quot;https:&#x2F;&#x2F;tailscale.com&#x2F;kb&#x2F;1151&#x2F;what-is-tailscale&quot;&gt;tailnet&lt;&#x2F;a&gt;, which allows me to ssh in remotely to check up on the zola server (i’ve never had to check up on the Caddy server). i like &lt;a href=&quot;https:&#x2F;&#x2F;termius.com&#x2F;&quot;&gt;Termius&lt;&#x2F;a&gt; for this.&lt;&#x2F;p&gt;
&lt;p&gt;note some things about this setup:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;i have live reloading all the way through, regardless of the editor or device i am using to edit the post.&lt;&#x2F;li&gt;
&lt;li&gt;because it&#x27;s just a public url, it&#x27;s very easy to share with my friends and ask for feedback on early posts, without making the posts visible to random people on hacker news.&lt;&#x2F;li&gt;
&lt;li&gt;if i ever want to take down the site, i just kill the zola server. it defaults to off when i start my computer.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>how i use my terminal</title>
        <published>2025-06-16T00:00:00+00:00</published>
        <updated>2025-06-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/how-i-use-my-terminal/"/>
        <id>https://jyn.dev/how-i-use-my-terminal/</id>
        
        <content type="html" xml:base="https://jyn.dev/how-i-use-my-terminal/">&lt;p&gt;this is a whole blog post because it is &quot;outside the overton window&quot;; it usually takes at least a video before people even understand the thing i am trying to describe. so, here&#x27;s the video:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;video controls&gt;&lt;source src=&quot;&#x2F;assets&#x2F;terminal-recording.mp4&quot;&gt;&lt;&#x2F;video&gt;&lt;&#x2F;p&gt;
&lt;p&gt;the steps here that tend to surprise people are &lt;button class=timestamp&gt;0:11&lt;&#x2F;button&gt;
, &lt;button class=timestamp&gt;0:21&lt;&#x2F;button&gt;
, and &lt;button class=timestamp&gt;0:41&lt;&#x2F;button&gt;
. when i say &quot;surprise&quot; i don&#x27;t just mean that people are surprised that i&#x27;ve set this up, but they are surprised this is possible at all.&lt;&#x2F;p&gt;
&lt;p&gt;here&#x27;s what happens in that video:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:00&lt;&#x2F;button&gt;
 I start with Windows Terminal open on my laptop.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:02&lt;&#x2F;button&gt;
 I hit &lt;kbd&gt;ctrl + shift + 5&lt;&#x2F;kbd&gt;, which opens a new terminal tab which &lt;code&gt;ssh&lt;&#x2F;code&gt;&#x27;s to my home desktop and immediately launches tmux.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:03&lt;&#x2F;button&gt;
 tmux launches my default shell, &lt;code&gt;zsh&lt;&#x2F;code&gt;. zsh shows a prompt, while loading the full config asynchronously&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:08&lt;&#x2F;button&gt;
 i use &lt;code&gt;zoxide&lt;&#x2F;code&gt; to fuzzy find a recent directory&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:09&lt;&#x2F;button&gt;
 i start typing a ripgrep command. zsh autofills the command since i&#x27;ve typed it before and i accept it with &lt;kbd&gt;ctrl + f&lt;&#x2F;kbd&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:11&lt;&#x2F;button&gt;
 i hit &lt;kbd&gt;ctrl + k&lt;&#x2F;kbd&gt;&lt;kbd&gt;f&lt;&#x2F;kbd&gt;, which tells tmux to search all output in the scrollback for filenames. the filenames are highlighted in blue.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:12&lt;&#x2F;button&gt;
 i hold &lt;kbd&gt;n&lt;&#x2F;kbd&gt; to navigate through the files. there are a lot of them, so it takes me a bit to find the one i&#x27;m looking for.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:21&lt;&#x2F;button&gt;
 i press &lt;kbd&gt;o&lt;&#x2F;kbd&gt; to open the selected file in my default application (&lt;code&gt;nvim&lt;&#x2F;code&gt;). tmux launches it in a new pane. note that this is still running &lt;em&gt;on the remote server&lt;&#x2F;em&gt;; it is opening a remote file in a remote tmux pane. i do not need to have this codebase cloned locally on my laptop.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:26&lt;&#x2F;button&gt;
 i try to navigate to several references using rust-analyzer, which fails because RA doesn&#x27;t understand the macros in this file. at &lt;button class=timestamp&gt;0:32&lt;&#x2F;button&gt;
 i finally find one which works and navigate to it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:38&lt;&#x2F;button&gt;
 i hit &lt;kbd&gt;ctrl + k&lt;&#x2F;kbd&gt;&lt;kbd&gt;h&lt;&#x2F;kbd&gt;, which tells tmux to switch focus back to the left pane.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:39&lt;&#x2F;button&gt;
 i hit &lt;kbd&gt;n&lt;&#x2F;kbd&gt; again. the pane is still in &quot;copy-mode&quot;, so all the files from before are still the focus of the search. they are highlighted again and tmux selects the next file in search order.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:41&lt;&#x2F;button&gt;
 i hit &lt;kbd&gt;o&lt;&#x2F;kbd&gt;, which opens a different file than before, but in the &lt;em&gt;same&lt;&#x2F;em&gt; instance of &lt;code&gt;nvim&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;button class=timestamp&gt;0:43&lt;&#x2F;button&gt;
 i hit &lt;kbd&gt;&lt;&#x2F;kbd&gt;&lt;kbd&gt;b&lt;&#x2F;kbd&gt;, which shows my open file buffers. in particular, this shows that the earlier file is still open. i switch back and forth between the two files a couple times before ending the stream.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;but-why&quot;&gt;but why??&lt;a class=&quot;zola-anchor&quot; href=&quot;#but-why&quot; aria-label=&quot;Anchor link for: but-why&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;i got annoyed at VSCode a while back for being laggy, especially when the vim plugin was running, and at having lots of keybind conflicts between the editor, vim plugin, terminal, and window management. i tried zed but at the time it was quite immature (and still had the problem of lots of keybind conflicts).&lt;&#x2F;p&gt;
&lt;p&gt;i switched to using nvim in the terminal, but quickly got annoyed at how much time i spent copy-pasting filenames into the editor; in particular i would often copy-paste files with columns from ripgrep, get a syntax error, and then have to edit them before actually opening the file. this was quite annoying. what i wanted was an equivalent of ctrl-click in vscode, where i could take an arbitrary file path and have it open as smoothly as i could navigate to it. so, i started using tmux and built it myself.&lt;&#x2F;p&gt;
&lt;p&gt;people sometimes ask me why i use tmux. this is why! this is the whole reason! (well, this and session persistence.) terminals are stupidly powerful and most of them expose almost none of it to you as the user. i like tmux, despite its age, bugs, and antiquated syntax, because it&#x27;s very extensible in this way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;how it works&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-it-works&quot; aria-label=&quot;Anchor link for: how-it-works&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;search-all-scrollback-for-filenames&quot;&gt;search all scrollback for filenames&lt;a class=&quot;zola-anchor&quot; href=&quot;#search-all-scrollback-for-filenames&quot; aria-label=&quot;Anchor link for: search-all-scrollback-for-filenames&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;this is done purely with tmux config:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tmux&quot; class=&quot;language-tmux z-code&quot;&gt;&lt;code class=&quot;language-tmux&quot; data-lang=&quot;tmux&quot;&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-tmux&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-tmux&quot;&gt;#&lt;&#x2F;span&gt; i am so sorry
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-tmux&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-tmux&quot;&gt;#&lt;&#x2F;span&gt; see `search-regex.sh` for wtf this means
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-tmux&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-tmux&quot;&gt;#&lt;&#x2F;span&gt; TODO: include shell variable names
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;&lt;span class=&quot;z-support z-function z-tmux&quot;&gt;bind-key&lt;&#x2F;span&gt; f &lt;span class=&quot;z-support z-function z-tmux&quot;&gt;copy-mode&lt;&#x2F;span&gt; \; &lt;span class=&quot;z-support z-function z-tmux&quot;&gt;send-keys&lt;&#x2F;span&gt; -X search-backward \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;  &lt;span class=&quot;z-string z-quoted z-single z-tmux&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-tmux&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;(^|&#x2F;|&lt;span class=&quot;z-constant z-character z-escape z-tmux&quot;&gt;\&amp;lt;&lt;&#x2F;span&gt;|[[:space:]&amp;quot;])((&lt;span class=&quot;z-constant z-character z-escape z-tmux&quot;&gt;\.&lt;&#x2F;span&gt;|&lt;span class=&quot;z-constant z-character z-escape z-tmux&quot;&gt;\.&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-tmux&quot;&gt;\.&lt;&#x2F;span&gt;)|[[:alnum:]~_&amp;quot;-]*)((&#x2F;[][[:alnum:]_.#$%&amp;amp;+=@&amp;quot;-]+)+([&#x2F; &amp;quot;]|&lt;span class=&quot;z-constant z-character z-escape z-tmux&quot;&gt;\.&lt;&#x2F;span&gt;([][[:alnum:]_.#$%&amp;amp;+=@&amp;quot;-]+(:[0-9]+)?(:[0-9]+)?)|[][[:alnum:]_.#$%&amp;amp;+=@&amp;quot;-]+(:[0-9]+)(:[0-9]+)?)|(&#x2F;[][[:alnum:]_.#$%&amp;amp;+=@&amp;quot;-]+){2,}([&#x2F; &amp;quot;]|&lt;span class=&quot;z-constant z-character z-escape z-tmux&quot;&gt;\.&lt;&#x2F;span&gt;([][[:alnum:]_.#$%&amp;amp;+=@&amp;quot;-]+(:[0-9]+)?(:[0-9]+)?)|[][[:alnum:]_.#$%&amp;amp;+=@&amp;quot;-]+(:[0-9]+)(:[0-9]+)?)?|(&lt;span class=&quot;z-constant z-character z-escape z-tmux&quot;&gt;\.&lt;&#x2F;span&gt;|&lt;span class=&quot;z-constant z-character z-escape z-tmux&quot;&gt;\.&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-tmux&quot;&gt;\.&lt;&#x2F;span&gt;)&#x2F;([][[:alnum:]_.#$%&amp;amp;+=@&amp;quot;-]+(:[0-9]+)?(:[0-9]+)?))&lt;span class=&quot;z-punctuation z-definition z-string z-end z-tmux&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and this is the contents of &lt;code&gt;search-regex.sh&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;start_delim&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;(^|&#x2F;|\&amp;lt;|[[:space:]&amp;quot;])&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;relative_path&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;(\.|\.\.)&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;start_path&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;(&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;relative_path&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;|[[:alnum:]~_&lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;-]*)&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;component&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;[][[:alnum:]_.#$%&amp;amp;+=@&amp;quot;-]&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;intermediate_paths&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;(&#x2F;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;component&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;+)&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;line_no&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;(:[0-9]+)&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;file_end&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;(&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;component&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;+&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;line_no&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;?&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;line_no&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;?)&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;end&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;([&#x2F; &lt;span class=&quot;z-constant z-character z-escape z-shell&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;]|\.&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;file_end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;|&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;component&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;+&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;line_no&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;line_no&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;?)&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-echo z-shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;start_delim&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;start_path&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;(&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;intermediate_paths&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;+&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;|&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;intermediate_paths&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;{2,}&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;?|&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;relative_path&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;file_end&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;)&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; test cases omitted for brevity&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;i will not go through the whole regex, but uh. there you go. i spent more time on this than i probably should have.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;open-selected-file-in-a-new-pane-running-nvim&quot;&gt;open selected file in a new pane running nvim&lt;a class=&quot;zola-anchor&quot; href=&quot;#open-selected-file-in-a-new-pane-running-nvim&quot; aria-label=&quot;Anchor link for: open-selected-file-in-a-new-pane-running-nvim&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;this is actually a trick; there are many steps here.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;open-selected-file-in-default-application&quot;&gt;open selected file in default application&lt;a class=&quot;zola-anchor&quot; href=&quot;#open-selected-file-in-default-application&quot; aria-label=&quot;Anchor link for: open-selected-file-in-default-application&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;this part is not so bad. tmux again.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tmux&quot; class=&quot;language-tmux z-code&quot;&gt;&lt;code class=&quot;language-tmux&quot; data-lang=&quot;tmux&quot;&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-tmux&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-tmux&quot;&gt;#&lt;&#x2F;span&gt; `cd` is important in case this is a relative path. `echo | bash` is to perform tilde expansion.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;&lt;span class=&quot;z-support z-function z-tmux&quot;&gt;bind-key&lt;&#x2F;span&gt; -T &lt;span class=&quot;z-support z-function z-tmux&quot;&gt;copy-mode&lt;&#x2F;span&gt;-vi o  &lt;span class=&quot;z-support z-function z-tmux&quot;&gt;send-keys&lt;&#x2F;span&gt; -X copy-pipe \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;    &lt;span class=&quot;z-string z-quoted z-single z-tmux&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-tmux&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;cd #{pane_current_path}; xargs -I {} echo &amp;quot;echo {}&amp;quot; | bash | xargs open&lt;span class=&quot;z-punctuation z-definition z-string z-end z-tmux&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; \; \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;  if -F &lt;span class=&quot;z-string z-quoted z-double z-tmux&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-tmux&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;#{alternate_on}&lt;span class=&quot;z-punctuation z-definition z-string z-end z-tmux&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; { &lt;span class=&quot;z-support z-function z-tmux&quot;&gt;send-keys&lt;&#x2F;span&gt; -X cancel }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;i also have a version that always opens an editor in the current pane, instead of launching in the default application. for example i use &lt;a href=&quot;https:&#x2F;&#x2F;fx.wtf&#x2F;&quot;&gt;&lt;code&gt;fx&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; by default to view json files, but &lt;code&gt;nvim&lt;&#x2F;code&gt; to edit them.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tmux&quot; class=&quot;language-tmux z-code&quot;&gt;&lt;code class=&quot;language-tmux&quot; data-lang=&quot;tmux&quot;&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-tmux&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-tmux&quot;&gt;#&lt;&#x2F;span&gt; save the buffer, then open an editor in the current pane
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;&lt;span class=&quot;z-support z-function z-tmux&quot;&gt;bind-key&lt;&#x2F;span&gt; -T &lt;span class=&quot;z-support z-function z-tmux&quot;&gt;copy-mode&lt;&#x2F;span&gt;-vi O &lt;span class=&quot;z-support z-function z-tmux&quot;&gt;send-keys&lt;&#x2F;span&gt; -X copy-pipe-and-cancel \
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-tmux&quot;&gt;    &lt;span class=&quot;z-string z-quoted z-single z-tmux&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-tmux&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;tmux send-keys &amp;quot;C-q&amp;quot;; xargs -I {} tmux send-keys &amp;quot;${EDITOR:-vi} {}&amp;quot;; tmux send-keys &amp;quot;C-m&amp;quot;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-tmux&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;open-a-new-pane-running-nvim&quot;&gt;open a new pane running nvim&lt;a class=&quot;zola-anchor&quot; href=&quot;#open-a-new-pane-running-nvim&quot; aria-label=&quot;Anchor link for: open-a-new-pane-running-nvim&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;here is the trick. i have created &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;bin&#x2F;hx-hax&quot;&gt;a shell script&lt;&#x2F;a&gt; (actually a perl script) that is the default application for all text files.&lt;&#x2F;p&gt;
&lt;div class=note-container&gt;&lt;div class=note-content&gt;
&lt;p&gt;setting up that many file associations by hand is a pain. i will write a separate blog post about the scripts that install my dotfiles onto a system. i don&#x27;t use Nix partly because all my friends who use Nix have &lt;em&gt;even weirder&lt;&#x2F;em&gt; bugs than they already had, and partly because i don&#x27;t like the philosophy of not being able to install things at runtime. i want to install things at runtime and &lt;em&gt;track&lt;&#x2F;em&gt; that i did so. that&#x27;s a separate post too.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;the relevant part is this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;perl&quot; class=&quot;language-perl z-code&quot;&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-meta z-comment z-perl&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-perl&quot;&gt;#&lt;&#x2F;span&gt; don&amp;#39;t use `` so that args can have embedded pipes
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-storage z-type z-variable z-perl&quot;&gt;my&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;@&lt;&#x2F;span&gt;split&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-perl&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-section z-group z-begin z-perl&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;tmux&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-perl&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;split-window&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-perl&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;-h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-perl&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;-P&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-perl&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;-F&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-perl&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&amp;quot;#{pane_id}&amp;quot;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-perl&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;editor&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-perl&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;@&lt;&#x2F;span&gt;args&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-perl&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-perl&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-perl&quot;&gt;&lt;span class=&quot;z-support z-function z-perl&quot;&gt;open&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-perl&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-variable z-perl&quot;&gt;my&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;fd&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-perl&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;-|&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-perl&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;@&lt;&#x2F;span&gt;split&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-perl&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-perl&quot;&gt;||&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-die z-perl&quot;&gt;die&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;can&amp;#39;t open pipeline: &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-perl&quot;&gt;&lt;span class=&quot;z-variable z-language z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;!&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-perl&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;this bounces &lt;em&gt;back&lt;&#x2F;em&gt; to tmux. in particular, this is being very dumb and assuming that tmux is running on the machine where the file is, which happens to be the case here. this is not too bad to ensure - i just use a separate terminal &lt;em&gt;emulator&lt;&#x2F;em&gt; tab for each instance of tmux i care about; for example i will often have open one Windows Terminal tab for WSL on my local laptop, one for my desktop, and one for a remote work machine via a VPN.&lt;&#x2F;p&gt;
&lt;div class=note-container&gt;&lt;div class=note-content&gt;
&lt;p&gt;there&#x27;s actually even more going on here—for example i am translating the &lt;code&gt;file:line:column&lt;&#x2F;code&gt; syntax to something vim understands, and overriding &lt;code&gt;xdg-open&lt;&#x2F;code&gt; so that it doesn&#x27;t error out on the &lt;code&gt;:line&lt;&#x2F;code&gt;—but for the most part it&#x27;s straightforward and not that interesting.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;open-a-file-in-a-running-instance-of-nvim&quot;&gt;open a file in a running instance of nvim&lt;a class=&quot;zola-anchor&quot; href=&quot;#open-a-file-in-a-running-instance-of-nvim&quot; aria-label=&quot;Anchor link for: open-a-file-in-a-running-instance-of-nvim&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;this is a perl script that scripts tmux to send keys to a running instance of nvim (actually the same perl script as before, so that both of these can be bound to the same keybind regardless of whether nvim is already open or not):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;perl&quot; class=&quot;language-perl z-code&quot;&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-storage z-type z-variable z-perl&quot;&gt;my&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;current_window&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-perl&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-perl&quot;&gt;&lt;span class=&quot;z-variable z-function z-perl&quot;&gt;trim&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;`&lt;&#x2F;span&gt;tmux display-message -p &amp;quot;#{window_id}&amp;quot;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-perl&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-storage z-type z-variable z-perl&quot;&gt;my&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;pane&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-perl&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-perl&quot;&gt;&lt;span class=&quot;z-variable z-function z-perl&quot;&gt;trim&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;`&lt;&#x2F;span&gt;tmux list-panes -a &lt;span class=&quot;z-constant z-character z-escape z-perl&quot;&gt;\\&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt;  -f &amp;#39;#{&amp;amp;&amp;amp;:#{==:#{window_id},&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-perl&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;current_window&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt;},#{==:#{pane_current_command},&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-perl&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;editor&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt;}}&amp;#39; &lt;span class=&quot;z-constant z-character z-escape z-perl&quot;&gt;\\&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt;  -F &amp;#39;#{pane_id}&amp;#39;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-perl&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-meta z-comment z-perl&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-perl&quot;&gt;#&lt;&#x2F;span&gt; ...
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-meta z-comment z-perl&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-perl&quot;&gt;#&lt;&#x2F;span&gt; exit copy mode so we don&amp;#39;t send these commands directly to tmux
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;`&lt;&#x2F;span&gt;tmux send-keys -t &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-perl&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;pane&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt; -X cancel 2&amp;gt;&#x2F;dev&#x2F;null&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-perl&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-meta z-comment z-perl&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-perl&quot;&gt;#&lt;&#x2F;span&gt; Escape for some reason doesn&amp;#39;t get sent as the escape key if it shows up next to any other keys???
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;`&lt;&#x2F;span&gt;tmux send-keys -t &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-perl&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;pane&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt; Escape&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-perl&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-storage z-type z-variable z-perl&quot;&gt;my&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;args&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-perl&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-perl&quot;&gt;&lt;span class=&quot;z-support z-function z-perl&quot;&gt;join&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-perl&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;@&lt;&#x2F;span&gt;args&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-perl&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-storage z-type z-variable z-perl&quot;&gt;my&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;cmd&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-perl&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;editor&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-perl&quot;&gt;eq&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;nvim&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-perl&quot;&gt;?&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;drop&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-perl&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;open&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-perl&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;`&lt;&#x2F;span&gt;tmux send-keys -t &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-perl&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;pane&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt; &amp;quot;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-perl&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;cmd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-perl&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;args&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt;&amp;quot; Enter&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-perl&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-perl&quot;&gt;&lt;span class=&quot;z-meta z-string z-perl&quot;&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-perl&quot;&gt;`&lt;&#x2F;span&gt;tmux select-pane -t &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-interpolation z-perl&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-perl&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-perl&quot;&gt;$&lt;&#x2F;span&gt;pane&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-backtick z-perl&quot;&gt; -Z&lt;span class=&quot;z-punctuation z-definition z-string z-end z-perl&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-perl&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;consequences-of-this-setup&quot;&gt;consequences of this setup&lt;a class=&quot;zola-anchor&quot; href=&quot;#consequences-of-this-setup&quot; aria-label=&quot;Anchor link for: consequences-of-this-setup&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;i don&#x27;t need a fancy terminal locally; something with nice fonts is enough. all the fancy things are done through tmux, which is good because it means they work on Windows too without needing to install a separate terminal.&lt;&#x2F;li&gt;
&lt;li&gt;the editor thing works even if the editor doesn&#x27;t support remote scripting. nvim &lt;em&gt;does&lt;&#x2F;em&gt; support RPC, but this setup also worked back when i used &lt;code&gt;helix&lt;&#x2F;code&gt; and &lt;code&gt;kakoune&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;i &lt;em&gt;could&lt;&#x2F;em&gt; have written this such that the fancy terminal emulator scripts were in my editor, not in tmux (e.g. &lt;code&gt;:terminal&lt;&#x2F;code&gt; in nvim). but again this locks me into the editor; and the built-in terminals in editors are usually not very good.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ok-but-do-you-really-want-to-use-tmux&quot;&gt;ok, but do you really want to use tmux&lt;a class=&quot;zola-anchor&quot; href=&quot;#ok-but-do-you-really-want-to-use-tmux&quot; aria-label=&quot;Anchor link for: ok-but-do-you-really-want-to-use-tmux&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;well. well. now that you mention it. the last thing keeping me on tmux was session persistence and &lt;a href=&quot;https:&#x2F;&#x2F;ansuz.sooke.bc.ca&#x2F;entry&#x2F;389&quot;&gt;Ansuz has just released a standalone tool that does persistence and nothing else&lt;&#x2F;a&gt;. so. i plan to switch to &lt;a href=&quot;https:&#x2F;&#x2F;sw.kovidgoyal.net&#x2F;kitty&#x2F;&quot;&gt;kitty&lt;&#x2F;a&gt; in the near future, which lets me keep all these scripts and does not require shoving a whole second terminal emulator inside my terminal emulator, which hopefully will reduce the number of weird mysterious bugs i encounter on a regular basis.&lt;&#x2F;p&gt;
&lt;p&gt;the reason i picked kitty over &lt;a href=&quot;https:&#x2F;&#x2F;wezterm.org&#x2F;&quot;&gt;wezterm&lt;&#x2F;a&gt; is that ssh integration works by integrating with the shell, not by launching a server process, so it doesn&#x27;t need to be installed on the remote. this mattered less for tmux because tmux is everywhere, but hardly anywhere has wezterm installed by default.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;was-it-worth-it&quot;&gt;... was it worth it?&lt;a class=&quot;zola-anchor&quot; href=&quot;#was-it-worth-it&quot; aria-label=&quot;Anchor link for: was-it-worth-it&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;honestly, yeah. i spend quite a lot less time fighting my editor these days.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;it&#x27;s &lt;em&gt;much&lt;&#x2F;em&gt; easier to debug when something goes wrong (vscode&#x27;s debugging tools are mostly for plugin extension authors and running them is non-trivial). with vim plugins i can just add &lt;code&gt;print&lt;&#x2F;code&gt; statements to the lua source and see what&#x27;s happening.&lt;&#x2F;li&gt;
&lt;li&gt;all my keybinds make sense to me!&lt;&#x2F;li&gt;
&lt;li&gt;my editor is less laggy.&lt;&#x2F;li&gt;
&lt;li&gt;my terminal is much easier to script through tmux than through writing a VSCode plugin, which usually involves setting up a whole typescript toolchain and context-switching into a new project&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;that said, i cannot in good conscience recommend this to anyone else. all my scripts are fragile and will probably break if you look at them wrong, which is not ideal if you haven&#x27;t written them yourself and don&#x27;t know where to start debugging them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ok-but-this-looks-nice-i-want-this&quot;&gt;ok but this looks nice i want this&lt;a class=&quot;zola-anchor&quot; href=&quot;#ok-but-this-looks-nice-i-want-this&quot; aria-label=&quot;Anchor link for: ok-but-this-looks-nice-i-want-this&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;if you do want something similar without writing your own tools, i can recommend:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;fishshell.com&#x2F;&quot;&gt;fish&lt;&#x2F;a&gt; + &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ajeetdsouza&#x2F;zoxide&#x2F;&quot;&gt;zoxide&lt;&#x2F;a&gt; + &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;junegunn&#x2F;fzf&quot;&gt;fzf&lt;&#x2F;a&gt;. that gets you steps 4, 5, and kinda sorta-ish 6.&lt;&#x2F;li&gt;
&lt;li&gt;&quot;builtin functionality in your editor&quot; - fuzzy find, full text search, tabs and windows, and &quot;open recent file&quot; are all commonly supported.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;git.causal.agency&#x2F;src&#x2F;tree&#x2F;bin&#x2F;qf.c&quot;&gt;qf&lt;&#x2F;a&gt;, which gets you the &quot;select files in terminal output&quot; part of 6, kinda. you have to remember to pipe your output to it though, so it doesn&#x27;t work after the fact and it doesn&#x27;t work if your tool is interactive. note that it hard-codes a vi-like CLI (&lt;code&gt;vi +line file.ext&lt;&#x2F;code&gt;), so you may need to fork it or still add a script that takes the place of $EDITOR. see &lt;a href=&quot;https:&#x2F;&#x2F;jvns.ca&#x2F;blog&#x2F;2025&#x2F;06&#x2F;10&#x2F;how-to-compile-a-c-program&#x2F;&quot;&gt;julia evans&#x27; most recent post&lt;&#x2F;a&gt; for more info.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kilobyte&#x2F;e&quot;&gt;e&lt;&#x2F;a&gt;, which gets you the &quot;translate &lt;code&gt;file:line&lt;&#x2F;code&gt; into something your editor recognizes&quot; part of 8, kinda. i had never heard of this tool until i wrote my own with literally the exactly the same name that did literally exactly the same thing, forgot to put it in PATH, and got a suggestion from &lt;code&gt;command-not-found&lt;&#x2F;code&gt; asking if i wanted to install it, lol.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;vim --remote filename&lt;&#x2F;code&gt; or &lt;code&gt;code filename&lt;&#x2F;code&gt; or &lt;code&gt;emacsclient filename&lt;&#x2F;code&gt;, all of which get you 12, kinda. the problem with this is that they don&#x27;t all support &lt;code&gt;file:line&lt;&#x2F;code&gt;, and it means you have to modify this whenever you switch editors. admittedly most people don&#x27;t switch editors that often, lol.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-have-we-learned&quot;&gt;what have we learned?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-have-we-learned&quot; aria-label=&quot;Anchor link for: what-have-we-learned&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;terminals are a lot more powerful than people think! by using terminals that let you script them, you can do quite a lot of things.&lt;&#x2F;li&gt;
&lt;li&gt;you can kinda sorta replicate most of these features without scripting your terminal, as long as you don&#x27;t mind tying yourself to an editor.&lt;&#x2F;li&gt;
&lt;li&gt;doing this requires quite a lot of work, because no one who builds these tools thought of these features ahead of time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;hopefully this was interesting! i am always curious what tools people use and how - feel free to &lt;a href=&quot;mailto:blog@jyn.dev&quot;&gt;email me&lt;&#x2F;a&gt; about your own setup :)&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>theory building without a mentor</title>
        <published>2025-05-24T00:00:00+00:00</published>
        <updated>2025-05-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/theory-building-without-a-mentor/"/>
        <id>https://jyn.dev/theory-building-without-a-mentor/</id>
        
        <content type="html" xml:base="https://jyn.dev/theory-building-without-a-mentor/">&lt;p&gt;&lt;strong&gt;NOTE: if you are just here for the how-to guide, &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;theory-building-without-a-mentor&#x2F;#recreating-a-theory&quot;&gt;click here&lt;&#x2F;a&gt; to skip the philosophizing.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;theory-building&quot;&gt;theory building&lt;a class=&quot;zola-anchor&quot; href=&quot;#theory-building&quot; aria-label=&quot;Anchor link for: theory-building&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Peter Naur wrote a famous article in 1985 called &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;onlurking&#x2F;fc5c81d18cfce9ff81bc968a7f342fb1&quot;&gt;Programming as Theory Building&lt;&#x2F;a&gt;. it has some excellent ideas, such as:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;programming must be the programmers’ building up knowledge of a certain kind, knowledge taken to be basically the programmers’ immediate possession, any documentation being an auxiliary product.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;solutions suggested by group B [who did not possess a theory of the program] […] effectively destroyed its power and simplicity. The members of group A [who did possess a theory] were able to spot these cases instantly and could propose simple and effective solutions, framed entirely within the existing structure.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;the program text and its documentation proved insufficient as a carrier of the most important design ideas&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;i think this article is excellent, and highly recommend reading it in full. however, i want to discuss one particular idea Naur mentions:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;For a new programmer to come to possess an existing theory of a program it is insufficient that he or she has the opportunity to become familiar with the program text and other documentation. What is required is that the new programmer has the opportunity to work in close contact with the programmers who already possess the theory [...] program revival, that is reestablishing the theory of a program merely from the documentation, is strictly impossible.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;i do not think it is true that it is impossible to recover a theory of the program merely from the code and docs. my day job, and indeed one of my most prized skills when i interview for jobs, is creating a theory of programs from their text and documentation alone. this blog post is about how i do that, and how you can too.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;theory-modification&quot;&gt;theory modification&lt;a class=&quot;zola-anchor&quot; href=&quot;#theory-modification&quot; aria-label=&quot;Anchor link for: theory-modification&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Naur also says in the article:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“in a certain sense there can be no question of theory modification, only program modification”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;i think this is wrong: theory modification is exactly what Ward Cunningham describes as &quot;consolidation&quot; in his 1992 article on &lt;a href=&quot;https:&#x2F;&#x2F;c2.com&#x2F;doc&#x2F;oopsla92.html&quot;&gt;Technical Debt&lt;&#x2F;a&gt;. i highly recommend the original article, but the basic idea is that over time, your understanding of how the program &lt;em&gt;should&lt;&#x2F;em&gt; behave changes, and you modify and refactor your program to match that idea. this happens in all programs, but the modification is easier in programs with little &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;technical-debt-is-different-from-technical-risk&#x2F;&quot;&gt;technical risk&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;furthermore, this theory modification often happens unintentionally over time as people are added and removed from teams. as &lt;a href=&quot;https:&#x2F;&#x2F;blog.ceejbot.com&#x2F;posts&#x2F;dysfunction-junction&#x2F;#fn:1&quot;&gt;ceejbot puts it&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is Conway’s Law over time. Teams are immutable: adding or removing a person to a team produces a different team. After enough change, the team is different enough that it no longer recognizes itself in the software system it produces. The result is people being vaguely unhappy about software that might be working perfectly well.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;i bring this up to note that you will never recover the &lt;em&gt;same&lt;&#x2F;em&gt; theory as the original programmers (at least, not without talking to them directly). the most you can do is to recover one similar enough that it does not require large changes to the program. in other words, you are creating a new theory of the program, and may end up having to adapt the program to your new theory.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;recreating-a-theory&quot;&gt;recreating a theory&lt;a class=&quot;zola-anchor&quot; href=&quot;#recreating-a-theory&quot; aria-label=&quot;Anchor link for: recreating-a-theory&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;this is useful both when fixing bugs and when adding new features; i will focus on new features because i want to emphasize that these skills are useful any time you modify a program. for a focus on debugging, see Julia Evans&#x27; &lt;a href=&quot;https:&#x2F;&#x2F;wizardzines.com&#x2F;zines&#x2F;debugging-guide&#x2F;&quot;&gt;Pocket Guide to Debugging&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;this post is about creating theories at the &quot;micro&quot; level, for small portions of the program. i hope to make a post about the &quot;macro&quot; level in the future, since that&#x27;s what really lets you start making design decisions about a program.&lt;&#x2F;p&gt;
&lt;div class=note-container&gt;&lt;div class=note-content&gt;
&lt;p&gt;i recently made a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;neovim&#x2F;pull&#x2F;33339&#x2F;&quot;&gt;PR to neovim&lt;&#x2F;a&gt;, having never worked on neovim before; i&#x27;ll use that as an example going forward.
i highly recommend following along with a piece of code you want to learn more about. if you don&#x27;t have one in mind, i have hidden all the examples behind a drop-down menu, so you can try to apply the ideas on your own before seeing how i use them.&lt;&#x2F;p&gt;
&lt;p&gt;the investigation i did in this blog post was based off &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;neovim&#x2F;tree&#x2F;57d99a515f57454370b6c122545ea53685d22d1b&quot;&gt;neovim commit 57d99a5&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;button id=expandAll&gt;Click here to open all notes.&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;where-to-start&quot;&gt;where to start&lt;a class=&quot;zola-anchor&quot; href=&quot;#where-to-start&quot; aria-label=&quot;Anchor link for: where-to-start&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;to start off, you need an idea of what change you want to make to the program. almost always, programs are too large for you to get an idea of the whole program at once. instead, you need to focus on theory-building for the parts you care about, and only understand the rest of the program to the extent that the parts you care about interact with it.&lt;&#x2F;p&gt;
&lt;div class=note-container&gt;&lt;div class=note-content&gt;
&lt;p&gt;in my neovim PR, i cared about the &lt;a href=&quot;https:&#x2F;&#x2F;neovim.io&#x2F;doc&#x2F;user&#x2F;windows.html#%3Adrop&quot;&gt;&lt;code&gt;:drop&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; command, which opens a file if it isn&#x27;t loaded, or switches to the relevant buffer if it is. specifically i wanted to extend the &quot;switch to the relevant buffer&quot; part to also respect &lt;a href=&quot;https:&#x2F;&#x2F;neovim.io&#x2F;doc&#x2F;user&#x2F;editing.html#%2Bcmd&quot;&gt;&lt;code&gt;+cmd&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, so that i could pass it a line number.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;finding-the-parts-you-care-about&quot;&gt;finding the parts you care about&lt;a class=&quot;zola-anchor&quot; href=&quot;#finding-the-parts-you-care-about&quot; aria-label=&quot;Anchor link for: finding-the-parts-you-care-about&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;there are several ways to get started here. the simplest is just finding the relevant part of the code or docs—if you can provoke an error that&#x27;s related to the part of the code you&#x27;re changing, you can search for that error directly. often, knowing &lt;em&gt;how&lt;&#x2F;em&gt; execution reaches that state is very helpful, which you can do by getting a backtrace. you can get backtraces for output from arbitrary programs with &lt;a href=&quot;https:&#x2F;&#x2F;jade.fyi&#x2F;blog&#x2F;debugging-rr-children&#x2F;&quot;&gt;liberal use of rr&lt;&#x2F;a&gt;, but if you&#x27;re debugging rustc specifically, there&#x27;s actually a built-in flag for this, so you can just use &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;compiler-debugging.html#getting-a-backtrace-for-errors&quot;&gt;&lt;code&gt;rustc file.rs -Z treat-err-as-bug&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div class=note-container&gt;&lt;details class=note-content&gt;&lt;summary&gt;&lt;code&gt;:drop&lt;&#x2F;code&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;for &lt;code&gt;:drop&lt;&#x2F;code&gt;, this didn&#x27;t work: it was documented on &lt;a href=&quot;https:&#x2F;&#x2F;neovim.io&#x2F;doc&#x2F;user&#x2F;windows.html#%3Adrop&quot;&gt;neovim&#x27;s site&lt;&#x2F;a&gt;, but i didn&#x27;t know a &lt;code&gt;:drop&lt;&#x2F;code&gt;-specific error to search for.&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;&lt;&#x2F;div&gt;
&lt;p&gt;if this doesn&#x27;t print an error message, or if it&#x27;s not possible to get a recording of the program, things are harder. you want to look for something you already know the name of; search for literal strings with that name, or substrings that might form part of a template.&lt;&#x2F;p&gt;
&lt;div class=note-container&gt;&lt;details class=note-content&gt;&lt;summary&gt;&lt;code&gt;:drop&lt;&#x2F;code&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;for &lt;code&gt;:drop&lt;&#x2F;code&gt; i searched for the literal string &lt;code&gt;&quot;drop&quot;&lt;&#x2F;code&gt;, since &lt;em&gt;something&lt;&#x2F;em&gt; needs to parse commands and it&#x27;s not super common for it to be on its own in a string. that pulled up the following hits:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ rg &amp;#39;&amp;quot;drop&amp;quot;&amp;#39; src
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;src&#x2F;nvim&#x2F;ex_docmd.c:4196:  } else if (STRICMP(p, &amp;quot;drop&amp;quot;) == 0) {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;src&#x2F;nvim&#x2F;ex_docmd.c:4213:    &amp;quot;drop&amp;quot;,
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;src&#x2F;nvim&#x2F;ex_docmd.c:4302:    &#x2F;&#x2F; &amp;quot;drop&amp;quot;.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;src&#x2F;nvim&#x2F;eval.c:7146:    len += 7 + 4;  &#x2F;&#x2F; &amp;quot; ++bad=&amp;quot; + &amp;quot;keep&amp;quot; or &amp;quot;drop&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;ex_docmd.c&lt;&#x2F;code&gt; looked promising, so i read the code around there.&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;reading-source-code&quot;&gt;reading source code&lt;a class=&quot;zola-anchor&quot; href=&quot;#reading-source-code&quot; aria-label=&quot;Anchor link for: reading-source-code&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;sometimes triggering the condition is hard, so instead i read the source code to reverse-engineer the stack trace. seeing all possible call sites of a function is instructive in itself, and you can usually narrow it down to only a few callers by skimming what the callers are doing. i highly recommend using an LSP for this part since the advantage comes from seeing &lt;em&gt;all&lt;&#x2F;em&gt; possible callers, not just most, and regex is less reliable than proper name resolution.&lt;&#x2F;p&gt;
&lt;div class=note-container&gt;&lt;details class=note-content&gt;&lt;summary&gt;&lt;code&gt;:drop&lt;&#x2F;code&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;it turned out that none of the code i found in my search was for &lt;code&gt;:drop&lt;&#x2F;code&gt; itself, but i did find it was in a function named &lt;code&gt;get_bad_opt&lt;&#x2F;code&gt;. &lt;code&gt;get_bad_opt&lt;&#x2F;code&gt; had only one caller, &lt;code&gt;getargopt&lt;&#x2F;code&gt;. that was called by &lt;code&gt;do_one_cmd&lt;&#x2F;code&gt;. the doc-comment on &lt;code&gt;do_one_cmd&lt;&#x2F;code&gt; mentions that it parses the string, but i am not used to having documentation so i went up one level too far to &lt;code&gt;do_cmdline&lt;&#x2F;code&gt;. at that point, looking at the call site of &lt;code&gt;do_one_cmd&lt;&#x2F;code&gt;, i realized i had gone too far because it was passing in the whole string of the Ex command line. i found a more relevant part of the code by looking at the uses of &lt;code&gt;cmdlinep&lt;&#x2F;code&gt; in &lt;code&gt;do_one_cmd&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;      &lt;span class=&quot;z-storage z-type z-c&quot;&gt;char&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;cmdname &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; after_modifier &lt;span class=&quot;z-keyword z-operator z-ternary z-c&quot;&gt;?&lt;&#x2F;span&gt; after_modifier &lt;span class=&quot;z-keyword z-operator z-ternary z-c&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;cmdlinep&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;i got lucky - this was not actually the code i cared about, but the bit i did care about had a similar name, so i found it by searching for &lt;code&gt;cmdname&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;  &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; 6. Parse arguments.  Then check for errors.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;IS_USER_CMDIDX&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;ea&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;cmdidx&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    ea&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;argt&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; cmdnames&lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;ea&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;cmdidx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;cmd_argt&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;from there i went to the definition of &lt;code&gt;cmdnames&lt;&#x2F;code&gt; (in &lt;code&gt;build&#x2F;src&#x2F;nvim&#x2F;auto&#x2F;ex_cmds_defs.generated.h&lt;&#x2F;code&gt;) and found &lt;code&gt;&quot;drop&quot;&lt;&#x2F;code&gt; in that file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;  &lt;span class=&quot;z-meta z-brackets z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-c&quot;&gt;[&lt;&#x2F;span&gt;CMD_drop&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-c&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;cmd_name&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;drop&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;cmd_func&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;ex_func_T&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;ex_drop&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;cmd_preview_func&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;cmd_argt&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;147854&lt;span class=&quot;z-storage z-type z-numeric z-c&quot;&gt;L&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;cmd_addr_type&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; ADDR_NONE
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and from there found that the function i cared about was called &lt;code&gt;ex_drop&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;if i had been a little more careful, i could have found &lt;code&gt;CMD_drop&lt;&#x2F;code&gt; sooner with &lt;code&gt;rg -ul &#x27;&quot;drop&quot;&#x27;&lt;&#x2F;code&gt; (this time without filtering out hidden files or limiting to the source directory). but this way worked fine as well.&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;verifying-your-understanding&quot;&gt;verifying your understanding&lt;a class=&quot;zola-anchor&quot; href=&quot;#verifying-your-understanding&quot; aria-label=&quot;Anchor link for: verifying-your-understanding&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;do mini experiments: if you see an error emitted in nearby code, try to trigger it so that you verify you&#x27;re looking in the right place. when debugging, i often use process of elimination to narrow down callers: if an error would have been emitted if a certain code path was taken, or if there would have been more or less logging, i can be sure that code i am looking at was not run.&lt;&#x2F;p&gt;
&lt;p&gt;the simplest experiment is just &lt;code&gt;exit(1)&lt;&#x2F;code&gt;; it&#x27;s easy to notice and doesn&#x27;t change the state of the program, and it can&#x27;t fail. other experiments could include &quot;adding custom logging&quot; or &quot;change the behavior of the function&quot;, which let you perform multiple experiments at once and understand how the function impacts its callers.&lt;&#x2F;p&gt;
&lt;p&gt;for more complicated code, i like to use a debugger, which lets you see much more of the state at once. if possible, in-editor debuggers are really nice—vscode, and &lt;a href=&quot;https:&#x2F;&#x2F;zed.dev&#x2F;debugger&quot;&gt;since recently, zed&lt;&#x2F;a&gt;, have one built-in; for nvim i use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rcarriga&#x2F;nvim-dap-ui&quot;&gt;nvim-dap-ui&lt;&#x2F;a&gt;. you can also just use a debugger in a terminal. some experiments i like to try:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;breaking at a function to make sure it is executed&lt;&#x2F;li&gt;
&lt;li&gt;printing local variables&lt;&#x2F;li&gt;
&lt;li&gt;setting hardware watchpoints on memory to see where something is modified (this especially shines &lt;a href=&quot;https:&#x2F;&#x2F;rr-project.org&#x2F;#:~:text=more%20powerful%20is%20reverse%20execution&quot;&gt;in combination with a time-travel debugger&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=note-container&gt;&lt;details class=note-content&gt;&lt;summary&gt;&lt;code&gt;:drop&lt;&#x2F;code&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;for &lt;code&gt;:drop&lt;&#x2F;code&gt;, i was quite confident i had found the right code, so i didn&#x27;t bother with any experiments. there are other cases where it&#x27;s more useful; i made an earlier &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tmux&#x2F;tmux&#x2F;pull&#x2F;4399&quot;&gt;PR to tmux&lt;&#x2F;a&gt; where there were many different places search happened, so verifying i was looking at the right one was very helpful. specifically i added &lt;code&gt;exit(1)&lt;&#x2F;code&gt; to the function i thought was the right place, since debug logging in tmux is non-trivial to access.&lt;&#x2F;p&gt;
&lt;p&gt;i rarely use a debugger for adding new code; mostly i use it for debugging existing code. programs complicated enough that i need a debugger just to understand control flow usually have a client&#x2F;server model that also makes them harder to debug, so i don&#x27;t bother and just read the source code.&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;writing-new-code&quot;&gt;writing new code&lt;a class=&quot;zola-anchor&quot; href=&quot;#writing-new-code&quot; aria-label=&quot;Anchor link for: writing-new-code&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;reading source code is also useful for finding examples of how to use an API. often it handles edge cases you wouldn&#x27;t know about by skimming, and uses helper functions that make your life simpler. your goal is to make your change as similar to the existing codebase as possible, both to reduce the risk of bugs and to increase the chance the maintainer likes your change.&lt;&#x2F;p&gt;
&lt;p&gt;when i write new code, i will usually copy a small snippet from elsewhere in the codebase and modify it to my needs. i try to copy at most 10-15 lines; more than that indicates that i should try to reuse or create a higher-level API.&lt;&#x2F;p&gt;
&lt;div class=note-container&gt;&lt;details class=note-content&gt;&lt;summary&gt;&lt;code&gt;:drop&lt;&#x2F;code&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;once in &lt;code&gt;ex_drop&lt;&#x2F;code&gt;, i skimmed the code and found a snippet looked like it was handling existing files:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;FOR_ALL_TAB_WINDOWS&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;tp&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; wp&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;wp&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;w_buffer &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;==&lt;&#x2F;span&gt; buf&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;goto_tabpage_win&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;tp&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; wp&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;      curwin&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;w_arg_idx &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;      &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;bufIsChanged&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;curbuf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;        &lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; save_ar &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; curbuf&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;b_p_ar&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;        &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; reload the file if it is newer
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;        curbuf&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;b_p_ar &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;true&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;        &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;buf_check_timestamp&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;curbuf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;        curbuf&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;b_p_ar &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; save_ar&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;      &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;      &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;curbuf&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;b_ml&lt;span class=&quot;z-punctuation z-accessor z-c&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-member z-c&quot;&gt;ml_flags&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;&amp;amp;&lt;&#x2F;span&gt; ML_EMPTY&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;        &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;ex_rewind&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;eap&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;      &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;      &lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the bug here is not any code that is present; instead it&#x27;s code that&#x27;s missing. i had to figure out where &lt;code&gt;+cmd&lt;&#x2F;code&gt; was stored and how to process it.
so, i repeated a similar process for &lt;code&gt;+cmd&lt;&#x2F;code&gt;. this time i had something more to start with - i knew the command structure was named &lt;code&gt;eap&lt;&#x2F;code&gt; and had type &lt;code&gt;exarg_t&lt;&#x2F;code&gt;.
looking at the definition of &lt;code&gt;struct exarg&lt;&#x2F;code&gt; showed me what i wanted:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;char&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;*&lt;&#x2F;span&gt;do_ecmd_cmd&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;            &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&#x2F;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; +command arg to be used in edited file&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;looking for &lt;code&gt;do_ecmd_cmd&lt;&#x2F;code&gt;, i found &lt;code&gt;do_exbuffer&lt;&#x2F;code&gt; (with a helpful comment saying it was responsible for &lt;code&gt;:buffer&lt;&#x2F;code&gt;) which called &lt;code&gt;do_cmdline_cmd&lt;&#x2F;code&gt;, and in turn &lt;code&gt;do_cmdline&lt;&#x2F;code&gt;.
looking at the callers of &lt;code&gt;do_cmdline&lt;&#x2F;code&gt; i found &lt;code&gt;do_ecmd&lt;&#x2F;code&gt;, which handles &lt;code&gt;:edit&lt;&#x2F;code&gt;. &lt;code&gt;:edit&lt;&#x2F;code&gt; has exactly the behavior i wanted for &lt;code&gt;:drop&lt;&#x2F;code&gt;, so i copied its behavior:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;do_cmdline&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;command&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; DOCMD_VERBOSE&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;out of caution, i also looked at the other places in the function that handled &lt;code&gt;command&lt;&#x2F;code&gt;, and it&#x27;s a good thing i did, because i found this wild snippet above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; class=&quot;language-c z-code&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;command &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;NULL&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;||&lt;&#x2F;span&gt; newlnum &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;      &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;get_vim_var_str&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;VV_SWAPCOMMAND&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;==&lt;&#x2F;span&gt; NUL&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-c&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Set v:swapcommand for the SwapExists autocommands.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-sys-types z-c&quot;&gt;size_t&lt;&#x2F;span&gt; len &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;command &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-ternary z-c&quot;&gt;?&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;strlen&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;command&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;3&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-ternary z-c&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;30&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-storage z-type z-c&quot;&gt;char&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-c&quot;&gt;const&lt;&#x2F;span&gt; p &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;xmalloc&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;len&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;command &lt;span class=&quot;z-keyword z-operator z-comparison z-c&quot;&gt;!=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;vim_snprintf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;p&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; len&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;:&lt;span class=&quot;z-constant z-other z-placeholder z-c&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-character z-escape z-c&quot;&gt;\r&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; command&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-c&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;      &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;vim_snprintf&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;p&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; len&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;%&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; PRId64 &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;G&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-type z-stdint z-c&quot;&gt;int64_t&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;newlnum&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;set_vim_var_string&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;VV_SWAPCOMMAND&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; p&lt;span class=&quot;z-punctuation z-separator z-c&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-c&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    did_set_swapcommand &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-c&quot;&gt;true&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-variable z-function z-c&quot;&gt;xfree&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;p&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;i refactored this into a helper function and then called it from both the original &lt;code&gt;:edit&lt;&#x2F;code&gt; command and my new code in &lt;code&gt;:drop&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;testing-new-code&quot;&gt;testing new code&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing-new-code&quot; aria-label=&quot;Anchor link for: testing-new-code&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;this works in much the same way. try to find existing tests by using &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;theory-building-without-a-mentor&#x2F;#finding-the-parts-you-care-about&quot;&gt;the same techniques as finding the code you care about&lt;&#x2F;a&gt;. read them; write them using existing examples. tests are also code, after all.&lt;&#x2F;p&gt;
&lt;p&gt;test suites usually have better documentation than the code itself, since adding new tests is much more common than modifying any particular section of code; see if you can find the docs. i look for &lt;code&gt;CONTRIBUTING.md&lt;&#x2F;code&gt; files, and if i don&#x27;t find them i fall back to skimming the readme. sometimes there are is also a &lt;code&gt;README.md&lt;&#x2F;code&gt; in the folder where the tests are located, although these tend to be somewhat out of date.&lt;&#x2F;p&gt;
&lt;p&gt;i care a lot about iteration times, so i try and find how to run individual tests. that info is usually in the README, or sometime you can figure it out from the test command&#x27;s &lt;code&gt;--help&lt;&#x2F;code&gt; output.&lt;&#x2F;p&gt;
&lt;p&gt;run your tests! ideally, create and run your tests &lt;em&gt;before&lt;&#x2F;em&gt; modifying the code so that you can see that they start to pass after your change. tests are extra important when you don&#x27;t already understand the code, because they help you verify that your new theory is correct. run existing tests as well; run those before you make changes so you know which failures are spurious (a surprisingly high number of codebases have flaky or environment-dependent tests).&lt;&#x2F;p&gt;
&lt;div class=note-container&gt;&lt;details class=note-content&gt;&lt;summary&gt;&lt;code&gt;:drop&lt;&#x2F;code&gt;&lt;&#x2F;summary&gt;
&lt;p&gt;i started by looking for existing tests for &lt;code&gt;:drop&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; rg :drop test&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;test&#x2F;functional&#x2F;ex_cmds&#x2F;drop_spec.lua:8:describe&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;(&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;:drop&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, function(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;test&#x2F;functional&#x2F;ex_cmds&#x2F;drop_spec.lua:75:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;      :drop Xdrop_modified.txt&lt;&#x2F;span&gt;           &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;test&#x2F;old&#x2F;testdir&#x2F;test_winfixbuf.vim:1094:&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt; Fail :drop but :drop! is allowed
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;test&#x2F;old&#x2F;testdir&#x2F;test_excmd.vim:92:&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; Test for the :drop command&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;test&#x2F;old&#x2F;testdir&#x2F;test_excmd.vim:775:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;  call term_sendkeys(buf, &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;:drop Xdrop_modified.txt\&amp;lt;CR&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;fortunately this had results right away and i was able to start adding my new test. &lt;code&gt;CONTRIBUTING.md&lt;&#x2F;code&gt; had a pointer to &lt;code&gt;test&#x2F;README.md&lt;&#x2F;code&gt; which documented &lt;code&gt;TEST_FILE&lt;&#x2F;code&gt; and &lt;code&gt;mak functionaltest&lt;&#x2F;code&gt;. neovim has very good internal tooling and when my &lt;code&gt;screen:expect()&lt;&#x2F;code&gt; call failed it gave me a very helpful pointer to &lt;code&gt;screen:snapshot_util&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;details&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;what-have-we-learned&quot;&gt;what have we learned?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-have-we-learned&quot; aria-label=&quot;Anchor link for: what-have-we-learned&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;onlurking&#x2F;fc5c81d18cfce9ff81bc968a7f342fb1&quot;&gt;programming is theory building&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;recovering a theory from code and docs alone is hard, but possible.&lt;&#x2F;li&gt;
&lt;li&gt;most programs are too large for you to understand them all at once. decide on your goal and learn just enough to accomplish it.&lt;&#x2F;li&gt;
&lt;li&gt;reading source code is surprisingly rewarding.&lt;&#x2F;li&gt;
&lt;li&gt;match the existing code as closely as you can until you are sure you have a working theory.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;hopefully this was helpful! i am told by my friends that i am unusually good at this skill, so i am interested whether this post was effective at teaching it. if you have any questions, or if you just want to get in contact, feel free to reach out &lt;a href=&quot;mailto:blog@jyn.dev&quot;&gt;via email&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;!--say you want to change the output (e.g. you are adding a new field to JSON emitted by the program). i like to start by breaking it down along interface boundaries: finding the code that creates the JSON, then breaking it down into smaller and smaller pieces, ideally to a single function. if there are multiple possible places that could have emitted it, see if you can determine which of them are reachable from your input. you can usually get an idea of which parts of the program are reachable statically just by reading the source code, even if you have no trace and aren&#x27;t able to replicate locally.--&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>technical debt is different from technical risk</title>
        <published>2025-05-23T00:00:00+00:00</published>
        <updated>2025-05-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/technical-debt-is-different-from-technical-risk/"/>
        <id>https://jyn.dev/technical-debt-is-different-from-technical-risk/</id>
        
        <content type="html" xml:base="https://jyn.dev/technical-debt-is-different-from-technical-risk/">&lt;h2 id=&quot;technical-debt-is-commonly-misunderstood&quot;&gt;technical debt is commonly misunderstood&lt;a class=&quot;zola-anchor&quot; href=&quot;#technical-debt-is-commonly-misunderstood&quot; aria-label=&quot;Anchor link for: technical-debt-is-commonly-misunderstood&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;the phrase &quot;technical debt&quot; at this point is very common in programming circles. however, i think the way this phrase is commonly used is misleading and in some cases actively harmful. here is a statement of the common usage by &lt;a href=&quot;https:&#x2F;&#x2F;mastodon.pub.solar&#x2F;@mezza&#x2F;114219114805175449&quot;&gt;a random commenter on my fediverse posts&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;tech debt is [...] debt in the literal sense that you took a shortcut to get to your product state. You&#x27;ve saved time by moving quick, and are now paying interest by development slowing down.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;contrast this to the original statement of technical debt in &lt;a href=&quot;https:&#x2F;&#x2F;c2.com&#x2F;doc&#x2F;oopsla92.html&quot;&gt;Ward Cunningham&#x27;s paper from 1992&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shipping first time code is like going into debt. A little debt speeds development so long as it is paid back promptly with a rewrite. [...] The danger occurs when the debt is not repaid. Every minute spent on not-quite-right code counts as interest on that debt. Entire engineering organizations can be brought to a stand-still under the debt load of an unconsolidated implementation.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Ward isn&#x27;t comparing &quot;shortcuts&quot; or &quot;move fast and break things&quot; to &quot;good code&quot;—he&#x27;s comparing iterative design (often called &quot;agile&quot;) to the waterfall method &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-smalltalk-1&quot;&gt;&lt;a href=&quot;#fn-smalltalk&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The traditional waterfall development cycle has endeavored to avoid programming catastrophy by working out a program in detail before programming begins. [...] However, using our debt analogy, we recognize this amounts to preserving the concept of payment up-front and in-full.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Finally, I want to quote a &lt;a href=&quot;https:&#x2F;&#x2F;wiki.c2.com&#x2F;?WardExplainsDebtMetaphor&quot;&gt;follow-up statement from Ward&lt;&#x2F;a&gt; in 2006, which is closely related to &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;onlurking&#x2F;fc5c81d18cfce9ff81bc968a7f342fb1&quot;&gt;Programming As Theory Building&lt;&#x2F;a&gt; by Peter Naur:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A lot of bloggers at least have explained the debt metaphor and confused it, I think, with the idea that you could write code poorly with the intention of doing a good job later and thinking that that was the primary source of debt. I&#x27;m never in favor of writing code poorly, but I am in favor of writing code to reflect your current understanding of a problem even if that understanding is partial.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It seems pretty clear at this point that Ward is describing something different from the common usage (I think &quot;technical debt&quot; is a good term for Ward&#x27;s original idea). What then can we call the common usage? I like &lt;em&gt;technical risk&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;technical-risk-means-a-program-is-hard-to-modify&quot;&gt;technical risk means a program is hard to modify&lt;a class=&quot;zola-anchor&quot; href=&quot;#technical-risk-means-a-program-is-hard-to-modify&quot; aria-label=&quot;Anchor link for: technical-risk-means-a-program-is-hard-to-modify&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Whenever you modify a program&#x27;s behavior, you incur a risk that you introduce a bug. Over time, as the code is used more, the number of bugs tends to decrease as you fix them. &lt;a href=&quot;https:&#x2F;&#x2F;security.googleblog.com&#x2F;2024&#x2F;09&#x2F;eliminating-memory-safety-vulnerabilities-Android.html#:~:text=the%20math&quot;&gt;Two studies in 2021 and 2022&lt;&#x2F;a&gt; (one by the Android security team, one by Usenix security) found empirically that memory vulnerabilities decay &lt;em&gt;exponentially&lt;&#x2F;em&gt; over time. So you have an inherent tension between minimizing your changes so that your code gets less buggy over time and modifying your code so that your program becomes more useful.&lt;&#x2F;p&gt;
&lt;p&gt;When people talk about &quot;technical debt&quot;, what I am calling &quot;technical risk&quot;, they mean &quot;modifying the code has a very high risk&quot;—any kind of modification has a high chance of introducing bugs, not only when adding new features but also when doing refactors and bug fixes. Even the most trivial changes become painful and time-consuming, and the right tail of your time distribution increases dramatically.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, when we say &quot;this program has a lot of tech debt&quot;, we are implicitly arguing &quot;the risk of a refactor is lower than the risk of it eventually breaking when we make &lt;em&gt;some other change&lt;&#x2F;em&gt;&quot;. We are &lt;em&gt;gambling&lt;&#x2F;em&gt; that the risk of a refactor (either in time or breakage) is worth the decreased risk going forward.&lt;&#x2F;p&gt;
&lt;p&gt;Note that you cannot overcome technical risk simply by spending more time; in this way it is unlike technical debt. With sufficient technical risk, simply predicting how long a change will take becomes hard. Due to the risk of regressions you must spend more time testing; but because of the complexity of the program, creating tests is also time-consuming, and it is less likely that you can test exhaustively, so there is a higher risk that your tests don&#x27;t catch all regressions. Eventually changing the program without regressions becomes nearly impossible, and people fork or reimplement the program from scratch (what Ward describes as &quot;the interest is total&quot;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;all-programs-have-risk&quot;&gt;all programs have risk&lt;a class=&quot;zola-anchor&quot; href=&quot;#all-programs-have-risk&quot; aria-label=&quot;Anchor link for: all-programs-have-risk&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The common understanding of &quot;tech debt&quot; is that it only applies to programs that were built hastily or without planning. &quot;tech risk&quot; is much more broad than that, though.
It also applies to old programs which no longer have anyone that &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;onlurking&#x2F;fc5c81d18cfce9ff81bc968a7f342fb1&quot;&gt;understands their theory&lt;&#x2F;a&gt;; new code if it&#x27;s sufficiently complicated (stateful, non-local, &quot;just a complicated algorithm&quot;, etc); and large programs that are too big for any one person to understand in full.
In fact, most code has some amount of risk, simply because it isn&#x27;t usually worth making readability the number 1 priority (and readability differs from programmer to programmer).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bad-code-misses-the-point&quot;&gt;&quot;bad code&quot; misses the point&lt;a class=&quot;zola-anchor&quot; href=&quot;#bad-code-misses-the-point&quot; aria-label=&quot;Anchor link for: bad-code-misses-the-point&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Hillel Wayne recently wrote a post titled &lt;a href=&quot;https:&#x2F;&#x2F;buttondown.com&#x2F;hillelwayne&#x2F;archive&#x2F;write-the-most-clever-code-you-possibly-can&#x2F;&quot;&gt;Write the most clever code you possibly can&lt;&#x2F;a&gt;. At one point he says this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&#x27;ve also talked to people who think that datatypes besides lists and hashmaps are too clever to use, that most optimizations are too clever to bother with, and even that functions and classes are too clever and code should be a linear script.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is an extreme example, but it reflects a pattern I often see: people think any code that uses complicated features is &quot;too clever&quot; and therefore bad.
This comes up a lot for &quot;weird&quot; syscalls or libc functions, like &lt;code&gt;setjmp&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;longjmp&lt;&#x2F;code&gt; and &lt;code&gt;fork&lt;&#x2F;code&gt;.
I think this misses the point. What makes something technical risk is the &lt;em&gt;risk&lt;&#x2F;em&gt;, the inertia when you try to modify it, the likelihood of bugs.
Having a steep learning curve is not the same as being hard to modify, because once you learn it once, future changes become easier.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;feature-flags-are-the-taste-of-the-lotus&quot;&gt;feature flags are the taste of the lotus&lt;a class=&quot;zola-anchor&quot; href=&quot;#feature-flags-are-the-taste-of-the-lotus&quot; aria-label=&quot;Anchor link for: feature-flags-are-the-taste-of-the-lotus&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Once your risk is high enough, and if you don&#x27;t have the option of reducing complexity, people tend to work around the risk with feature flags or configuration options. These flags avoid the new behavior altogether in the default case, such that &quot;changing the program&quot; is decoupled from &quot;changing the behavior&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;In my experience this can be good in moderation—but if every new change requires a feature flag, and you never go back and remove old flags, then you&#x27;re in trouble, because the flags themselves are adding complexity and risk. Each new change has to consider not just the default case, but all possible combinations of flags in a combinatorial explosion. You see this with things like tmux, OracleDB, and vim, all of which tend to accumulate options without removing them. Consider &lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=18442941&quot;&gt;this quote&lt;&#x2F;a&gt; from someone who claimed to work at Oracle:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes one needs to understand the values and the effects of 20 different flag to predict how the code would behave in different situations. Sometimes 100s too! I am not exaggerating. The only reason why this product is still surviving and still works is due to literally millions of tests!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is an extreme case, but in my experience it is absolutely representative of what happens to sufficiently large codebases over time. Once things are this bad you are &quot;locked in&quot; to the feature flag model—there&#x27;s too many to remove (and your users may be depending on them!), but you cannot understand the interactions of all their combinations, so you gate new changes behind more new flags just to be sure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-to-do-about-risk&quot;&gt;what to do about risk?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-to-do-about-risk&quot; aria-label=&quot;Anchor link for: what-to-do-about-risk&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;this post is kinda scary! it tells a story of codebases that grow more and more bogged down over time, despite people&#x27;s best efforts, until they eventually die because they can&#x27;t be modified.&lt;&#x2F;p&gt;
&lt;p&gt;i think things are not actually so dire as they seem. firstly, you always have the option to do ongoing refactors, reducing the risk of changes. with ongoing maintenance like this, even extremely complex programs can be maintained for years or decades; i think &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;about-this-guide.html#constant-change&quot;&gt;the rust compiler&lt;&#x2F;a&gt; is a good example of such a program.&lt;&#x2F;p&gt;
&lt;p&gt;secondly, rebuilding systems is good, actually, because it lets us learn from the lessons of the past. oracledb, tmux, and vim all have younger competitors (e.g. sqlite, zellij, and helix) that are more nimble. even more than that, new systems have the opportunity to be built on a different paradigm (e.g. sqlite runs in-process instead of as a daemon) with different tradeoffs. this is the classic case of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Disruptive_innovation&quot;&gt;disruptive innovation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;to some extent, people or teams can get &quot;locked in&quot; to existing systems, especially if they are highly configurable or changing to a new system would be high risk for the organization (e.g. migrating to a new database is extremely high risk for almost anyone), but this can be mitigated by open file formats (such as &lt;a href=&quot;https:&#x2F;&#x2F;www.sqlite.org&#x2F;fileformat2.html&quot;&gt;sqlite&#x27;s database file&lt;&#x2F;a&gt;) and backwards compatibility for the old options (such as in neovim).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;in conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-conclusion&quot; aria-label=&quot;Anchor link for: in-conclusion&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&quot;technical debt&quot; as commonly understood is different from its origins.&lt;&#x2F;li&gt;
&lt;li&gt;the original &quot;technical debt&quot; referred to iterative design.&lt;&#x2F;li&gt;
&lt;li&gt;the common meaning is about programs that are hard to change, and i refer to it as &quot;technical risk&quot;.&lt;&#x2F;li&gt;
&lt;li&gt;all programs have technical risk to greater or lesser degree; you can decrease it but never eliminate it altogether.&lt;&#x2F;li&gt;
&lt;li&gt;once risk grows sufficiently high, changes become hard enough that they have to be gated behind feature flags. the program eventually stagnates and is rewritten.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-smalltalk&quot;&gt;
&lt;p&gt;Actually, if you read the post more closely, he is saying something even more interesting: iterative development is only possible &lt;em&gt;because&lt;&#x2F;em&gt; his company is using a language (smalltalk) that has privacy boundaries. &lt;a href=&quot;#fr-smalltalk-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>sftp sandboxing</title>
        <published>2025-05-05T00:00:00+00:00</published>
        <updated>2025-05-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/sftp-sandboxing/"/>
        <id>https://jyn.dev/sftp-sandboxing/</id>
        
        <content type="html" xml:base="https://jyn.dev/sftp-sandboxing/">&lt;p&gt;consider the following problem:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;you want to share a 300 MB directory&lt;&#x2F;li&gt;
&lt;li&gt;with a single other person, not publicly&lt;&#x2F;li&gt;
&lt;li&gt;over a public network&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;any hosting service that lets you serve 300 MB costs money. also, for sufficient file sizes the wasted upload becomes noticeable. it would be much nicer if we could peer-to-peer this.&lt;&#x2F;p&gt;
&lt;p&gt;sftp to the rescue!&lt;&#x2F;p&gt;
&lt;p&gt;small problem: sftp shows you a &lt;em&gt;lot&lt;&#x2F;em&gt; of the system state. for one thing, you have read access to basically every file on the system, and write access to anything owned by your user. for another, the easiest way to set up sftp is through an ssh server, which is. well. it has &quot;shell&quot; in the name for a reason.&lt;&#x2F;p&gt;
&lt;p&gt;so! here is how to set up a read-only sftp server which doesn&#x27;t allow any other kind of access.&lt;&#x2F;p&gt;
&lt;p&gt;First, add the following to &lt;code&gt;&#x2F;etc&#x2F;ssh&#x2F;sshd_config&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sshd&quot; class=&quot;language-sshd z-code&quot;&gt;&lt;code class=&quot;language-sshd&quot; data-lang=&quot;sshd&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Subsystem       sftp    internal-sftp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Match User myuser
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	ChrootDirectory %h
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	ForceCommand internal-sftp -R
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;	DisableForwarding yes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then run the following commands in a root shell (e.g. with &lt;code&gt;sudo -i&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &#x2F;empty&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; a-w &#x2F;empty&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;useradd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;s&lt;&#x2F;span&gt; &#x2F;usr&#x2F;sbin&#x2F;nologin&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;m&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;skel&lt;&#x2F;span&gt; &#x2F;empty myuser&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;chown&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; root:root &#x2F;home&#x2F;myuser&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; a+rx &#x2F;home&#x2F;myuser&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, create &lt;code&gt;&#x2F;home&#x2F;myuser&#x2F;.ssh&#x2F;authorized_keys&lt;&#x2F;code&gt; in any way you wish&lt;&#x2F;p&gt;
&lt;p&gt;This creates a sftp session that looks like this:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ ssh myuser@localhost
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;This service allows sftp connections only.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Connection to localhost closed.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ sftp myuser@localhost
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Connected to localhost.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sftp&amp;gt; pwd
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Remote working directory: &#x2F;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sftp&amp;gt; ls
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;myfile
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sftp&amp;gt; ls ..
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;..&#x2F;myfile
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sftp&amp;gt; ls ..&#x2F;..&#x2F;..
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;..&#x2F;..&#x2F;..&#x2F;myfile
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sftp&amp;gt; mkdir x
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;remote mkdir &amp;quot;&#x2F;x&amp;quot;: Permission denied
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sftp&amp;gt; chmod 644	myfile
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Changing mode on &#x2F;myfile
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;remote setstat &amp;quot;&#x2F;myfile&amp;quot;: Permission denied
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;sftp&amp;gt; get myfile
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Fetching &#x2F;myfile to myfile
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;myfile       100%   46MB 899.5MB&#x2F;s   00:00
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Some explanations and references:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;cgi-bin&#x2F;man.cgi&#x2F;OpenBSD-current&#x2F;man5&#x2F;sshd_config.5#Subsystem&quot;&gt;&lt;code&gt;Subsystem&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is documented as follows:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Configures an external subsystem (e.g. file transfer daemon). [...] the name &lt;code&gt;internal-sftp&lt;&#x2F;code&gt; implements an in-process SFTP server. [...] It accepts the same command line arguments as &lt;code&gt;sftp-server&lt;&#x2F;code&gt; [...]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;what arguments can we pass to &lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;sftp-server#R&quot;&gt;&lt;code&gt;sftp-server&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;-R&lt;&#x2F;code&gt;	Places this instance of &lt;code&gt;sftp-server&lt;&#x2F;code&gt; into a read-only mode. Attempts to open files for writing, as well as other operations that change the state of the filesystem, will be denied.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;just what we want!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;cgi-bin&#x2F;man.cgi&#x2F;OpenBSD-current&#x2F;man5&#x2F;sshd_config.5#ForceCommand&quot;&gt;&lt;code&gt;ForceCommand internal-sftp&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is a cute little feature of openssh:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Specifying a command of &lt;code&gt;internal-sftp&lt;&#x2F;code&gt; will force the use of an in-process SFTP server that requires no support files when used with &lt;code&gt;ChrootDirectory&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In particular, this denies shell and command access.&lt;&#x2F;p&gt;
&lt;p&gt;What is &lt;code&gt;ChrootDirectory&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Specifies the pathname of a directory to &lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;chroot.2&quot;&gt;chroot(2)&lt;&#x2F;a&gt; to after authentication. At session startup &lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;sshd.8&quot;&gt;sshd(8)&lt;&#x2F;a&gt; checks that all components of the pathname are root-owned directories which are not writable by group or others. After the chroot, &lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;sshd.8&quot;&gt;sshd(8)&lt;&#x2F;a&gt; changes the working directory to the user&#x27;s home directory. [...] For file transfer sessions using SFTP no additional configuration of the environment is necessary if the in-process sftp-server is used [...]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;cute! an easy way to deny even reading other parts of the rest of the system.&lt;&#x2F;p&gt;
&lt;p&gt;why does it require the path to be owned by root? &lt;a href=&quot;https:&#x2F;&#x2F;lists.mindrot.org&#x2F;pipermail&#x2F;openssh-unix-dev&#x2F;2009-May&#x2F;027651.html&quot;&gt;https:&#x2F;&#x2F;lists.mindrot.org&#x2F;pipermail&#x2F;openssh-unix-dev&#x2F;2009-May&#x2F;027651.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you ever let the user chroot to this directory and execute his
hard-linked &#x2F;bin&#x2F;su, he can become root within that directory and then
escape the chroot. Even if you could prevent him from escaping chroot,
he can create device nodes and operate directly on filesystems, mount
&#x2F;proc and operate on external processes, etc. It should be clear that
this is Very Bad (tm).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;cool cool cool. love unix. this sure is a tool we use to build software.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;cgi-bin&#x2F;man.cgi&#x2F;OpenBSD-current&#x2F;man5&#x2F;sshd_config.5#Match&quot;&gt;&lt;code&gt;Match&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is surprisingly complicated in the general case but simple enough here.
&lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;cgi-bin&#x2F;man.cgi&#x2F;OpenBSD-current&#x2F;man5&#x2F;sshd_config.5#DisableForwarding&quot;&gt;&lt;code&gt;DisableForwarding&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is probably not &lt;em&gt;strictly&lt;&#x2F;em&gt; necessary but we don&#x27;t want people using this file server as a jumpbox to whatever other networks it&#x27;s connected to, nor as e.g. a tor exit node.&lt;&#x2F;p&gt;
&lt;p&gt;lastly i want to point out that &lt;code&gt;useradd&lt;&#x2F;code&gt; by default creates a user with no login password, which takes care of people guessing passwords for this without the proper ssh public key. i have &lt;code&gt;PasswordAuthentication no&lt;&#x2F;code&gt; set in &lt;code&gt;sshd_config&lt;&#x2F;code&gt;, but this allows disabling the password for just your sftp access without disabling it altogether. alternatively you could put it under the &lt;code&gt;Match User&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;&#x2F;strong&gt; an earlier version of this post suggested &lt;code&gt;Subsystem sftp internal-sftp -R&lt;&#x2F;code&gt; and &lt;code&gt;ForceCommand internal-sftp&lt;&#x2F;code&gt;. that disables write access for &lt;em&gt;all&lt;&#x2F;em&gt; users, not just the selected user. the new version only disables it for the selected user.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>tools</title>
        <published>2025-05-03T00:00:00+00:00</published>
        <updated>2025-05-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/tools/"/>
        <id>https://jyn.dev/tools/</id>
        
        <content type="html" xml:base="https://jyn.dev/tools/">&lt;p&gt;i care a lot about my tools. i have very high standards for tools along some axes, and low standards along others—but that&#x27;s the topic of a different blog post. this post is about the tools i &lt;em&gt;do&lt;&#x2F;em&gt; use, and about tools i have my eye on and may use in the future. hopefully it will be useful to other people, such as programmers, sysadmins, etc.&lt;&#x2F;p&gt;
&lt;p&gt;this is also not a description of &lt;em&gt;how&lt;&#x2F;em&gt; i use these tools, which also deserves its own blog post (i pride myself on integrating tools that were not designed to integrate with each other). this is just a list of the tools themselves.&lt;&#x2F;p&gt;
&lt;p&gt;i have a version of &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;tools&#x2F;#tools-i-have-my-eye-on&quot;&gt;tools i have my eye on&lt;&#x2F;a&gt; for myself that i keep regularly updated. i will probably not keep this public copy updated, unless i find a tool that&#x27;s sufficiently good i want to tell people about it.&lt;&#x2F;p&gt;
&lt;p&gt;i&#x27;m always on the lookout for more useful tools. if you have a tool you use regularly that&#x27;s not on this list (and not specific to a single language ecosystem), please &lt;a href=&quot;mailto:blog@jyn.dev&quot;&gt;let me know&lt;&#x2F;a&gt;. the one exception is containerization software. i am interested in tools to &lt;em&gt;interact&lt;&#x2F;em&gt; with containers, but at this time i am not looking for more container hosts (podman, kubernetes, vagrant, lxc, systemd-nspawn, firejail, chroot, etc).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tools-i-use&quot;&gt;tools i use&lt;a class=&quot;zola-anchor&quot; href=&quot;#tools-i-use&quot; aria-label=&quot;Anchor link for: tools-i-use&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;basics&quot;&gt;basics&lt;a class=&quot;zola-anchor&quot; href=&quot;#basics&quot; aria-label=&quot;Anchor link for: basics&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;you have probably seen someone else recommend these tools. it&#x27;s not just hype. they are useful.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;ripgrep&lt;&#x2F;a&gt;: file contents searching&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sharkdp&#x2F;fd&quot;&gt;fd&lt;&#x2F;a&gt;: file name searching&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jqlang.org&#x2F;&quot;&gt;jq&lt;&#x2F;a&gt;: json processing. note that most data formats can be converted to json, which i recommend over &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mikefarah&#x2F;yq&quot;&gt;yq&lt;&#x2F;a&gt; or other format-specific filtering tools; the exception is XML and things isomorphic to it, which &lt;a href=&quot;https:&#x2F;&#x2F;fwslc.blogspot.com&#x2F;2014&#x2F;10&#x2F;json-m.html&quot;&gt;cannot be represented in json with fidelity&lt;&#x2F;a&gt;. i tried a rewrite, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;01mf02&#x2F;jaq&quot;&gt;jaq&lt;&#x2F;a&gt;, that promised to be faster, but it had fewer features and it turns out that i rarely care about the speed of jq.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man1&#x2F;killall.1.html&quot;&gt;&lt;code&gt;killall&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: kill matching processes&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;1&#x2F;pkill&quot;&gt;&lt;code&gt;pkill&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: kill specific matching process&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;shell&quot;&gt;shell&lt;a class=&quot;zola-anchor&quot; href=&quot;#shell&quot; aria-label=&quot;Anchor link for: shell&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.jade.fyi&#x2F;zsh&#x2F;zsh.html#Introduction-1&quot;&gt;zsh&lt;&#x2F;a&gt;. i cannot in good conscience recommend this to anyone else; most people will be better served by &lt;a href=&quot;https:&#x2F;&#x2F;fishshell.com&#x2F;&quot;&gt;fish&lt;&#x2F;a&gt;. i just have sunk cost from learning entirely too much bash syntax in my misspent youth.&lt;&#x2F;p&gt;
&lt;p&gt;i tried &lt;a href=&quot;https:&#x2F;&#x2F;xon.sh&#x2F;&quot;&gt;xonsh&lt;&#x2F;a&gt; and was annoyed by how poorly python variables interact with regular shell variables.&lt;&#x2F;p&gt;
&lt;p&gt;i was very pleasantly surprised by &lt;a href=&quot;https:&#x2F;&#x2F;learn.microsoft.com&#x2F;en-us&#x2F;powershell&#x2F;&quot;&gt;powershell&lt;&#x2F;a&gt;, which it turns out runs on linux these days. it has actual data types instead of just strings, which means you aren&#x27;t constantly doing string munging in a language not designed for it. i would probably use it interactively if i were willing to give up my sunk cost on bash syntax.&lt;&#x2F;p&gt;
&lt;p&gt;i tried &lt;a href=&quot;https:&#x2F;&#x2F;www.nushell.sh&#x2F;&quot;&gt;nushell&lt;&#x2F;a&gt;, which is like powershell but not made by microsoft and without the .NET integration. i found it extremely verbose - it&#x27;s a good scripting language but not a good interactive shell. also it breaks a bunch of bash syntax for no reason, even when the syntax is unambiguous. (much of bash&#x27;s syntax &lt;em&gt;is&lt;&#x2F;em&gt; ambiguous and i can forgive breaking that.)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;editor&quot;&gt;editor&lt;a class=&quot;zola-anchor&quot; href=&quot;#editor&quot; aria-label=&quot;Anchor link for: editor&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;i use &lt;a href=&quot;https:&#x2F;&#x2F;neovim.io&#x2F;&quot;&gt;neovim&lt;&#x2F;a&gt; with a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;config&#x2F;nvim.lua&quot;&gt;truly absurd amount of custom configuration&lt;&#x2F;a&gt;. i cannot in good conscience recommend this to anyone else; most people will be better served by vscode and a few plugins.&lt;&#x2F;p&gt;
&lt;p&gt;i tried various other editors and was disappointed by all of them. &lt;code&gt;kakoune&lt;&#x2F;code&gt; required more configuration than i was willing to put in to just to get a &quot;basic&quot; experience. &lt;code&gt;helix&lt;&#x2F;code&gt; was extraordinarily resistant to being configured past very basic key remapping (for a while i forked it, but this didn&#x27;t scale very well for the amount of configuration i wanted). VSCode dropped keystrokes and was generally laggy, both of which got worse when i installed a vim plugin. &lt;code&gt;zed&lt;&#x2F;code&gt; had various issues with the integrated terminal and window management (although this may have changed since i tried it in mid-2024). i have not tried &lt;code&gt;emacs&lt;&#x2F;code&gt; and dread the day i do because it will probably suck up weeks of my time.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;terminal-multiplexing&quot;&gt;terminal multiplexing&lt;a class=&quot;zola-anchor&quot; href=&quot;#terminal-multiplexing&quot; aria-label=&quot;Anchor link for: terminal-multiplexing&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;i use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;tmux&#x2F;tree&#x2F;working&quot;&gt;a fork&lt;&#x2F;a&gt; of tmux with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;config&#x2F;tmux.conf&quot;&gt;more absurd amounts of configuration&lt;&#x2F;a&gt;. again, i cannot in good conscience recommend this to anyone else. most people will be better served by the integrated terminal in vscode (i spent a couple weeks on trying to get back ctrl-click for filepaths alone). vscode also works on windows MSVC, unlike terminal multiplexers.&lt;&#x2F;p&gt;
&lt;p&gt;various people have recommended &lt;a href=&quot;https:&#x2F;&#x2F;zellij.dev&#x2F;&quot;&gt;zellij&lt;&#x2F;a&gt; to me. i think zellij is good if you like the default keybinds, or if you use a terminal multiplexer infrequently enough that having the basic commands on-screen is helpful for you. i found that the default keybinds interfered with a bunch of programs and didn&#x27;t look further into it.&lt;&#x2F;p&gt;
&lt;p&gt;wezterm and kitty are not really in the running because they don&#x27;t have session save&#x2F;resume.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;debugging&quot;&gt;debugging&lt;a class=&quot;zola-anchor&quot; href=&quot;#debugging&quot; aria-label=&quot;Anchor link for: debugging&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.jade.fyi&#x2F;zsh&#x2F;zsh.html#index-XTRACE&quot;&gt;&lt;code&gt;set -x&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: trace shell programs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&#x2F;Git-Internals-Environment-Variables#_debugging&quot;&gt;&lt;code&gt;GIT_TRACE&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: trace git commands&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;strace.io&#x2F;&quot;&gt;strace&lt;&#x2F;a&gt;: trace system calls. this doesn&#x27;t exist on macOS; it has a counterpart, dtruss, which &lt;a href=&quot;https:&#x2F;&#x2F;poweruser.blog&#x2F;using-dtrace-with-sip-enabled-3826a352e64b&quot;&gt;kinda sorta mostly works&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rr-project.org&#x2F;&quot;&gt;rr&lt;&#x2F;a&gt;: time travel debugging. this doesn&#x27;t exist on macOS; if you know a counterpart &lt;em&gt;please&lt;&#x2F;em&gt; &lt;a href=&quot;mailto:blog@jyn.dev&quot;&gt;let me know&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;c-c-tools&quot;&gt;C&#x2F;C++ tools&lt;a class=&quot;zola-anchor&quot; href=&quot;#c-c-tools&quot; aria-label=&quot;Anchor link for: c-c-tools&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;for cmake projects: &lt;a href=&quot;https:&#x2F;&#x2F;cmake.org&#x2F;cmake&#x2F;help&#x2F;latest&#x2F;manual&#x2F;cmake.1.html#cmdoption-cmake-G&quot;&gt;&lt;code&gt;cmake -G Ninja&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. uses &lt;a href=&quot;https:&#x2F;&#x2F;ninja-build.org&#x2F;manual.html#_comparison_to_make&quot;&gt;&lt;code&gt;ninja&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; instead of &lt;code&gt;make&lt;&#x2F;code&gt;, improving compile times and with a much nicer progress bar.&lt;&#x2F;li&gt;
&lt;li&gt;for cmake projects: &lt;a href=&quot;https:&#x2F;&#x2F;cmake.org&#x2F;cmake&#x2F;help&#x2F;latest&#x2F;variable&#x2F;CMAKE_EXPORT_COMPILE_COMMANDS.html&quot;&gt;&lt;code&gt;cmake -D CMAKE_EXPORT_COMPILE_COMMANDS=On&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Generates a &lt;code&gt;compile_commands.json&lt;&#x2F;code&gt; file that most LSPs know how to read.&lt;&#x2F;li&gt;
&lt;li&gt;for everything else: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rizsotto&#x2F;Bear&quot;&gt;&lt;code&gt;bear&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. like above, but works for arbitrary build systems.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;rust-tools&quot;&gt;rust tools&lt;a class=&quot;zola-anchor&quot; href=&quot;#rust-tools&quot; aria-label=&quot;Anchor link for: rust-tools&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Canop&#x2F;bacon&#x2F;&quot;&gt;&lt;code&gt;bacon&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: background code checker&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;commands&#x2F;cargo-tree.html#tree-options&quot;&gt;&lt;code&gt;cargo tree -i&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: figure out why a package was built&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.crates.io&#x2F;contrib&#x2F;implementation&#x2F;debugging.html#logging&quot;&gt;&lt;code&gt;CARGO_LOG&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: trace &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;&quot;&gt;&lt;code&gt;cargo&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; commands&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;tracing.html&quot;&gt;&lt;code&gt;RUSTC_LOG&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: trace &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;&quot;&gt;&lt;code&gt;rustc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; commands&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo-bisect-rustc&quot;&gt;&lt;code&gt;cargo bisect-rustc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: figure out when a compiler regression happened&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;everything-else&quot;&gt;&quot;everything else&quot;&lt;a class=&quot;zola-anchor&quot; href=&quot;#everything-else&quot; aria-label=&quot;Anchor link for: everything-else&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;watchexec&#x2F;watchexec&#x2F;&quot;&gt;&lt;code&gt;watchexec&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: bacon but generalized to arbitrary files and commands. i find this quite useful for a variety of tasks, including minimizing bugs.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aristocratos&#x2F;btop&quot;&gt;btop&lt;&#x2F;a&gt;: like top but easier to use and easier to understand the output&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tailscale.com&#x2F;&quot;&gt;tailscale&lt;&#x2F;a&gt;: software-defined networking. i mainly use it for easy NAT punching and DDNS, but it&#x27;s much more flexible than that.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;obsidian.md&#x2F;&quot;&gt;obsidian&lt;&#x2F;a&gt;: flexible and pretty markdown editor. i use it for journaling and drafting blog posts. &lt;a href=&quot;https:&#x2F;&#x2F;obsidian.md&#x2F;sync&quot;&gt;obsidian sync&lt;&#x2F;a&gt; is not required but &quot;just works&quot; and makes it much more convenient; it&#x27;s nice to have access to the same files everywhere.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;URI&#x2F;Reference&#x2F;Fragment&#x2F;Text_fragments&quot;&gt;&lt;code&gt;#:~:text=xyz&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: link to specifically the text &quot;xyz&quot; on a web page. works in firefox since around the end of 2024, and in chrome since a lot earlier.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tools-i-have-my-eye-on&quot;&gt;tools i have my eye on&lt;a class=&quot;zola-anchor&quot; href=&quot;#tools-i-have-my-eye-on&quot; aria-label=&quot;Anchor link for: tools-i-have-my-eye-on&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;i either use these occasionally enough i need a reference, or haven&#x27;t used them yet but want to.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;debugging-1&quot;&gt;debugging&lt;a class=&quot;zola-anchor&quot; href=&quot;#debugging-1&quot; aria-label=&quot;Anchor link for: debugging-1&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man1&#x2F;strace.1.html#:~:text=y,decode-fds&quot;&gt;&lt;code&gt;strace -y&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: show absolute paths&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man1&#x2F;strace.1.html#:~:text=summary-only&quot;&gt;&lt;code&gt;strace -c&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: show performance stats&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;elf-info&quot;&gt;&lt;code&gt;elf-info&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: ELF inspector&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;binsider.dev&#x2F;blog&#x2F;v020&#x2F;&quot;&gt;&lt;code&gt;binsider&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: another ELF inspector&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;zordoz&#x2F;index.html&quot;&gt;&lt;code&gt;zordoz&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: racket decompiler&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dnSpyEx&#x2F;dnSpy&quot;&gt;&lt;code&gt;dnSpyEx&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: .NET disassembler&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Syllo&#x2F;nvtop&quot;&gt;&lt;code&gt;nvtop&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: gpu monitoring&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;1&#x2F;xdpyinfo&quot;&gt;&lt;code&gt;xdpyinfo&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: X11 debugging&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;operating-systems&quot;&gt;operating systems&lt;a class=&quot;zola-anchor&quot; href=&quot;#operating-systems&quot; aria-label=&quot;Anchor link for: operating-systems&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pop-os&#x2F;launcher&#x2F;blob&#x2F;master&#x2F;plugins&#x2F;src&#x2F;web&#x2F;config.ron&quot;&gt;popos launcher config&lt;&#x2F;a&gt;, since i couldn&#x27;t find docs for it (local copy in &lt;code&gt;&#x2F;usr&#x2F;lib&#x2F;pop-launcher&#x2F;plugins&#x2F;web&#x2F;config.ron&lt;&#x2F;code&gt;). this is what runs custom searches when you hit Super-R on PopOS 22.04.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;uobikiemukot&#x2F;yaft?tab=readme-ov-file&quot;&gt;yaft&lt;&#x2F;a&gt;: linux framebuffer terminal&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kellyjonbrazil&#x2F;jc&quot;&gt;jc&lt;&#x2F;a&gt;: structured parsing for unix tools&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.fedoraproject.org&#x2F;en-US&#x2F;quick-docs&#x2F;cups-debug-scanning-issues&#x2F;&quot;&gt;CUPS debugging&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;yggdrasil-network.github.io&#x2F;about.html&quot;&gt;yggrasil-network&lt;&#x2F;a&gt;: &quot;ipv6 for everyone&quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;containers&quot;&gt;containers&lt;a class=&quot;zola-anchor&quot; href=&quot;#containers&quot; aria-label=&quot;Anchor link for: containers&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;containers&#x2F;bubblewrap&quot;&gt;bubblewrap&lt;&#x2F;a&gt;: flexible adhoc sandboxing&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Mic92&#x2F;cntr&quot;&gt;cntr&lt;&#x2F;a&gt;: overlayfs that works with a running container&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;development&quot;&gt;development&lt;a class=&quot;zola-anchor&quot; href=&quot;#development&quot; aria-label=&quot;Anchor link for: development&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cargo-bounds&quot;&gt;&lt;code&gt;cargo-bounds&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: check your crate semver bounds are correct&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;victoriametrics.com&#x2F;products&#x2F;victorialogs&#x2F;&quot;&gt;VictoriaLogs&lt;&#x2F;a&gt;: structured database for logs&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cron.help&#x2F;&quot;&gt;cron.help&lt;&#x2F;a&gt;: crontab reference&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hurl.dev&quot;&gt;hurl.dev&lt;&#x2F;a&gt;: HTTP test assertion framework
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;riposte&#x2F;&quot;&gt;riposte&lt;&#x2F;a&gt;: similar for &lt;a href=&quot;https:&#x2F;&#x2F;racket-lang.org&#x2F;&quot;&gt;racket&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rosie-lang.org&#x2F;&quot;&gt;rosie-lang&lt;&#x2F;a&gt;: maintainable, composable regexes. really these are PEG parsers but they are designed to look similar to regex.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;brushtechnology&#x2F;fabricate&quot;&gt;fabricate&lt;&#x2F;a&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;gittup.org&#x2F;tup&#x2F;&quot;&gt;tup&lt;&#x2F;a&gt; but python&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spoofax.dev&#x2F;&quot;&gt;spoofax&lt;&#x2F;a&gt;: dsl builder&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ericsson&#x2F;codechecker&quot;&gt;codechecker&lt;&#x2F;a&gt;: advanced static analysis for c&#x2F;c++&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;google.github.io&#x2F;zx&#x2F;getting-started&quot;&gt;zx&lt;&#x2F;a&gt;: terse process spawning in js&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jsonnet.org&quot;&gt;jsonnet&lt;&#x2F;a&gt;: like &lt;a href=&quot;https:&#x2F;&#x2F;dhall-lang.org&#x2F;&quot;&gt;dhall&lt;&#x2F;a&gt; but lua-coded instead of haskell-coded&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sql.datapage.app&#x2F;&quot;&gt;generate a webpage from an sql query&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;editing-and-diffing&quot;&gt;editing and diffing&lt;a class=&quot;zola-anchor&quot; href=&quot;#editing-and-diffing&quot; aria-label=&quot;Anchor link for: editing-and-diffing&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ast-grep.github.io&#x2F;&quot;&gt;ast-grep&lt;&#x2F;a&gt;. language-aware structured search and replace.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;diffoscope.org&#x2F;&quot;&gt;diffoscope&lt;&#x2F;a&gt;: recursive diffing&lt;&#x2F;li&gt;
&lt;li&gt;fix tabs and spaces: &lt;code&gt;unexpand -t 4 foo.c | sponge foo.c&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;graphics&quot;&gt;graphics&lt;a class=&quot;zola-anchor&quot; href=&quot;#graphics&quot; aria-label=&quot;Anchor link for: graphics&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;typst.app&#x2F;&quot;&gt;typst&lt;&#x2F;a&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;www.latex-project.org&#x2F;&quot;&gt;latex&lt;&#x2F;a&gt; but not evil&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;excalidraw.com&#x2F;&quot;&gt;excalidraw&lt;&#x2F;a&gt;: online diagram editor&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Aloxaf&#x2F;silicon&quot;&gt;silicon&lt;&#x2F;a&gt;: pretty screenshots of source code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;benchmarking&quot;&gt;benchmarking&lt;a class=&quot;zola-anchor&quot; href=&quot;#benchmarking&quot; aria-label=&quot;Anchor link for: benchmarking&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;andrewrk&#x2F;poop&quot;&gt;&lt;code&gt;poop&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sharkdp&#x2F;hyperfine&quot;&gt;hyperfine&lt;&#x2F;a&gt; but also reports memory usage&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sharkdp&#x2F;hyperfine#parameterized-benchmarks&quot;&gt;&lt;code&gt;hyperfine --parameter-list&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: parameterized benchmarking&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man1&#x2F;strace.1.html#:~:text=summary-wall-clock&quot;&gt;&lt;code&gt;strace -wc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: measure syscall timing&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man1&#x2F;ltrace.1.html#:~:text=count%20time&quot;&gt;&lt;code&gt;ltrace -c&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: measure library call timing&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;1&#x2F;x11perf&quot;&gt;&lt;code&gt;x11perf&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: X11 performance testing&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;manpages.debian.org&#x2F;testing&#x2F;freetype2-demos&#x2F;ftbench.1.en.html&quot;&gt;&lt;code&gt;ftbench&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: font performance testing&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;ts#i&quot;&gt;&lt;code&gt;ts -i&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: show the elapsed time between each line of output in a pipe. useful with &lt;code&gt;bash -x&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.jade.fyi&#x2F;zsh&#x2F;zsh.html#The-zsh_002fzprof-Module&quot;&gt;&lt;code&gt;zmodload zsh&#x2F;zprof; zprof&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: benchmark zsh startup&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Terrible Horrible No Good Very Bad Python</title>
        <published>2025-03-28T00:00:00+00:00</published>
        <updated>2025-03-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/terrible-horrible-no-good-very-bad-python/"/>
        <id>https://jyn.dev/terrible-horrible-no-good-very-bad-python/</id>
        
        <content type="html" xml:base="https://jyn.dev/terrible-horrible-no-good-very-bad-python/">&lt;p&gt;time for everyone&#x27;s favorite game!!&lt;&#x2F;p&gt;
&lt;p&gt;what does this code do?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;foo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;  &lt;span class=&quot;z-meta z-statement z-exception z-try z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-exception z-try z-python&quot;&gt;try&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-exception z-try z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-flow z-return z-python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;os&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;_exit&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;  &lt;span class=&quot;z-meta z-statement z-exception z-finally z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-exception z-finally z-python&quot;&gt;finally&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-block z-exception z-finally z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-flow z-return z-python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-python&quot;&gt;False&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-python&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;os&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;foo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;style type=&quot;text&#x2F;css&quot;&gt;
    ol { list-style-type: upper-alpha; }
&lt;&#x2F;style&gt;
&lt;p&gt;does it:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;return None&lt;&#x2F;li&gt;
&lt;li&gt;return False&lt;&#x2F;li&gt;
&lt;li&gt;throw an exception&lt;&#x2F;li&gt;
&lt;li&gt;exit the process without printing anything&lt;&#x2F;li&gt;
&lt;li&gt;something even more devious&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;sit with it. have a good think. explain your answers.&lt;&#x2F;p&gt;
&lt;p&gt;ready?&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;ok fine what does it do&lt;&#x2F;summary&gt;
&lt;p&gt;returns &lt;code&gt;False&lt;&#x2F;code&gt;. want to know why?&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;yes just tell me already &gt;:(&lt;&#x2F;summary&gt;
&lt;p&gt;normally, &lt;code&gt;os._exit&lt;&#x2F;code&gt; exits the process without running &quot;cleanup handlers&quot; (&lt;code&gt;finally&lt;&#x2F;code&gt; blocks). however, it takes one argument. this snippet forgets to pass in the exit code, so instead of exiting, it throws &lt;code&gt;TypeError&lt;&#x2F;code&gt;. then the &lt;code&gt;finally&lt;&#x2F;code&gt; block silently swallows the exception because of the &lt;code&gt;return&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;return&lt;&#x2F;code&gt; from a &lt;code&gt;finally&lt;&#x2F;code&gt; block is in fact so commonly misused that the python developers &lt;a href=&quot;https:&#x2F;&#x2F;discuss.python.org&#x2F;t&#x2F;pep-765-disallow-return-break-continue-that-exit-a-finally-block&#x2F;71348&quot;&gt;plan&lt;&#x2F;a&gt; to make it emit a &lt;code&gt;SyntaxWarning&lt;&#x2F;code&gt; in a future release.&lt;&#x2F;p&gt;
&lt;p&gt;one might be mislead that &lt;code&gt;import os&lt;&#x2F;code&gt; comes after the function is defined. but python has dynamic scoping, so that&#x27;s fine.&lt;&#x2F;p&gt;
&lt;p&gt;one might also mix up &lt;code&gt;sys.exit&lt;&#x2F;code&gt; with &lt;code&gt;os._exit&lt;&#x2F;code&gt;. &lt;code&gt;sys.exit&lt;&#x2F;code&gt; works by raising a &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;exceptions.html#SystemExit&quot;&gt;&lt;code&gt;SystemExit&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; exception, which would be caught and swallowed by the &lt;code&gt;finally&lt;&#x2F;code&gt; block. but &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;os.html#os._exit&quot;&gt;&lt;code&gt;_exit&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; directly exits the process:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Exit the process with status n, without calling cleanup handlers, flushing stdio buffers, etc.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;in fact, it doesn&#x27;t even call atexit handlers, not even if we directly use libc:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import atexit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; atexit.register(lambda: print(&amp;#39;hi&amp;#39;))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;lt;function &amp;lt;lambda&amp;gt; at 0x73c740cf2830&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from ctypes import *
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; libc = cdll.LoadLibrary(&amp;quot;libc.so.6&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; libc.on_exit(CFUNCTYPE(c_int, c_voidp)(lambda status, _: print(status)))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; os._exit(1)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# no output
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;yes someone did write this code by accident and yes they were very confused. i thought it was a bug in cpython until i figured it out.&lt;&#x2F;p&gt;
&lt;p&gt;you&#x27;re welcome!!&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Scheduling Do-Not-Disturb in GNOME</title>
        <published>2025-02-22T00:00:00+00:00</published>
        <updated>2025-02-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/do-not-disturb-in-gnome/"/>
        <id>https://jyn.dev/do-not-disturb-in-gnome/</id>
        
        <content type="html" xml:base="https://jyn.dev/do-not-disturb-in-gnome/">&lt;h2 id=&quot;do-not-disturb&quot;&gt;Do Not Disturb&lt;a class=&quot;zola-anchor&quot; href=&quot;#do-not-disturb&quot; aria-label=&quot;Anchor link for: do-not-disturb&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;GNOME has a little button that lets you turn on Do-Not-Disturb for notifications:&lt;&#x2F;p&gt;
&lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;Pasted image 20250222135047.png&quot;
	 alt=&quot;Gnome notifications menu&quot;
	
&gt;
&lt;p&gt;Unfortunately, it has &lt;a href=&quot;https:&#x2F;&#x2F;gitlab.gnome.org&#x2F;GNOME&#x2F;gnome-control-center&#x2F;-&#x2F;issues&#x2F;2200&quot;&gt;no way of scheduling DnD&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Good news, though! It does support turning on DnD through the CLI: &lt;code&gt;gsettings set org.gnome.desktop.notifications show-banners false&lt;&#x2F;code&gt;. I put that in a script named &lt;code&gt;toggle-dnd&lt;&#x2F;code&gt; in my dotfiles:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cat bin&#x2F;toggle-dnd&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;!&#x2F;bin&#x2F;sh&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-control z-conditional z-case z-shell&quot;&gt;case&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;:-&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-in z-shell&quot;&gt;in&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-shell&quot;&gt;	&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; &amp;quot;show-banners&amp;quot; is reversed from what you would expect &amp;quot;do not disturb&amp;quot; to mean&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-shell&quot;&gt;	&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;true&lt;span class=&quot;z-meta z-conditional z-case z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-control z-conditional z-patterns z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;new&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;false&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-terminator z-case z-clause z-shell&quot;&gt;;;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;	&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;false&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-control z-conditional z-patterns z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;new&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;true&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-terminator z-case z-clause z-shell&quot;&gt;;;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;	&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-control z-conditional z-patterns z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt;	&lt;span class=&quot;z-keyword z-control z-conditional z-if z-shell&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-function z-test z-begin z-shell&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-command z-parens z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gsettings&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; get org.gnome.desktop.notifications show-banners&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-shell&quot;&gt;=&lt;&#x2F;span&gt; true &lt;span class=&quot;z-support z-function z-test z-end z-shell&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt;		&lt;span class=&quot;z-keyword z-control z-conditional z-then z-shell&quot;&gt;then&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;new&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;false&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt;		&lt;span class=&quot;z-keyword z-control z-conditional z-else z-shell&quot;&gt;else&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;new&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;true&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt;	&lt;span class=&quot;z-keyword z-control z-conditional z-end z-shell&quot;&gt;fi&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt;	&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-terminator z-case z-clause z-shell&quot;&gt;;;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-control z-conditional z-end z-shell&quot;&gt;esac&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gsettings&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; set org.gnome.desktop.notifications show-banners &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;new&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;scheduling&quot;&gt;scheduling&lt;a class=&quot;zola-anchor&quot; href=&quot;#scheduling&quot; aria-label=&quot;Anchor link for: scheduling&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I tried putting that in cron&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-1-1&quot;&gt;&lt;a href=&quot;#fn-1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, had a sneaking suspicion it wouldn&#x27;t work, set it to run every minute, and saw this very unhelpful line of logging:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; class=&quot;language-console z-code&quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;journalctl&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;unit&lt;&#x2F;span&gt; cron&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;since&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;5m ago&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;Feb 22 12:00:01 pop-os CRON[1623131]: (CRON) info (No MTA installed, discarding output)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, fine. Let&#x27;s pipe the output to the system log&lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-2-1&quot;&gt;&lt;a href=&quot;#fn-2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, since clearly cron can&#x27;t handle that itself.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;crontab&quot; class=&quot;language-crontab z-code&quot;&gt;&lt;code class=&quot;language-crontab&quot; data-lang=&quot;crontab&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;* * * * * bash -lc &amp;#39;org.gnome.desktop.notifications show-banners false 2&amp;gt;&amp;amp;1 | logger -t toggle-dnd&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That at least shows more useful output.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; class=&quot;language-console z-code&quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;journalctl&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;t&lt;&#x2F;span&gt; toggle-dnd&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;Feb 22 05:59:01 pop-os toggle-dnd[1376772]: &#x2F;bin&#x2F;sh: 1: toggle-dnd: not found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh right. Cron is running things with a default PATH. Technically there are ways to configure this &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-3-1&quot;&gt;&lt;a href=&quot;#fn-3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, but the simple solution is just to run a bash login shell which sources all the directories i would normally have in a shell. at this point, however, it is getting somewhat annoying to test via cron, so let&#x27;s replicate cron&#x27;s environment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; class=&quot;language-console z-code&quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;env&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;i&lt;&#x2F;span&gt; HOME=&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;HOME&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; TERM=&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;TERM&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; PS1=&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;$ &lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; HISTSIZE=-1 HISTFILE= bash&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;norc&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;noprofile&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-echo z-shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;bash&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;l&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-echo z-shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&#x2F;home&#x2F;jyn&#x2F;Documents&#x2F;node-v20.12.2-linux-x64&#x2F;bin:&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;bin:&#x2F;home&#x2F;jyn&#x2F;src&#x2F;dotfiles&#x2F;bin:&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;cargo&#x2F;bin:&#x2F;snap&#x2F;bin:&#x2F;usr&#x2F;games:&#x2F;home&#x2F;jyn&#x2F;perl5&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;snap&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;neat. let&#x27;s run  make sure our command runs.
before:&lt;&#x2F;p&gt;
&lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;Pasted image 20250222141930.png&quot;
	 alt=&quot;Left side of the Gnome topbar&quot;
	
&gt;
&lt;p&gt;after running &lt;code&gt;toggle-dnd&lt;&#x2F;code&gt; in our login shell:&lt;&#x2F;p&gt;
&lt;img src=&quot;&amp;#x2F;assets&amp;#x2F;Pasted image 20250222141930.png&quot;
	 alt=&quot;Still the left side of the gnome topbar. In fact this is the exact same image as before.&quot;
	
&gt;
&lt;p&gt;... nothing happened.
we can confirm this on the CLI:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; class=&quot;language-console z-code&quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gsettings&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; get org.gnome.desktop.notifications show-banners&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gsettings&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; set org.gnome.desktop.notifications show-banners false&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gsettings&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; get org.gnome.desktop.notifications show-banners&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;dbus&quot;&gt;DBUS&lt;a class=&quot;zola-anchor&quot; href=&quot;#dbus&quot; aria-label=&quot;Anchor link for: dbus&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;at this point i started to get annoyed and ran &lt;code&gt;systemctl --user status&lt;&#x2F;code&gt; in hopes of writing a systemd timer instead. fortunately, i did that inside the bash login shell, which gave me this helpful error message:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; class=&quot;language-console z-code&quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;user&lt;&#x2F;span&gt; status&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;Failed to connect to bus: $DBUS_SESSION_BUS_ADDRESS and $XDG_RUNTIME_DIR not defined (consider using --machine=&amp;lt;user&amp;gt;@.host --user to connect to bus of other user)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It turns out that both &lt;code&gt;gsettings&lt;&#x2F;code&gt; and &lt;code&gt;systemctl&lt;&#x2F;code&gt; are trying to communicate over DBUS, and DBUS is linked to your &quot;user session&quot;, set when you login. Unsetting environment variables disables DBUS &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-4-1&quot;&gt;&lt;a href=&quot;#fn-4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I found a helpful &lt;a href=&quot;https:&#x2F;&#x2F;askubuntu.com&#x2F;a&#x2F;1468012&quot;&gt;stackoverflow post&lt;&#x2F;a&gt; that helps us reconnect to DBUS &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-5-1&quot;&gt;&lt;a href=&quot;#fn-5&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-shell&quot;&gt;export&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;XDG_RUNTIME_DIR&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&#x2F;run&#x2F;user&#x2F;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;UID&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-shell&quot;&gt;export&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;DBUS_SESSION_BUS_ADDRESS&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;unix:path=&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;XDG_RUNTIME_DIR&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;bus&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s write a little abstraction for that, too &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-6-1&quot;&gt;&lt;a href=&quot;#fn-6&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;!&#x2F;usr&#x2F;bin&#x2F;env bash&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; Run a command in an environment where DBUS commands (e.g. `systemd --user`, `gsettings`) are available&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-colon z-shell&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;XDG_RUNTIME_DIR&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;:=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&#x2F;run&#x2F;user&#x2F;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;UID&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-colon z-shell&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;DBUS_SESSION_BUS_ADDRESS&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;:=&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;unix:path=&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;XDG_RUNTIME_DIR&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;bus&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-expansion z-parameter z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-shell&quot;&gt;export&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;XDG_RUNTIME_DIR&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;DBUS_SESSION_BUS_ADDRESS&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-exec z-shell&quot;&gt;exec&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-shell&quot;&gt;@&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, finally, we can put the pieces together:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; class=&quot;language-console z-code&quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;crontab&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;l&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;0 20 * * * bash -lc &amp;#39;dbus-run-user toggle-dnd true  2&amp;gt;&amp;amp;1 | logger -t toggle-dnd&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;0 8  * * * bash -lc &amp;#39;dbus-run-user toggle-dnd false 2&amp;gt;&amp;amp;1 | logger -t toggle-dnd&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;p-s&quot;&gt;P.S.&lt;a class=&quot;zola-anchor&quot; href=&quot;#p-s&quot; aria-label=&quot;Anchor link for: p-s&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;x11&quot;&gt;X11&lt;a class=&quot;zola-anchor&quot; href=&quot;#x11&quot; aria-label=&quot;Anchor link for: x11&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;just setting up DBUS doesn&#x27;t set up our X11 environment again. I didn&#x27;t happen to need that. but now that we have DBUS, you can retrieve it pretty easily:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;console&quot; class=&quot;language-console z-code&quot;&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;$&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;dbus-run-user&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; systemctl&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;user&lt;&#x2F;span&gt; show-environment&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;grep&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; ^DISPLAY&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-console&quot;&gt;DISPLAY=:1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can do something similar for &lt;code&gt;XAUTHORITY&lt;&#x2F;code&gt;, &lt;code&gt;TMUX*&lt;&#x2F;code&gt;, and &lt;code&gt;XDG_*&lt;&#x2F;code&gt; environment variables. Note that &lt;code&gt;systemctl --user&lt;&#x2F;code&gt; may be using a tmux session or pane that no longer exists; use caution.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;why-were-you-doing-this-in-the-first-place&quot;&gt;why were you doing this in the first place&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-were-you-doing-this-in-the-first-place&quot; aria-label=&quot;Anchor link for: why-were-you-doing-this-in-the-first-place&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;hahahaha so i had the foolish idea that this would get discord to silence notifications at night. &lt;a href=&quot;https:&#x2F;&#x2F;support.discord.com&#x2F;hc&#x2F;en&#x2F;community&#x2F;posts&#x2F;22549582088343-Respect-desktop-s-Do-Not-Disturb-mode-for-desktop-notifications&quot;&gt;it does not do that&lt;&#x2F;a&gt;. i ended up just turning off desktop notification sounds altogether.&lt;&#x2F;p&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-1&quot;&gt;
&lt;p&gt;&quot;why not a systemd user timer&quot; because i don&#x27;t know a helper that lets you write the timer schedule interactively, the way that &lt;a href=&quot;https:&#x2F;&#x2F;cron.help&#x2F;&quot;&gt;https:&#x2F;&#x2F;cron.help&#x2F;&lt;&#x2F;a&gt; works for crontabs, and because systemd&#x27;s documentation is smeared across a ton of different man pages. cron is just &lt;code&gt;crontab -e&lt;&#x2F;code&gt;. &lt;a href=&quot;#fr-1-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-2&quot;&gt;
&lt;p&gt;&quot;why not set cron to automatically write output to the system log&quot; hahahahaha there&#x27;s no way to do that. unless you&#x27;re using specifically &lt;a href=&quot;https:&#x2F;&#x2F;man.archlinux.org&#x2F;man&#x2F;extra&#x2F;cronie&#x2F;cron.8.en#OPTIONS&quot;&gt;&lt;code&gt;cronie&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which isn&#x27;t packaged in Ubuntu 22.04. &lt;a href=&quot;#fr-2-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-3&quot;&gt;
&lt;p&gt;see &lt;a href=&quot;https:&#x2F;&#x2F;manpages.ubuntu.com&#x2F;manpages&#x2F;trusty&#x2F;man5&#x2F;crontab.5.html&quot;&gt;&lt;code&gt;man 5 crontab&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;; also this differs depending which version of cron you have installed. this link for instance does not match the man page i have installed locally for &lt;code&gt;man 5 crontab&lt;&#x2F;code&gt;. &lt;a href=&quot;#fr-3-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-4&quot;&gt;
&lt;p&gt;it&#x27;s almost like &lt;a href=&quot;https:&#x2F;&#x2F;blog.sunfishcode.online&#x2F;no-ghosts&#x2F;&quot;&gt;using environment variables to communicate data through a system is a bad idea&lt;&#x2F;a&gt;! &lt;a href=&quot;#fr-4-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-5&quot;&gt;
&lt;p&gt;note that recommends using &lt;code&gt;machinectl&lt;&#x2F;code&gt; or &lt;code&gt;systemctl --machine=$USER@localhost --user&lt;&#x2F;code&gt; instead. but both of those don&#x27;t work in this environment: &lt;code&gt;machinectl&lt;&#x2F;code&gt; requires interactive login, and &lt;code&gt;--machine&lt;&#x2F;code&gt; just doesn&#x27;t work at all:
&lt;code&gt;Failed to connect to bus: Host is down&lt;&#x2F;code&gt;
&lt;code&gt;Failed to list units: Transport endpoint is not connected&lt;&#x2F;code&gt; &lt;a href=&quot;#fr-5-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-6&quot;&gt;
&lt;p&gt;This uses bash because that sets &lt;code&gt;$UID&lt;&#x2F;code&gt; for us automatically. Theoretically we could do this with sh and &lt;code&gt;id -u&lt;&#x2F;code&gt;, but it&#x27;s more of a pain than it&#x27;s worth. &lt;a href=&quot;#fr-6-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>building your own <code>rustc_driver</code></title>
        <published>2024-10-24T00:00:00+00:00</published>
        <updated>2024-10-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/rustc-driver/"/>
        <id>https://jyn.dev/rustc-driver/</id>
        
        <content type="html" xml:base="https://jyn.dev/rustc-driver/">&lt;h2 id=&quot;a-deeper-rabbit-hole-than-expected&quot;&gt;a deeper rabbit hole than expected&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-deeper-rabbit-hole-than-expected&quot; aria-label=&quot;Anchor link for: a-deeper-rabbit-hole-than-expected&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;what happens when you run &lt;code&gt;cargo clippy&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;well, we can ask cargo what it does:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ cargo clippy -v
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    Checking example v0.1.0 (&#x2F;home&#x2F;jyn&#x2F;src&#x2F;example)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     Running `&#x2F;home&#x2F;jyn&#x2F;.rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;clippy-driver &#x2F;home&#x2F;jyn&#x2F;.rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;rustc --crate-name example --edition=2021 src&#x2F;main.rs --error-format=json --json=diagnostic-rendered-ansi,artifacts,future-incompat --diagnostic-width=124 --crate-type bin --emit=dep-info,metadata -C embed-bitcode=no -C debuginfo=2 --check-cfg &amp;#39;cfg(docsrs)&amp;#39; --check-cfg &amp;#39;cfg(feature, values())&amp;#39; -C metadata=f3baefdd4f0d88a8 -C extra-filename=-f3baefdd4f0d88a8 --out-dir &#x2F;home&#x2F;jyn&#x2F;.cargo&#x2F;target&#x2F;debug&#x2F;deps -C incremental=&#x2F;home&#x2F;jyn&#x2F;.cargo&#x2F;target&#x2F;debug&#x2F;incremental -L dependency=&#x2F;home&#x2F;jyn&#x2F;.cargo&#x2F;target&#x2F;debug&#x2F;deps`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.67s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;that&#x27;s kinda weird! it&#x27;s running something called &lt;code&gt;clippy-driver&lt;&#x2F;code&gt;? and passing &lt;code&gt;bin&#x2F;rustc&lt;&#x2F;code&gt; as an argument to it? what&#x27;s going on there? is it running any other programs afterwards?&lt;&#x2F;p&gt;
&lt;p&gt;we can find that out too:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; strace -f -e execve cargo clippy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;&lt;summary&gt;all of strace&#x27;s output&lt;&#x2F;summary&gt;
&lt;p&gt;note this is massaged slightly for clarity; the actual command i ran was&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cargo clean; strace -f -e execve,clone3 -s 100 cargo clippy 2&amp;gt;&amp;amp;1 | sed &amp;#39;s&#x2F;Process &#x2F;\nProcess &#x2F;; s&#x2F;execve([^,]*, \([^]]*\).*&#x2F;execve(\1])&#x2F;&amp;#39; | rg -v &amp;#39;resumed&amp;gt;&amp;#39; | rg &amp;#39;(\[pid[^]]*\] )?(execve.*|clone3|Process.*)&amp;#39; -o | sed &amp;#39;s&#x2F;clone3&#x2F;clone3()&#x2F;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;followed by some manual cleanup.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;execve([&amp;quot;cargo&amp;quot;, &amp;quot;clippy&amp;quot;])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;execve([&amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;cargo&amp;quot;, &amp;quot;clippy&amp;quot;])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;execve([&amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;cargo&#x2F;bin&#x2F;cargo-clippy&amp;quot;, &amp;quot;clippy&amp;quot;])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;execve([&amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;cargo-clippy&amp;quot;, &amp;quot;clippy&amp;quot;])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;clone3(): Process 6125 attached
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[pid  6125] execve([&amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;cargo&amp;quot;, &amp;quot;check&amp;quot;])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[pid  6125] clone3(): Process 6126 attached
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[pid  6126] execve([&amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;clippy-driver&amp;quot;, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;rustc&amp;quot;, &amp;quot;-vV&amp;quot;])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[pid  6125] clone3(): Process 6127 attached
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[pid  6127] execve([&amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;clippy-driver&amp;quot;, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;rustc&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;--crate-name&amp;quot;, &amp;quot;___&amp;quot;, &amp;quot;--print=file-names&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;bin&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;rlib&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;dylib&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;cdylib&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;staticlib&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;proc-macro&amp;quot;, &amp;quot;--check-cfg&amp;quot;, &amp;quot;cfg()&amp;quot;])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[pid  6125] clone3(): Process 6129 attached
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[pid  6129] execve([&amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;clippy-driver&amp;quot;, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;rustc&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;--crate-name&amp;quot;, &amp;quot;___&amp;quot;, &amp;quot;--print=file-names&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;bin&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;rlib&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;dylib&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;cdylib&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;staticlib&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;proc-macro&amp;quot;, &amp;quot;--print=sysroot&amp;quot;, &amp;quot;--print=split-debuginfo&amp;quot;, &amp;quot;--print=crate-name&amp;quot;, &amp;quot;--print=cfg&amp;quot;])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[pid  6125] clone3(): Process 6131 attached
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[pid  6131] execve([&amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;clippy-driver&amp;quot;, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;rustc&amp;quot;, &amp;quot;-vV&amp;quot;])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[pid  6125] clone3(): Process 6134 attached
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;[pid  6134] execve([&amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;clippy-driver&amp;quot;, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;rustc&amp;quot;, &amp;quot;--crate-name&amp;quot;, &amp;quot;example&amp;quot;, &amp;quot;--edition=2021&amp;quot;, &amp;quot;src&#x2F;main.rs&amp;quot;, &amp;quot;--error-format=json&amp;quot;, &amp;quot;--json=diagnostic-rendered-ansi,artifacts,future-incompat&amp;quot;, &amp;quot;--crate-type&amp;quot;, &amp;quot;bin&amp;quot;, &amp;quot;--emit=dep-info,metadata&amp;quot;, &amp;quot;-C&amp;quot;, &amp;quot;embed-bitcode=no&amp;quot;, &amp;quot;-C&amp;quot;, &amp;quot;debuginfo=2&amp;quot;, &amp;quot;--check-cfg&amp;quot;, &amp;quot;cfg(docsrs)&amp;quot;, &amp;quot;--check-cfg&amp;quot;, &amp;quot;cfg(feature, values())&amp;quot;, &amp;quot;-C&amp;quot;, &amp;quot;metadata=f3baefdd4f0d88a8&amp;quot;, &amp;quot;-C&amp;quot;, &amp;quot;extra-filename=-f3baefdd4f0d88a8&amp;quot;, &amp;quot;--out-dir&amp;quot;, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;cargo&#x2F;target&#x2F;debug&#x2F;deps&amp;quot;, &amp;quot;-C&amp;quot;, &amp;quot;incremental=&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;cargo&#x2F;target&#x2F;debug&#x2F;incremental&amp;quot;, &amp;quot;-L&amp;quot;, &amp;quot;dependency=&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;cargo&#x2F;target&#x2F;debug&#x2F;deps&amp;quot;])
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;wow, we have like 10 different commands running here! &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-paths-1&quot;&gt;&lt;a href=&quot;#fn-paths&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;~&#x2F;.cargo&#x2F;bin&#x2F;cargo clippy -v&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~&#x2F;.rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;cargo clippy -v&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~&#x2F;.cargo&#x2F;bin&#x2F;cargo-clippy -v&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~&#x2F;.rustup&#x2F;...&#x2F;cargo-clippy clippy -v&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~&#x2F;.rustup&#x2F;...&#x2F;cargo check -v&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~&#x2F;.rustup&#x2F;...&#x2F;clippy-driver ~&#x2F;.rustup&#x2F;...&#x2F;rustc -vV&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~&#x2F;.rustup&#x2F;...&#x2F;clippy-driver ~&#x2F;.rustup&#x2F;..&#x2F;rustc - --print=file-names&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~&#x2F;.rustup&#x2F;...&#x2F;clippy-driver ~&#x2F;.rustup&#x2F;...&#x2F;rustc -- --print=sysroot&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~&#x2F;.rustup&#x2F;...&#x2F;clippy-driver ~&#x2F;.rustup&#x2F;...&#x2F;rustc -vV&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;~&#x2F;.rustup&#x2F;...&#x2F;clippy-driver ~&#x2F;.rustup&#x2F;..&#x2F;rustc src&#x2F;main.rs&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;that&#x27;s a lot of indirection to compile a simple hello world! let&#x27;s dig into why it happens.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rustup-toolchain-proxies&quot;&gt;Rustup toolchain proxies&lt;a class=&quot;zola-anchor&quot; href=&quot;#rustup-toolchain-proxies&quot; aria-label=&quot;Anchor link for: rustup-toolchain-proxies&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;twice, we see the same binary executed first from &lt;code&gt;~&#x2F;.cargo&lt;&#x2F;code&gt;, then again from &lt;code&gt;~&#x2F;.rustup&lt;&#x2F;code&gt;: for &lt;code&gt;cargo&lt;&#x2F;code&gt; and for &lt;code&gt;cargo-clippy&lt;&#x2F;code&gt;. what&#x27;s the difference between these?&lt;&#x2F;p&gt;
&lt;p&gt;let&#x27;s take a look at the first one that runs:&lt;&#x2F;p&gt;
&lt;details&gt;&lt;summary&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; strace -e readlink,openat -z ~&#x2F;.local&#x2F;lib&#x2F;cargo&#x2F;bin&#x2F;cargo
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;readlink(&amp;quot;&#x2F;proc&#x2F;self&#x2F;exe&amp;quot;, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;cargo&#x2F;bin&#x2F;cargo&amp;quot;, 256) = 36
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;openat(AT_FDCWD, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;settings.toml&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;summary&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; strace -e readlink,openat -s 100 -z ~&#x2F;.local&#x2F;lib&#x2F;cargo&#x2F;bin&#x2F;cargo 2&amp;gt;&amp;amp;1| rg &amp;#39;readlink|openat&amp;#39; | rg -v &amp;#39;&amp;quot;&#x2F;(lib|etc)&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;openat(AT_FDCWD, &amp;quot;&#x2F;proc&#x2F;self&#x2F;maps&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;readlink(&amp;quot;&#x2F;proc&#x2F;self&#x2F;exe&amp;quot;, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;cargo&#x2F;bin&#x2F;cargo&amp;quot;, 256) = 36
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;openat(AT_FDCWD, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;settings.toml&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;openat(AT_FDCWD, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;openat(3, &amp;quot;nightly-x86_64-unknown-linux-gnu&amp;quot;, O_RDONLY|O_NOCTTY|O_CLOEXEC) = 4
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;openat(AT_FDCWD, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;lib&#x2F;rustlib&#x2F;rust-installer-version&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;openat(AT_FDCWD, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;lib&#x2F;rustlib&#x2F;multirust-channel-manifest.toml&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;openat(AT_FDCWD, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;lib&#x2F;rustlib&#x2F;multirust-config.toml&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;readlink(&amp;quot;&#x2F;proc&#x2F;self&#x2F;exe&amp;quot;, &amp;quot;&#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;cargo&amp;quot;, 4096) = 81
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;openat(AT_FDCWD, &amp;quot;&#x2F;proc&#x2F;self&#x2F;maps&amp;quot;, O_RDONLY|O_CLOEXEC) = 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;it turns out this is something called a &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rustup&#x2F;concepts&#x2F;proxies.html&quot;&gt;rustup proxy&lt;&#x2F;a&gt;. this is a little shim that &lt;a href=&quot;https:&#x2F;&#x2F;blog.axo.dev&#x2F;2024&#x2F;07&#x2F;an-app-by-any-other-name&quot;&gt;hardlinks&lt;&#x2F;a&gt; from the proxy (in this case &lt;code&gt;cargo&lt;&#x2F;code&gt;) to rustup. rustup then looks at its own executable name, notices that it&#x27;s cargo, and picks the right toolchain to run the actual cargo binary.&lt;&#x2F;p&gt;
&lt;p&gt;you can actually ask rustup to just find the path without running it:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; rustup which cargo
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&#x2F;home&#x2F;jyn&#x2F;.rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;bin&#x2F;cargo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and you can see that the real cargo doesn&#x27;t support rustup features like toolchain selectors:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; cargo +nightly --version
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;cargo 1.81.0-nightly (4dcbca118 2024-06-11)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; $(rustup which cargo) +nightly --version
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error: no such command: `+nightly`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        Cargo does not handle `+toolchain` directives.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        Did you mean to invoke `cargo` through `rustup` instead?
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;you can even verify for yourself that &lt;code&gt;~&#x2F;.cargo&#x2F;bin&#x2F;cargo&lt;&#x2F;code&gt; is just a hardlink by comparing the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Inode&quot;&gt;inodes&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; ls -i &#x2F;home&#x2F;jyn&#x2F;.cargo&#x2F;bin&#x2F;rustup
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;32294517 &#x2F;home&#x2F;jyn&#x2F;.cargo&#x2F;bin&#x2F;rustup
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; ls -i &#x2F;home&#x2F;jyn&#x2F;.cargo&#x2F;bin&#x2F;rustc
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;32294517 &#x2F;home&#x2F;jyn&#x2F;.cargo&#x2F;bin&#x2F;rustc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;cargo-extensions&quot;&gt;cargo extensions&lt;a class=&quot;zola-anchor&quot; href=&quot;#cargo-extensions&quot; aria-label=&quot;Anchor link for: cargo-extensions&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;ok, we&#x27;ve figured out 2&#x2F;10 of the processes. what are the other 8?&lt;&#x2F;p&gt;
&lt;p&gt;the first one that runs after &lt;code&gt;cargo clippy&lt;&#x2F;code&gt; is ... &lt;code&gt;cargo-clippy&lt;&#x2F;code&gt; (with a &lt;em&gt;-&lt;&#x2F;em&gt; dash, not a space). this is a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;external-tools.html#custom-subcommands&quot;&gt;cargo extension&lt;&#x2F;a&gt;; &lt;code&gt;cargo clippy&lt;&#x2F;code&gt; is doing very little here other than setting &lt;code&gt;CARGO&lt;&#x2F;code&gt; in the environment to point back to itself. why does it need to do that? because &lt;code&gt;cargo-clippy&lt;&#x2F;code&gt; is about to call back to cargo: that&#x27;s process 5, &lt;code&gt;cargo check&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;what&#x27;s changed is that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;cefa31a5243b90c0c606e2fdb3fc3e036a8bec16&#x2F;src&#x2F;main.rs#L109-L126&quot;&gt;&lt;code&gt;cargo-clippy&lt;&#x2F;code&gt; has set&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;config.html#buildrustc-workspace-wrapper&quot;&gt;&lt;code&gt;RUSTC_WORKSPACE_WRAPPER&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to &lt;code&gt;clippy-driver&lt;&#x2F;code&gt;. that means that instead of invoking rustc on each crate, it&#x27;s going to invoke clippy-driver. and because it&#x27;s a &lt;code&gt;WRAPPER&lt;&#x2F;code&gt;, it gets passed &lt;code&gt;rustc&lt;&#x2F;code&gt; as an argument. the intended use-case is for tools like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;sccache&quot;&gt;&lt;code&gt;sccache&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; that transparently wrap rustc before invoking it; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;9cf416dc6ec9d7ebc8df299ca970e4a92efa2596&#x2F;src&#x2F;driver.rs#L229-L255&quot;&gt;clippy never invokes rustc as a process&lt;&#x2F;a&gt;, but there&#x27;s no equivalent of &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;config.html#buildrustc&quot;&gt;&lt;code&gt;RUSTC&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; that&#x27;s only used for workspaces.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sysroots-and-dynamic-libraries&quot;&gt;sysroots and dynamic libraries&lt;a class=&quot;zola-anchor&quot; href=&quot;#sysroots-and-dynamic-libraries&quot; aria-label=&quot;Anchor link for: sysroots-and-dynamic-libraries&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;now, at this point you might imagine that we have enough info to write our own clippy-like tool that gets invoked instead of rustc. if we look at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;b8bb2968ce1e44d01520c9d59ee6299ed66df3f9&#x2F;compiler&#x2F;rustc&#x2F;src&#x2F;main.rs&quot;&gt;&lt;code&gt;compiler&#x2F;rustc&#x2F;src&#x2F;main.rs&lt;&#x2F;code&gt; in rust-lang&#x2F;rust&lt;&#x2F;a&gt;, other than some weird jemalloc stuff, all it does is call &lt;code&gt;rustc_driver::main&lt;&#x2F;code&gt;. let&#x27;s write a toy program that does that.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; cargo new driver
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; cd driver
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; echo &amp;#39;#![feature(rustc_private)]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;extern crate rustc_driver;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  println!(&amp;quot;this is a custom driver!&amp;quot;);
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  rustc_driver::main();
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;}&amp;#39; &amp;gt; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; cargo +nightly run
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error[E0463]: can&amp;#39;t find crate for `rustc_driver`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; --&amp;gt; src&#x2F;main.rs:2:1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;2 | extern crate rustc_driver;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  | ^^^^^^^^^^^^^^^^^^^^^^^^^^ can&amp;#39;t find crate
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  = help: maybe you need to install the missing components with: `rustup component add rust-src rustc-dev llvm-tools-preview`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;oh. huh. that&#x27;s kinda weird. let&#x27;s follow those instructions for now though.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; rustup component add rust-src rustc-dev llvm-tools-preview
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; cargo +nightly run
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   Compiling driver v0.1.0 (&#x2F;home&#x2F;jyn&#x2F;src&#x2F;driver)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.08s
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     Running `&#x2F;home&#x2F;jyn&#x2F;.cargo&#x2F;target&#x2F;debug&#x2F;driver`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;this is a custom driver!
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Usage: rustc [OPTIONS] INPUT
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;this is pretty cool! let&#x27;s install it for our user and see if we can run it on a rust file.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; cargo install --path . --debug
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  Installing driver v0.1.0 (&#x2F;home&#x2F;jyn&#x2F;src&#x2F;driver)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.01s
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  Installing &#x2F;home&#x2F;jyn&#x2F;.cargo&#x2F;bin&#x2F;driver
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   Installed package `driver v0.1.0 (&#x2F;home&#x2F;jyn&#x2F;src&#x2F;driver)` (executable `driver`)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; driver src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;driver: error while loading shared libraries: librustc_driver-5396912e8af1f65d.so: cannot open shared object file: No such file or directory
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;well that&#x27;s unfortunate. what happened here?&lt;&#x2F;p&gt;
&lt;p&gt;when we use &lt;code&gt;cargo run&lt;&#x2F;code&gt; for our driver, it sets some environment variables. in particular, it sets a variable called &lt;code&gt;LD_LIBRARY_PATH&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; strace -s 1000 -v -e execve cargo run 2&amp;gt;&amp;amp;1 &amp;gt;&#x2F;dev&#x2F;null | rg debug&#x2F;driver | rg -o &amp;#39;LD_LIBRARY_PATH=[^&amp;quot;]*&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;LD_LIBRARY_PATH=&#x2F;home&#x2F;jyn&#x2F;.cargo&#x2F;target&#x2F;debug&#x2F;deps:&#x2F;home&#x2F;jyn&#x2F;.cargo&#x2F;target&#x2F;debug:&#x2F;home&#x2F;jyn&#x2F;.rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;lib&#x2F;rustlib&#x2F;x86_64-unknown-linux-gnu&#x2F;lib:&#x2F;home&#x2F;jyn&#x2F;.rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;lib
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and indeed if we set that variable, our driver works again:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; env &amp;quot;$(strace -s 1000 -v -e execve cargo run 2&amp;gt;&amp;amp;1 &amp;gt;&#x2F;dev&#x2F;null | rg debug&#x2F;driver | rg -o &amp;#39;LD_LIBRARY_PATH=[^&amp;quot;]*&amp;#39;)&amp;quot; driver src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;this is a custom driver!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;what does it do?&lt;&#x2F;p&gt;
&lt;p&gt;well, &lt;a href=&quot;https:&#x2F;&#x2F;tldp.org&#x2F;HOWTO&#x2F;Program-Library-HOWTO&#x2F;shared-libraries.html#AEN80&quot;&gt;the linux documentation project&lt;&#x2F;a&gt; documents it as follows:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can temporarily substitute a different library for this particular execution. In Linux, the environment variable LD_LIBRARY_PATH is a colon-separated set of directories where libraries should be searched for first, before the standard set of directories; this is useful when debugging a new library or using a nonstandard library for special purposes&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&quot;library&quot; here means a shared object library. on linux, these files end with &lt;code&gt;.so&lt;&#x2F;code&gt;; on Windows, &lt;code&gt;.dll&lt;&#x2F;code&gt; (for &quot;dynamic-link library&quot;) ; on MacOS, &lt;code&gt;.dylib&lt;&#x2F;code&gt;. these are object files that contain code (&quot;symbols&quot; in linker terms) that are loaded by the linker at runtime, after the rest of your program is loaded into memory. for example, if we look at the rustc binary we copied our driver&#x27;s code from, it&#x27;s almost empty:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;;; stat -c %s $(rustup which rustc) | numfmt --to=iec
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;2.6M
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;instead, almost all the code is in a shared object:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; stat -c %s &#x2F;home&#x2F;jyn&#x2F;.rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;lib&#x2F;librustc_driver-5396912e8af1f65d.so | numfmt --to=iec
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;136M
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;that shared object gets loaded at runtime by every rustc_driver: &lt;code&gt;rustc&lt;&#x2F;code&gt;, &lt;code&gt;clippy&lt;&#x2F;code&gt;, &lt;code&gt;rustdoc&lt;&#x2F;code&gt;, &lt;code&gt;miri&lt;&#x2F;code&gt; - and our new &lt;code&gt;driver&lt;&#x2F;code&gt; tool. it&#x27;s actually shipped with every toolchain; if you look at the stable toolchain in &lt;code&gt;.rustup&lt;&#x2F;code&gt; you&#x27;ll see it there too. however, what you &lt;em&gt;won&#x27;t&lt;&#x2F;em&gt; see is the &lt;code&gt;.rmeta&lt;&#x2F;code&gt; files in the toolchain directory: &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-target-libdir-1&quot;&gt;&lt;a href=&quot;#fn-target-libdir&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;; ls &#x2F;home&#x2F;jyn&#x2F;.rustup&#x2F;toolchains&#x2F;nightly-x86_64-unknown-linux-gnu&#x2F;lib&#x2F;rustlib&#x2F;x86_64-unknown-linux-gnu&#x2F;lib&#x2F;*.rmeta | wc -l
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;228
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;those are the files we just installed with &lt;code&gt;rustup component add rustc-dev&lt;&#x2F;code&gt;. they give rustc the type information it needs to check our &lt;code&gt;driver&lt;&#x2F;code&gt; code against the type signatures of all the &lt;code&gt;rustc_private&lt;&#x2F;code&gt; internal crates.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-a-driver&quot;&gt;building a driver&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-a-driver&quot; aria-label=&quot;Anchor link for: building-a-driver&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;so! we have learned a bunch of stuff:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;when we run &lt;code&gt;cargo&lt;&#x2F;code&gt; or &lt;code&gt;rustc&lt;&#x2F;code&gt;, that&#x27;s actually running a &quot;rustup proxy&quot; that picks the toolchain version to use&lt;&#x2F;li&gt;
&lt;li&gt;when we run &lt;code&gt;cargo clippy&lt;&#x2F;code&gt;, that&#x27;s doing a complicated back and forth between cargo and various clippy executables&lt;&#x2F;li&gt;
&lt;li&gt;when we run &lt;code&gt;rustc&lt;&#x2F;code&gt; or &lt;code&gt;clippy-driver&lt;&#x2F;code&gt;, that&#x27;s loading a shared object called &lt;code&gt;librustc_driver.so&lt;&#x2F;code&gt; at runtime&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;that&#x27;s enough info we can now build our own driver!&lt;&#x2F;p&gt;
&lt;p&gt;first, let&#x27;s make sure we can always run our driver even if we&#x27;re not going through cargo. it turns out there&#x27;s a linker flag for this called &lt;a href=&quot;https:&#x2F;&#x2F;man.openbsd.org&#x2F;man1&#x2F;ld.bfd.1#rpath&quot;&gt;&lt;code&gt;-rpath&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which does essentially the same thing as &lt;code&gt;LD_LIBRARY_PATH&lt;&#x2F;code&gt; but at link time instead of at runtime. to get the path we need, we can use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;rustc&#x2F;command-line-arguments.html#--print-print-compiler-information&quot;&gt;&lt;code&gt;rustc --print=sysroot&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (we can get the right version of &lt;code&gt;rustc&lt;&#x2F;code&gt; from an env variable cargo sets, &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;environment-variables.html#environment-variables-cargo-sets-for-build-scripts&quot;&gt;&lt;code&gt;RUSTC&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;). and finally, to tell cargo to pass that flag to the linker, we can write a build script that uses &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;build-scripts.html#rustc-link-arg&quot;&gt;&lt;code&gt;cargo:rustc-link-arg&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-rpath-origin-1&quot;&gt;&lt;a href=&quot;#fn-rpath-origin&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; build.rs
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; rustc &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;env&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;var&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;RUSTC&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; output &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;process&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;Command&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;rustc&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;--print=sysroot&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;output&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; stdout &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;from_utf8&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;output&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;stdout&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; sysroot &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; stdout&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;trim_end&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;cargo:rustc-link-arg=-Wl,-rpath=&lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{sysroot}&lt;&#x2F;span&gt;&#x2F;lib&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;next, we want to be able to invoke this as &lt;code&gt;cargo driver&lt;&#x2F;code&gt;, so we need to write a &lt;code&gt;cargo-driver&lt;&#x2F;code&gt; program.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; src&#x2F;bin&#x2F;cargo-driver.rs
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;env&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Result&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; cargo &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;env&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;var&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;CARGO&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;cargo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;into&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; cmd &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;process&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;Command&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;cargo&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; driver &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;env&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;current_exe&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;with_file_name&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;driver&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; status &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; cmd&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;build&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;env&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;RUSTC&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; driver&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;status&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;match&lt;&#x2F;span&gt; status&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;code&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;other&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;other&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-support z-type z-rust&quot;&gt;None&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Err&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;note that this works fine when using &lt;code&gt;cargo install&lt;&#x2F;code&gt;, but when using &lt;code&gt;cargo run --bin cargo-driver&lt;&#x2F;code&gt; locally, cargo doesn&#x27;t rebuild all your binaries automatically - you need to manually run &lt;code&gt;cargo build&lt;&#x2F;code&gt; first to make sure both executables are updated. &lt;sup class=&quot;footnote-reference&quot; id=&quot;fr-bindeps-1&quot;&gt;&lt;a href=&quot;#fn-bindeps&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;we-get-a-little-silly-with-it-3&quot;&gt;we get a little silly with it :3&lt;a class=&quot;zola-anchor&quot; href=&quot;#we-get-a-little-silly-with-it-3&quot; aria-label=&quot;Anchor link for: we-get-a-little-silly-with-it-3&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;now let&#x27;s make a program that does something fun! i&#x27;m going to disable the &lt;code&gt;unsafe&lt;&#x2F;code&gt; checker, so that we can write unsafe programs in &quot;safe&quot; rust.&lt;&#x2F;p&gt;
&lt;p&gt;first, let&#x27;s tell rust-analyzer that we&#x27;re using rustc internals in this crate, so we get go-to-definition and other nice things:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml z-code&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-toml&quot;&gt;#&lt;&#x2F;span&gt; Cargo.toml&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;package&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;rust-analyzer&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-toml&quot;&gt;#&lt;&#x2F;span&gt; This package uses #[feature(rustc_private)]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;rustc_private&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-toml&quot;&gt;true&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;we also have to configure this per-editor - i use &lt;a href=&quot;https:&#x2F;&#x2F;helix-editor.com&#x2F;&quot;&gt;helix&lt;&#x2F;a&gt; so i&#x27;m going to configure &lt;code&gt;.helix&#x2F;languages.toml&lt;&#x2F;code&gt;. for vscode you&#x27;d use &lt;code&gt;.vscode&#x2F;settings.json&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml z-code&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-toml&quot;&gt;#&lt;&#x2F;span&gt; .helix&#x2F;languages.toml&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;language-server&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;rust-analyzer&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-table z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;config&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;rust-analyzer&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;rustc&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-key z-toml&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;source&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;discover&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;i&#x27;m also going to pin a version of the nightly toolchain, since the internal APIs change quite frequently.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; class=&quot;language-toml z-code&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-toml&quot;&gt;#&lt;&#x2F;span&gt; rust-toolchain.toml&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-tag z-table z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-table z-toml&quot;&gt;toolchain&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-table z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;channel&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;nightly-2024-10-20&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;components&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-array z-begin z-toml&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;cargo&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;llvm-tools&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;rust-src&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;rust-std&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;rustc&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;rustc-dev&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-array z-toml&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;rustfmt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-array z-end z-toml&quot;&gt;]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-toml&quot;&gt;&lt;span class=&quot;z-meta z-tag z-key z-toml&quot;&gt;&lt;span class=&quot;z-entity z-name z-tag z-toml&quot;&gt;profile&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-key-value z-toml&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-basic z-toml&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;minimal&lt;span class=&quot;z-punctuation z-definition z-string z-end z-toml&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;finally, let&#x27;s write our program.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; src&#x2F;main.rs
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#!&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;rustc_private&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-annotation z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;extern&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;crate&lt;&#x2F;span&gt; rustc_driver&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;extern&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;crate&lt;&#x2F;span&gt; rustc_errors&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;extern&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;crate&lt;&#x2F;span&gt; rustc_hir&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;extern&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;crate&lt;&#x2F;span&gt; rustc_interface&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;extern&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;crate&lt;&#x2F;span&gt; rustc_middle&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;extern&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;crate&lt;&#x2F;span&gt; rustc_session&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;rustc_driver&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Callbacks&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;rustc_errors&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;emitter&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;HumanReadableErrorType&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; ColorConfig&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;rustc_interface&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;interface&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;rustc_session&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;config&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;ErrorOutputType&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;rustc_session&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;EarlyDiagCtxt&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-struct z-rust&quot;&gt;DisableSafetyChecks&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-impl z-rust&quot;&gt;impl&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;Callbacks &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;for&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt; &lt;span class=&quot;z-entity z-name z-impl z-rust&quot;&gt;DisableSafetyChecks&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;config&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;self&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;config&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;interface&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Config&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        config&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;override_queries &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;            &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;_session&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;queries&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;queries&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;check_unsafety&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;_tcx&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;_def_id&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;rustc_driver&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;install_ice_hook&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;        &lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;jyn514.github.io&#x2F;issues&#x2F;new&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;        &lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;_&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; handler &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;EarlyDiagCtxt&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;ErrorOutputType&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;HumanReadable&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;        &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;HumanReadableErrorType&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Default&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;        &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;ColorConfig&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;Auto&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;rustc_driver&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;init_rustc_env_logger&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;handler&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;process&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;exit&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;rustc_driver&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;catch_with_exit_code&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;move&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-rust&quot;&gt;||&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; args&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;env&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;args&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;rustc_driver&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;RunCompiler&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;args&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; DisableSafetyChecks&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;run&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;there&#x27;s a lot here. i&#x27;m not going to cover it all - see &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;&quot;&gt;the rustc dev guide&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;nightly-rustc&#x2F;&quot;&gt;generated documentation&lt;&#x2F;a&gt; for that - but i want to call out two things in particular:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;we had to explicitly use &lt;code&gt;extern crate&lt;&#x2F;code&gt; to load the rustc_private crates. normally, cargo will pass (e.g.) &lt;code&gt;--extern cfg-if=~&#x2F;.cargo&#x2F;debug&#x2F;deps&#x2F;libcfg-if.rmeta&lt;&#x2F;code&gt;, so rustc loads our dependencies automatically. these crates are being loaded from the &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;building&#x2F;bootstrapping&#x2F;what-bootstrapping-does.html#what-is-a-sysroot&quot;&gt;sysroot&lt;&#x2F;a&gt;, though, so cargo doesn&#x27;t know about them.&lt;&#x2F;li&gt;
&lt;li&gt;the bit of this driver we actually care about is in &lt;code&gt;queries.check_unsafety = |...| {}&lt;&#x2F;code&gt;. that says &quot;override the default function that checks unsafety with our own function&quot;. rustc is built on a &quot;query&quot; model where information is pulled instead of pushed - see the dev guide section on &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;overview.html#queries&quot;&gt;queries&lt;&#x2F;a&gt; for more information.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;let&#x27;s test out our driver and make sure it works. we&#x27;ll install it, create a new project that uses unsafe code without an &lt;code&gt;unsafe&lt;&#x2F;code&gt; block, and make sure that project compiles.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; driver&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;path&lt;&#x2F;span&gt; .&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; ..&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; new safe-rust&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; safe-rust&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-echo z-shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;fn main() { println!(&amp;quot;{}&amp;quot;, *std::ptr::null::&amp;lt;usize&amp;gt;()); }&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; src&#x2F;main.rs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; driver&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;   &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Compiling&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; safe-rust v0.1.0 (&#x2F;home&#x2F;jyn&#x2F;src&#x2F;safe-rust&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;warning:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; dereferencing a null pointer&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;--&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; src&#x2F;main.rs:1:28&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;fn&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; main(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-punctuation z-definition z-compound z-braces z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;println!&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;(&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;{}&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;*&lt;&#x2F;span&gt;std::ptr::null::&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;usize&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-process z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-compound z-braces z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt;                            &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;^^^^^^^^^^^^^^^^^^^^^^^^^^&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; this code causes undefined behavior when executed&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;  &lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;note:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-command z-backticks z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-shell&quot;&gt;`&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;#[warn&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;(deref_nullptr&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-shell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; on by default&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;warning:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-command z-backticks z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-shell&quot;&gt;`&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;safe-rust&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-shell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; (bin &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;safe-rust&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;generated&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1 warning&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Finished&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-command z-backticks z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-shell&quot;&gt;`&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;dev&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-shell&quot;&gt;`&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; profile &lt;span class=&quot;z-keyword z-control z-regexp z-set z-begin z-shell&quot;&gt;[&lt;&#x2F;span&gt;unoptimized + debuginfo&lt;span class=&quot;z-keyword z-control z-regexp z-set z-end z-shell&quot;&gt;]&lt;&#x2F;span&gt; target(s&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 0.06s&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;tada!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;a-digression-more-about-rustup-proxies&quot;&gt;a digression: more about rustup proxies&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-digression-more-about-rustup-proxies&quot; aria-label=&quot;Anchor link for: a-digression-more-about-rustup-proxies&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;when we built our custom driver, we wrote &lt;code&gt;driver.rs&lt;&#x2F;code&gt; and &lt;code&gt;cargo-driver.rs&lt;&#x2F;code&gt;, but we never wrote a rustup proxy. how was it picking the right version to run?&lt;&#x2F;p&gt;
&lt;p&gt;well, it was always picking the same version. if we explicitly use a different toolchain - e.g. &lt;code&gt;stable&lt;&#x2F;code&gt; - it will still run our custom driver, which uses the nightly toolchain.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;RUSTFLAGS&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;--version&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; +stable driver&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;---&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; stdout&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;rustc&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1.84.0-nightly (662180b34 2024-10-20&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ideally, we would instead have our driver respect the version we&#x27;re passed. that would also mean stuff like &lt;code&gt;driver +stable&lt;&#x2F;code&gt; would give a nice error when that version isn&#x27;t installed, instead of what it currently does:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error: couldn&amp;#39;t read +stable: No such file or directory (os error 2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;here is a toy shell script that does that, using the same &quot;read my own process name&quot; trick to dispatch to the right binary:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; ~&#x2F;.cargo&#x2F;bin&#x2F;driver&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; ~&#x2F;.cargo&#x2F;bin&#x2F;cargo-driver&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;!&#x2F;bin&#x2F;sh&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-control z-conditional z-case z-shell&quot;&gt;case&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-in z-shell&quot;&gt;in&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-shell&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;+&lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-control z-conditional z-patterns z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;RUSTUP_TOOLCHAIN&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-command z-parens z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-echo z-shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cut&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;c&lt;&#x2F;span&gt; 1-&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-shift z-shell&quot;&gt;shift&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-terminator z-case z-clause z-shell&quot;&gt;;;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-control z-conditional z-patterns z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt; &lt;span class=&quot;z-variable z-other z-readwrite z-assignment z-shell&quot;&gt;RUSTUP_TOOLCHAIN&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-shell&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-unquoted z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-command z-parens z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;rustup&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; default&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-pipe z-shell&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cut&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;d&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;f&lt;&#x2F;span&gt; 1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-commands z-shell&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-conditional z-case z-clause z-patterns z-shell&quot;&gt;&lt;span class=&quot;z-keyword z-control z-conditional z-end z-shell&quot;&gt;esac&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-exec z-shell&quot;&gt;exec&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; rustup run &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;RUSTUP_TOOLCHAIN&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-command z-parens z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;basename&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-shell&quot;&gt;@&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-exit z-shell&quot;&gt;exit&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1 &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; unreachable&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;the other advantage of this shell script is it will let you version your tool. for example, you could install it into &lt;code&gt;$(rustc --print sysroot)&#x2F;bin&lt;&#x2F;code&gt; instead of &lt;code&gt;~&#x2F;.cargo&#x2F;bin&lt;&#x2F;code&gt;, and have multiple versions depending on what version of rustc it was built with. this is how clippy and the other tools packaged by rustup work, but rustup doesn&#x27;t support arbitrary drivers, only the hard-coded ones it knows about.&lt;&#x2F;p&gt;
&lt;footer class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn-paths&quot;&gt;
&lt;p&gt;you may have noticed that i have changed the strace output from &lt;code&gt;~&#x2F;.local&#x2F;lib&#x2F;rustup&lt;&#x2F;code&gt; to &lt;code&gt;~&#x2F;.rustup&lt;&#x2F;code&gt;, and likewise for &lt;code&gt;~&#x2F;.cargo&lt;&#x2F;code&gt;. &lt;code&gt;~&#x2F;.rustup&lt;&#x2F;code&gt; and &lt;code&gt;~&#x2F;.cargo&lt;&#x2F;code&gt; are the default locations for rustup and cargo respectively, but i&#x27;ve manually changed them with &lt;code&gt;CARGO_HOME&lt;&#x2F;code&gt; and &lt;code&gt;RUSTUP_HOME&lt;&#x2F;code&gt; environment variables. the difference doesn&#x27;t matter for the purpose of this post. &lt;a href=&quot;#fr-paths-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-target-libdir&quot;&gt;
&lt;p&gt;unlike before, these aren&#x27;t in &lt;code&gt;nightly&#x2F;lib&lt;&#x2F;code&gt;, they&#x27;re in &lt;code&gt;nightly&#x2F;lib&#x2F;rustlib&#x2F;x86_64-unknown-linux-gnu&#x2F;lib&lt;&#x2F;code&gt;. the difference between these is a little out of scope for this post; basically the former is target-independent and the latter is target-specific. see &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;building&#x2F;bootstrapping&#x2F;what-bootstrapping-does.html#what-is-a-sysroot&quot;&gt;what is a sysroot?&lt;&#x2F;a&gt; for more information. &lt;a href=&quot;#fr-target-libdir-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-rpath-origin&quot;&gt;
&lt;p&gt;this strategy embeds an absolute path in our binary. that&#x27;s fine when running locally, but clippy and other tools want to work on any machine. instead, they use &lt;code&gt;-Wl,-rpath=$ORIGIN&#x2F;..&#x2F;lib&lt;&#x2F;code&gt;, which says &quot;the lib dir relative to the path to the binary that&#x27;s currently running&quot;. we can&#x27;t use that here because it only works if our binary is in the sysroot, not if it&#x27;s installed to &lt;code&gt;~&#x2F;.cargo&#x2F;bin&lt;&#x2F;code&gt;. &lt;a href=&quot;#fr-rpath-origin-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li id=&quot;fn-bindeps&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;cargo&#x2F;issues&#x2F;9096&quot;&gt;artifact dependencies&lt;&#x2F;a&gt; don&#x27;t actually help here. they require that the binary you&#x27;re using come from another crate; they can&#x27;t be used to specify a target inside the current package. &lt;a href=&quot;#fr-bindeps-1&quot;&gt;↩&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;footer&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>the rust project has a burnout problem</title>
        <published>2024-01-16T00:00:00+00:00</published>
        <updated>2024-01-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/the-rust-project-has-a-burnout-problem/"/>
        <id>https://jyn.dev/the-rust-project-has-a-burnout-problem/</id>
        
        <content type="html" xml:base="https://jyn.dev/the-rust-project-has-a-burnout-problem/">&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;burned%20out%20rust%20club.png&quot; alt=&quot;a melting, smiling, ferris. it&amp;#39;s surrounded by the cursive text &amp;quot;burned out rust kid club&amp;quot;.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;the number of people who have left the rust project due to burnout is shockingly high. the number of people in the project who are close to burnout is also shockingly high.&lt;&#x2F;p&gt;
&lt;p&gt;this post is about myself, but it&#x27;s not just about myself. i&#x27;m not going to name names because either you know what i&#x27;m talking about, in which case you know &lt;em&gt;at least&lt;&#x2F;em&gt; five people matching this description, or you don&#x27;t, in which case sorry but you&#x27;re not the target audience. consider, though, that the project has been around for 15 years, and compare that to the average time a maintainer has been active ...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-does-this-look-like&quot;&gt;what does this look like&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-does-this-look-like&quot; aria-label=&quot;Anchor link for: what-does-this-look-like&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;(i apologize in advance if this story does not match your experience; hopefully the suggestions on what to do about burnout will still be helpful to you.)&lt;&#x2F;p&gt;
&lt;p&gt;the pattern usually goes something like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;you want to work on rust. you go to look at the issue tracker. you find something &lt;em&gt;you&lt;&#x2F;em&gt; care about, since the easy&#x2F;mentored issues are taken. it&#x27;s hard to find a mentor because all the experienced people are overworked and burned out, so you end up doing a lot of the work independently.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;guess what you&#x27;ve already learned at this point: work in this project doesn&#x27;t happen unless &lt;em&gt;you personally&lt;&#x2F;em&gt; drive it forward. that issue you fixed was opened for years; the majority of issues you will work on as you start will have been open for months.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;you become a more active contributor. the existing maintainer is too burned out to do regular triage, so you end up going through the issue backlog (usually, you&#x27;re the first person to have done so in years). this reinforces the belief work doesn&#x27;t happen unless &lt;em&gt;you&lt;&#x2F;em&gt; do it &lt;em&gt;personally&lt;&#x2F;em&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;the existing maintainer recognizes your work and turns over a lot of the responsibilities to you, especially reviews. new contributors make PRs. they make silly simple mistakes due to lack of experience; you point them out and they get fixed. this can be fun, for a time. what it&#x27;s teaching you is that &lt;em&gt;you personally&lt;&#x2F;em&gt; are responsible for catching mistakes.&lt;&#x2F;li&gt;
&lt;li&gt;you get tired. you&#x27;ve been doing this for a while. people keep making the same mistakes, and you&#x27;re afraid to trust other reviewers; perhaps you&#x27;re the &lt;em&gt;only&lt;&#x2F;em&gt; reviewer, or other reviewers have let things slip before and you don&#x27;t trust their judgement as much as you used to. perhaps you&#x27;re assigned too many PRs and you can&#x27;t keep up. you haven&#x27;t worked on the things you &lt;em&gt;want&lt;&#x2F;em&gt; to work on in weeks, and no one else is working on them because you said you were going to (&quot;they won&#x27;t happen unless &lt;em&gt;you do them personally&lt;&#x2F;em&gt;&quot;, a voice says). you want a break, but you have a voice in the back of your head: &quot;the project would be worse without you&quot;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;i&#x27;m going to stop here; i think everyone gets the idea.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-can-i-do-about-it&quot;&gt;what can i do about it&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-can-i-do-about-it&quot; aria-label=&quot;Anchor link for: what-can-i-do-about-it&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;&quot;it won&#x27;t get done if i don&#x27;t do it&quot; and &quot;i need to review everything or stuff will slip through&quot; is exactly the mindset of my own burnout from rust. it doesn&#x27;t matter if it&#x27;s true, it will cause you pain. if the project cannot survive without &lt;em&gt;you personally&lt;&#x2F;em&gt; putting in unpaid overtime, perhaps it does not deserve to survive.&lt;&#x2F;p&gt;
&lt;p&gt;if you are paid to work on rust, you likely started as an unpaid contributor and got the job later. &lt;em&gt;treat it like a job now&lt;&#x2F;em&gt;. do not work overtime; do not volunteer at every turn; do not work on things far outside your job description.&lt;&#x2F;p&gt;
&lt;p&gt;the best way to help the project is to keep contributing for it for years. to do that, you have to avoid burning out, which means you have to &lt;em&gt;treat yourself well&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-can-team-leads-do-about-it&quot;&gt;what can team leads do about it&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-can-team-leads-do-about-it&quot; aria-label=&quot;Anchor link for: what-can-team-leads-do-about-it&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;have documentation for &quot;what to do about burnout&quot;; give it just as much priority as technical issues or moderation conflicts.&lt;&#x2F;p&gt;
&lt;p&gt;rotate responsibilities. don&#x27;t have the same person assigned to the majority of PRs. if they review other people&#x27;s PRs unsolicited, talk to them 1-1 about why they feel the need to do so. if someone is assigned to the review queue and never reviews PRs, talk to them; take them off the queue; give them a vacation or different responsibilities as appropriate.&lt;&#x2F;p&gt;
&lt;p&gt;ask people why they leave. i know at least one person whose burnout story does not match the one in this post. i am sure there are others. you cannot solve a problem if you don&#x27;t understand what causes it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;take these problems seriously&lt;&#x2F;em&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;2023&#x2F;12&#x2F;04&#x2F;How-to-maintain-an-open-source-project.html&quot;&gt;prioritize growing the team and creating a healthy environment over solving technical issues&lt;&#x2F;a&gt;. &lt;strong&gt;the issues will still be there in a few months; your people may not be&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-can-the-rust-project-do-about-it&quot;&gt;what can the rust project do about it&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-can-the-rust-project-do-about-it&quot; aria-label=&quot;Anchor link for: what-can-the-rust-project-do-about-it&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;one thing bothering me as i wrote this post is how much of this still falls on individuals within the project. i don&#x27;t think this is an individual problem; i think it is a cultural, organizational, and resource problem. i may write more about this once i have concrete ideas about what the project could do.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;be-well-be-kind-to-each-other-i-love-you&quot;&gt;be well. be kind to each other. i love you.&lt;a class=&quot;zola-anchor&quot; href=&quot;#be-well-be-kind-to-each-other-i-love-you&quot; aria-label=&quot;Anchor link for: be-well-be-kind-to-each-other-i-love-you&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;remember:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;EMPATHY WITHOUT BOUNDARIES IS SELF DESTRUCTION &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;HbBwEj4hc3&quot;&gt;pic.twitter.com&#x2F;HbBwEj4hc3&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; 𖤐ARCH BUDZAR𖤐 (@ArchBudzar) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ArchBudzar&#x2F;status&#x2F;1313572660048269315?ref_src=twsrc%5Etfw&quot;&gt;October 6, 2020&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt; 
&lt;h3 id=&quot;acknowledgements&quot;&gt;acknowledgements&lt;a class=&quot;zola-anchor&quot; href=&quot;#acknowledgements&quot; aria-label=&quot;Anchor link for: acknowledgements&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;thank you &lt;strong&gt;@QuietMisdreavus&lt;&#x2F;strong&gt; for the &lt;em&gt;burned out rust kid club&lt;&#x2F;em&gt; art.&lt;&#x2F;p&gt;
&lt;p&gt;thank you &lt;strong&gt;@Gankra&lt;&#x2F;strong&gt;, &lt;strong&gt;@QuietMisdreavus&lt;&#x2F;strong&gt;, &lt;strong&gt;@alercah&lt;&#x2F;strong&gt;, &lt;strong&gt;@ManishEarth&lt;&#x2F;strong&gt;, &lt;strong&gt;@estebank&lt;&#x2F;strong&gt;, &lt;strong&gt;@workingjubilee&lt;&#x2F;strong&gt; and &lt;strong&gt;@yaahc&lt;&#x2F;strong&gt; for discussion and feedback on early drafts of this post. any errors are my own.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>wonder</title>
        <published>2023-12-20T00:00:00+00:00</published>
        <updated>2023-12-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/wonder/"/>
        <id>https://jyn.dev/wonder/</id>
        
        <content type="html" xml:base="https://jyn.dev/wonder/">&lt;p&gt;this is a list of the times this year i felt wonder or joy. it&#x27;s not exhaustive.
it&#x27;s mostly for me. but it&#x27;s also for others, because i think a sense of wonder is a wonderful thing,
and i wish it were valued more highly.&lt;&#x2F;p&gt;
&lt;p&gt;i want to give a very special thanks to my friends Nori, Kate Crane, and Kate F, for showing me how much beauty there is in the world.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wonder&quot;&gt;wonder&lt;a class=&quot;zola-anchor&quot; href=&quot;#wonder&quot; aria-label=&quot;Anchor link for: wonder&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;things-i-have-seen&quot;&gt;things i have seen&lt;a class=&quot;zola-anchor&quot; href=&quot;#things-i-have-seen&quot; aria-label=&quot;Anchor link for: things-i-have-seen&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;lightning.jpg&quot; alt=&quot;lightning striking. the timing is perfect such that half the night sky is illuminated by the bolt and half is not.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;i took this photo in east austin, walking home from the last dinner i would have with my friends at my old company. it started pouring rain shortly afterwards.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;angel%20in%20the%20garden.jpg&quot; alt=&quot;a small square black block, with the engraved text: in the land of gods and monsters, i was an angel living in the garden of evil&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;i got this at a magic sale on Airport Boulevard in austin. it immediately spoke to me, for reasons that don&#x27;t belong on a blog post.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;austin%20from%20office.jpg&quot; alt=&quot;a blurry, distorted picture of a city. in the foreground is an apartment building. in the background is a set of sky scrapers. the sky above is dark, but no stars are visible.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;i took this photo from a company office at night. the photo is not very good, but it reminds me of the vast emptiness i felt, the hum of the city, the ten hundred thousand people around me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;mlk%20library.jpg&quot; alt=&quot;a picture of a city, taken from a tall rooftop. there is a glass building to the right and ornate architectures to the left. the street is filled with lights. far above, the clouds are dark grey against a bright setting sun.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;i took this photo from the roof of MLK library in DC. i felt like the city was alive around me. i still do.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;30000%20feet.jpg&quot; alt=&quot;a picture taken from an airplane windows. in the top left is the sun, blurred into an incomprehensible shape by the window pane. to the right is empty space. below are layered clouds, that look almost like ocean waves.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;this is the closest i will come to visiting space.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;things-i-have-heard&quot;&gt;things i have heard&lt;a class=&quot;zola-anchor&quot; href=&quot;#things-i-have-heard&quot; aria-label=&quot;Anchor link for: things-i-have-heard&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=q71LaWSSQ7M&quot;&gt;The Art Teacher&lt;&#x2F;a&gt;, by Rufus Wainwright. somehow this condenses a lifetime of regret and longing into four minutes.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=KIBKbhrniUQ&quot;&gt;Rachel&#x27;s Song&lt;&#x2F;a&gt;, from Blade Runner. for all the entities who miss a life that was never their own.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=9LcxSuZY024&quot;&gt;I Want To Live&lt;&#x2F;a&gt;, from Baldur&#x27;s Gate.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;things-i-have-read&quot;&gt;things i have read&lt;a class=&quot;zola-anchor&quot; href=&quot;#things-i-have-read&quot; aria-label=&quot;Anchor link for: things-i-have-read&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;weirdfictionreview.com&#x2F;2014&#x2F;06&#x2F;lull&#x2F;&quot;&gt;Lull&lt;&#x2F;a&gt;, by Kelly Link. i cannot describe it and i will not try. it takes half an hour to read; more, if you are a fast reader.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;annleckie.com&#x2F;novel&#x2F;ancillary-justice&#x2F;&quot;&gt;Ancillary Justice&lt;&#x2F;a&gt;, by Ann Leckie. it dares to ask: what if a ship were a person, and not a person, and both at once? and it dares to imagine: what if there were a choir that sang with many bodies and voices, but only one mind? what kind of world could create such beauty?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jana-h-s.itch.io&#x2F;untitled-crab-project&quot;&gt;Untitled Crab Project&lt;&#x2F;a&gt;, by Jana H-S. &lt;em&gt;I am going to tell you about some crabs&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;things-i-have-created&quot;&gt;things i have created&lt;a class=&quot;zola-anchor&quot; href=&quot;#things-i-have-created&quot; aria-label=&quot;Anchor link for: things-i-have-created&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cohost.org&#x2F;jyn&#x2F;post&#x2F;3933390-a-collection-of-date&quot;&gt;a collection of date ideas&lt;&#x2F;a&gt;. you can only read it in reverse, and that&#x27;s intentional.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;joy&quot;&gt;joy&lt;a class=&quot;zola-anchor&quot; href=&quot;#joy&quot; aria-label=&quot;Anchor link for: joy&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;things-i-have-seen-1&quot;&gt;things i have seen&lt;a class=&quot;zola-anchor&quot; href=&quot;#things-i-have-seen-1&quot; aria-label=&quot;Anchor link for: things-i-have-seen-1&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;nils%20meow.jpg&quot; alt=&quot;a github comment by @Nilstrieb: hello can anyone review my code please :ferrisClueless: please i have been waiting for weeks now all you do is meow please just one approval please&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;i burst into laughter every time i see this.&lt;&#x2F;p&gt;
&lt;video controls&gt;
    &lt;source src=&quot;&#x2F;assets&#x2F;fuck%20you%20chicago%20and%20northwestern%20railroad%20company.mp4&quot;&gt;
&lt;&#x2F;video&gt;
&lt;p&gt;FUCK YOU CHICAGO AND NORTHWESTERN RAILROAD COMPANY&lt;&#x2F;p&gt;
&lt;h3 id=&quot;things-i-have-created-1&quot;&gt;things i have created&lt;a class=&quot;zola-anchor&quot; href=&quot;#things-i-have-created-1&quot; aria-label=&quot;Anchor link for: things-i-have-created-1&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;118756&quot;&gt;use bold magenta instead of bold white for highlighting&lt;&#x2F;a&gt;. this is both very gay and legitimately useful. i would like more of my life to be like this, please.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;triagebot&#x2F;pull&#x2F;1756&quot;&gt;make triagebot cuter&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;pendant-selfie.jpg&quot; alt=&quot;mirror selfie!! i&amp;#39;m wearing a long sleeved burgundy shirt that hugs my curves and jeans that are just visible at the waist. my nails are painted glossy black. i&amp;#39;m wearing a bronze-ish metal watch, a brown bracelet, and a delicate necklace with a picture of a flower. my hair is half up and drapes over my left shoulder. i&amp;#39;m smiling wide, bringing out my laugh lines, although my mouth is closed.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;this is the first time i felt like a woman.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>How to maintain an Open Source project</title>
        <published>2023-12-04T00:00:00+00:00</published>
        <updated>2023-12-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/how-to-maintain-an-open-source-project/"/>
        <id>https://jyn.dev/how-to-maintain-an-open-source-project/</id>
        
        <content type="html" xml:base="https://jyn.dev/how-to-maintain-an-open-source-project/">&lt;p&gt;Open source is unique in that &lt;em&gt;energy&lt;&#x2F;em&gt;, not time or money, is the limiting factor. The existential threats are maintainer burnout and an imploding community, not failing to make payroll. As a result, it’s very important to do three things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Recruit new maintainers as frequently as possible.&lt;&#x2F;li&gt;
&lt;li&gt;Ruthlessly prioritize the energy of existing maintainers.&lt;&#x2F;li&gt;
&lt;li&gt;Be kind to your users.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;All other concerns are in some sense secondary; it doesn’t matter if a project has lots of useful features if it’s been abandoned for 4 years and no longer compiles, or if it has no users.&lt;&#x2F;p&gt;
&lt;p&gt;Note that &quot;be kind to your users&quot; is not the same as doing everything they ask for. You can and should say no to features. Being kind is really more simple stuff – don’t be rude in discussions, don’t make breaking changes unless there’s a good reason (there’s tools for this, like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;obi1kenobi&#x2F;cargo-semver-checks#cargo-semver-checks&quot;&gt;cargo-semver-checks&lt;&#x2F;a&gt;!), make it easy for people to submit bug reports and ask questions. If you close an issue as WONTFIX, tell them why; if it&#x27;s not too much effort, perhaps say the circumstances under which you might change your mind, or give an example of another way to solve their problem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;balancing-priorities&quot;&gt;Balancing priorities&lt;a class=&quot;zola-anchor&quot; href=&quot;#balancing-priorities&quot; aria-label=&quot;Anchor link for: balancing-priorities&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;One might notice that all three of those bullets are contradictory: recruiting new maintainers takes energy from existing maintainers; a feature that’s fun for a developer to write may not be useful for users, or vice versa; the more features a project has, the more complicated it gets and the harder it is to onboard new maintainers. Balancing these concerns is the cornerstone of an open source project.&lt;&#x2F;p&gt;
&lt;p&gt;Here are a few concrete examples of how to meet those goals:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Automate everything you find boring. CI, releases, updating dependencies, formatting, documentation are all good candidates here. Remember that it’s better to e.g. have a release that’s missing pre-compiled binaries than no release at all. There are many tools that can do this for you; a few examples in the rust ecosystem are Github Actions, &lt;a href=&quot;https:&#x2F;&#x2F;opensource.axo.dev&#x2F;cargo-dist&#x2F;&quot;&gt;cargo-dist&lt;&#x2F;a&gt;, dependabot, rustfmt, and rustdoc.&lt;&#x2F;li&gt;
&lt;li&gt;Post about the project frequently on social media or other platforms. This is both a good motivator for you to see what you’ve accomplished and a great way to get other people’s interest, either as users or maintainers. Don’t wait until you have something polished, a half-baked post is better than no post at all. Start a platform dedicated to your project where you can talk with users and contributors; this can be as simple as a Discord server or as complicated as a self-hosted Zulip instance. The important thing is, again, that it should be fun for you to set up.&lt;&#x2F;li&gt;
&lt;li&gt;Document how to develop the project, and how to write documentation. The latter pays dividends – not just for recruiting new maintainers, but also for reminding yourself how the project works when you come back from vacation in two weeks. The latter reduces your burden for writing documentation by making it easy for other people to help you write it.&lt;&#x2F;li&gt;
&lt;li&gt;Take vacations, even extended vacations. If you know you&#x27;ll be on vacation ahead of time, be kind to your users or fellow maintainers by telling them you&#x27;re gone. If you have automated review assignments, set it up to allow people to take breaks.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;culture&quot;&gt;Culture&lt;a class=&quot;zola-anchor&quot; href=&quot;#culture&quot; aria-label=&quot;Anchor link for: culture&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Past those concrete things, though, it’s important to set a culture for the project that makes you eager to work on it.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Develop a taste for when to say no to features. This is especially hard because it changes as a project grows. Early on, features are easy and fun to add, and open up lots of possibilities for your users. Later, they get harder to add, and new features make the tool more complicated for your existing users (who after all, started using your tool when it was more simpler) and new users (who have to read through all your documentation); and you have enough users it becomes less important to grow your user base.&lt;&#x2F;li&gt;
&lt;li&gt;Find people who are as excited about the project as you are. Invite constructive criticism – it’s a great way for you to learn and improve the project at the same time! – but at the same time make sure you balance it with positive feedback so you don’t get overwhelmed.&lt;&#x2F;li&gt;
&lt;li&gt;Don’t let yourself get burned out. This is in some ways the hardest part. There is only so much work you can do every week before you get tired. Pushing yourself past that will work, temporarily, but at the cost of draining your energy and making you less willing to work on the project in the future. You are not a company and do not have an SLA to your users; if they are really harmed they can use an older release or submit a patch themselves.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;recruiting-maintainers&quot;&gt;Recruiting maintainers&lt;a class=&quot;zola-anchor&quot; href=&quot;#recruiting-maintainers&quot; aria-label=&quot;Anchor link for: recruiting-maintainers&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Most people will never ask to be maintainers. Either they don&#x27;t want to be presumptuous, or they don&#x27;t feel experienced enough, or it just won&#x27;t occur to them. Instead, you should reach out to them.&lt;&#x2F;p&gt;
&lt;p&gt;As a general rule, I suggest leaning towards trusting people with merge privileges early. Anyone who&#x27;s active in the project is likely going to stick around for a while; you can always revert code they merge, and you don&#x27;t have to give them publish access. This is a great way to make people feel like part of the project, which in turns makes them more likely to keep contributing.&lt;&#x2F;p&gt;
&lt;p&gt;I have a lot more to say on this, but most of it has already been said by my friend Alice Cecile in &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=xM7bI2OPPLQ&quot;&gt;this wonderful talk&lt;&#x2F;a&gt;. Go watch it. Seriously, go watch it, it&#x27;s only 20 minutes and none of them are wasted.&lt;&#x2F;p&gt;
&lt;p&gt;Projects can become self-sustaining rather quickly – you really only need to recruit one or two other people, get five or ten users, and have a decent codebase to expand on. Once you’ve done that, you can mentor your other contributors into taking a leading role, and, eventually, step back from your role as the founder.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Why is Rust's build system uniquely hard to use?</title>
        <published>2023-01-12T00:00:00+00:00</published>
        <updated>2023-01-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/bootstrapping-rust-in-2023/"/>
        <id>https://jyn.dev/bootstrapping-rust-in-2023/</id>
        
        <content type="html" xml:base="https://jyn.dev/bootstrapping-rust-in-2023/">&lt;p&gt;&lt;em&gt;This post will assume you have watched &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=oUIjG-y4zaA&quot;&gt;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=oUIjG-y4zaA&lt;&#x2F;a&gt;.
You may also find it helpful to read &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;building&#x2F;bootstrapping&#x2F;what-bootstrapping-does.html#stages-of-bootstrapping&quot;&gt;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;building&#x2F;bootstrapping&#x2F;what-bootstrapping-does.html#stages-of-bootstrapping&lt;&#x2F;a&gt;, but I won&#x27;t assume prior knowledge of the information there.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;!-- This is a post about how I would like Rust&#x27;s bootstrapping system to work in an ideal world. --&gt;
&lt;!-- I am not sure all these changes are feasible - they certainly can be done at a technical --&gt;
&lt;!-- blah blah coordination is hard --&gt;
&lt;h2 id=&quot;why-is-bootstrap-confusing&quot;&gt;Why is bootstrap confusing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-is-bootstrap-confusing&quot; aria-label=&quot;Anchor link for: why-is-bootstrap-confusing&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;People get confused by Rust&#x27;s build system a lot. I have been trying for a while to figure out what
makes Rust uniquely hard here, as a lot of the people who are confused are experienced compiler
engineers who have used staged compilers in the past. Here are some theories I have.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;is-stage-0-is-uniquely-confusing&quot;&gt;Is &quot;stage 0&quot; is uniquely confusing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-stage-0-is-uniquely-confusing&quot; aria-label=&quot;Anchor link for: is-stage-0-is-uniquely-confusing&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;what-do-other-compilers-call-stage-0&quot;&gt;What do other compilers call &quot;stage 0&quot;?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-do-other-compilers-call-stage-0&quot; aria-label=&quot;Anchor link for: what-do-other-compilers-call-stage-0&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gcc.gnu.org&#x2F;install&#x2F;build.html&quot;&gt;https:&#x2F;&#x2F;gcc.gnu.org&#x2F;install&#x2F;build.html&lt;&#x2F;a&gt; refers to a &quot;3-stage&quot; build, and names the stages &quot;stage1&quot;, &quot;stage2&quot;, &quot;stage3&quot;.
It also references a &quot;native compiler&quot;. As far as I can tell, &quot;native compiler&quot; corresponds to what Rust calls &quot;stage 0&quot;, and stage 1&#x2F;2&#x2F;3 are all exactly equivalent, i.e:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;stage0 is a pre-existing compiler, which is assumed to already exist (or in rust&#x27;s case, a downloaded beta compiler).&lt;&#x2F;li&gt;
&lt;li&gt;stage1 is the sources from latest master, built by stage0, and has a different ABI from stage2 and stage3.&lt;&#x2F;li&gt;
&lt;li&gt;stage2 is the same sources, built by stage1.&lt;&#x2F;li&gt;
&lt;li&gt;stage3 is byte-for-byte identical with stage2, only useful for verifying reproducible builds.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;llvm.org&#x2F;docs&#x2F;AdvancedBuilds.html#bootstrap-builds&quot;&gt;https:&#x2F;&#x2F;llvm.org&#x2F;docs&#x2F;AdvancedBuilds.html#bootstrap-builds&lt;&#x2F;a&gt; says &quot;In a simple two-stage bootstrap build, we build clang using the system compiler, then use that just-built clang to build clang again.&quot; which again seems to match GCC and Rust.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gitlab.haskell.org&#x2F;ghc&#x2F;ghc&#x2F;blob&#x2F;master&#x2F;hadrian&#x2F;README.md#staged-compilation&quot;&gt;https:&#x2F;&#x2F;gitlab.haskell.org&#x2F;ghc&#x2F;ghc&#x2F;blob&#x2F;master&#x2F;hadrian&#x2F;README.md#staged-compilation&lt;&#x2F;a&gt; seems to match GCC, Clang, and Rust.&lt;&#x2F;p&gt;
&lt;!-- TOOD: mention that there are other self-hosted compilers that don&#x27;t use stages? would make it clear that having &quot;too close&quot; a model to other compilers is confusing --&gt;
&lt;h4 id=&quot;why-would-stage-0-be-confusing&quot;&gt;Why would &quot;stage 0&quot; be confusing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-would-stage-0-be-confusing&quot; aria-label=&quot;Anchor link for: why-would-stage-0-be-confusing&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Maybe treating this as &quot;just&quot; another stage, rather than naming it &quot;native compiler&quot; or &quot;system compiler&quot;, is confusing.
That alone seems unlikely though; &quot;0&quot; at least to me seems like a good indication that it&#x27;s not being built from source.
So renaming stage 0 to &quot;bootstrap compiler&quot; or &quot;pre-compiled compiler&quot;, while helpful, seems unlikely to clear up the confusion.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;is-building-the-standard-library-confusing&quot;&gt;Is building the standard library confusing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-building-the-standard-library-confusing&quot; aria-label=&quot;Anchor link for: is-building-the-standard-library-confusing&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;what-do-other-compilers-do&quot;&gt;What do other compilers do?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-do-other-compilers-do&quot; aria-label=&quot;Anchor link for: what-do-other-compilers-do&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;GCC and Clang do not build their standard libraries from source. Instead, they use the same dynamically linked system standard library for all stages, including the &quot;stage 0&quot; or &quot;system compiler&quot; stage.&lt;&#x2F;p&gt;
&lt;p&gt;(As an aside, that&#x27;s &lt;em&gt;horrifying&lt;&#x2F;em&gt;, C doesn&#x27;t have a standardized ABI and so this can cause miscompilations even if there are no bugs in the standard library or gcc itself: &lt;a href=&quot;https:&#x2F;&#x2F;faultlore.com&#x2F;blah&#x2F;c-isnt-a-language&#x2F;#c-doesnt-actually-have-an-abi&quot;&gt;https:&#x2F;&#x2F;faultlore.com&#x2F;blah&#x2F;c-isnt-a-language&#x2F;#c-doesnt-actually-have-an-abi&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;GHC &lt;em&gt;does&lt;&#x2F;em&gt; build its standard library from source. It has two parts to its standard library:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;GHC.Base&lt;&#x2F;code&gt;, which can only be compiled by exactly one version of GHC. This is a runtime, analogous to &lt;code&gt;crt0.o&lt;&#x2F;code&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;stdrs.dev&#x2F;nightly&#x2F;x86_64-unknown-linux-gnu&#x2F;std&#x2F;rt&#x2F;index.html&quot;&gt;&lt;code&gt;std::rt&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Everything else in the &lt;code&gt;GHC.*&lt;&#x2F;code&gt; namespace. This can be compiled by any version of GHC.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;what-does-rust-do&quot;&gt;What does Rust do?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-does-rust-do&quot; aria-label=&quot;Anchor link for: what-does-rust-do&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Rust also builds its standard library from source. It has three parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;core&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;alloc&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;std&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;All three can be built by exactly &lt;em&gt;two&lt;&#x2F;em&gt; versions of &lt;code&gt;rustc&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The previous beta compiler.&lt;&#x2F;li&gt;
&lt;li&gt;The in-tree sources, versioned in the same git repo.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;As discussed in my RustConf talk, they distinguish the two with &lt;code&gt;cfg(bootstrap)&lt;&#x2F;code&gt;; when set, we&#x27;re using beta, when unset, we&#x27;re using the in-tree sources.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;why-would-this-be-confusing&quot;&gt;Why would this be confusing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-would-this-be-confusing&quot; aria-label=&quot;Anchor link for: why-would-this-be-confusing&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Having to support two versions of the compiler seems to be unique to Rust&#x27;s standard library. C bypasses the question altogether by not having language intrinsics in the standard library and supporting any compiler version; Haskell only requires one version of the compiler to be supported.&lt;&#x2F;p&gt;
&lt;p&gt;Having to support two versions is in fact the original motivation for this post, since it causes
lots of pain for changes that modify both the compiler and standard library; see
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;84863&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;84863&lt;&#x2F;a&gt; for an example that modifies both in the same PR and
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;99917&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;99917&lt;&#x2F;a&gt; for an example that depends on changes to the
compiler that haven&#x27;t yet landed on beta.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-can-we-do-about-it&quot;&gt;What can we do about it?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-can-we-do-about-it&quot; aria-label=&quot;Anchor link for: what-can-we-do-about-it&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Supporting two versions is not an intrinsic requirement. We do it for two reasons:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It allows testing changes to the standard library without having to first build the compiler.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;65031&quot;&gt;Building the compiler is painfully slow&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;It allows &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;building&#x2F;bootstrapping&#x2F;what-bootstrapping-does.html#complications-of-bootstrapping&quot;&gt;using nightly standard library features&lt;&#x2F;a&gt; in the compiler before they land on beta.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;1 is &quot;just&quot; implementation work to fix: if there are no changes to the compiler, we can download CI artifacts for that commit and use those instead. There are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;81930&quot;&gt;a few bugs to fix&lt;&#x2F;a&gt; but they&#x27;re surmountable.&lt;&#x2F;p&gt;
&lt;p&gt;2 is harder. Either we add &lt;code&gt;cfg(bootstrap)&lt;&#x2F;code&gt; to the compiler to use a different implementation when building with stage0 than stage1, or we stop using nightly standard library features until they reach beta. See &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;131828-t-compiler&#x2F;topic&#x2F;Building.20rustc.20with.20beta.20libstd&#x2F;near&#x2F;209899890&quot;&gt;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;131828-t-compiler&#x2F;topic&#x2F;Building.20rustc.20with.20beta.20libstd&#x2F;near&#x2F;209899890&lt;&#x2F;a&gt; for a very (very) long discussion of the tradeoffs here.&lt;&#x2F;p&gt;
&lt;p&gt;There are some more benefits to supporting a single version not discussed there:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rebasing over master recompiles much less code. Modifying a single line in &lt;code&gt;core&lt;&#x2F;code&gt; no longer requires rebuilding the world; only changes to the compiler require the compiler to be rebuilt.&lt;&#x2F;li&gt;
&lt;li&gt;Modifying the standard library locally don&#x27;t require rebuilding the compiler. This is especially relevant to people who are changing how the standard library interacts with the compiler; we would be able to remove &lt;code&gt;--keep-stage-std 0&lt;&#x2F;code&gt; and all associated footguns as a workflow altogether.&lt;&#x2F;li&gt;
&lt;li&gt;Creating a new Rust release requires touching &lt;em&gt;drastically&lt;&#x2F;em&gt; less &lt;code&gt;cfg(bootstrap)&lt;&#x2F;code&gt; since lang items no longer need to be modified, only small parts of the compiler.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;ve put together some data on how often using those features before they hit beta happens in
practice, and - at least from 1.61.0 onwards - it appears it &lt;em&gt;never&lt;&#x2F;em&gt; happens. See
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;rust&#x2F;tree&#x2F;versions-used&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;rust&#x2F;tree&#x2F;versions-used&lt;&#x2F;a&gt; for how that data was gathered (run
&lt;code&gt;.&#x2F;collect_new_versions.sh&lt;&#x2F;code&gt;). What&#x27;s more common is renaming a method before it&#x27;s stable; see
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;79805&#x2F;files&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;79805&#x2F;files&lt;&#x2F;a&gt; for an example. The &lt;code&gt;cfg(bootstrap)&lt;&#x2F;code&gt; code to
handle this in the compiler should be pretty simple.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve talked to people on both T-libs and T-compiler and they say that removing &lt;code&gt;cfg(bootstrap)&lt;&#x2F;code&gt; would be an &lt;em&gt;enormous&lt;&#x2F;em&gt; help. Some testimonials:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;thomcc&quot;&gt;@thomcc&lt;&#x2F;a&gt;: Yes please. It&#x27;s a huge headache. It also frequently comes up as a reason not to let the const-eval team experiment with stuff, since we know &lt;code&gt;~const&lt;&#x2F;code&gt; is likely going away and don&#x27;t want to deal with the &quot;lol we &lt;code&gt;cfg(bootstrap)&lt;&#x2F;code&gt;ed off all of core::iter&quot;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fee1-dead&quot;&gt;@fee1-dead&lt;&#x2F;a&gt;: Working on const traits makes the bootstrap issue very apparent because almost all bugs would be found from attempting to use the feature in the standard library. Fixes for those bugs would need to wait six weeks before finally released as the beta compiler, which slows down development and evolution of the feature.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;m-ou-se&quot;&gt;@m-ou-se&lt;&#x2F;a&gt;: Sometimes it gets super messy with all the &lt;code&gt;cfg(bootstrap)&lt;&#x2F;code&gt; stuff for things relying on built-in macros or new lang items. Please fix cfg bootstrap hell :D&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;workingjubilee&quot;&gt;@workingjubilee&lt;&#x2F;a&gt;: Using beta stdlib would make it much easier to experiment outside the compiler&#x2F;stdlib proper.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nilstrieb&quot;&gt;@Nilstrieb&lt;&#x2F;a&gt;: I&#x27;d rather have a few cfgs in the compiler when necessary instead of cfgs in std all the time.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;but-that-just-moves-the-cfg-bootstrap-to-the-compiler&quot;&gt;&quot;But that just moves the cfg(bootstrap) to the compiler!&quot;&lt;a class=&quot;zola-anchor&quot; href=&quot;#but-that-just-moves-the-cfg-bootstrap-to-the-compiler&quot; aria-label=&quot;Anchor link for: but-that-just-moves-the-cfg-bootstrap-to-the-compiler&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;A common (incorrect) objection is that, after this change, adding new language items would require adding &lt;code&gt;cfg(bootstrap)&lt;&#x2F;code&gt; to the compiler.
This is false. The compiler &lt;em&gt;also&lt;&#x2F;em&gt; only has to support building one version of &lt;code&gt;std&lt;&#x2F;code&gt; after this change. The only time the bootstrap standard library is involved is when &lt;em&gt;building the compiler&lt;&#x2F;em&gt;. Unlike how &lt;code&gt;std&lt;&#x2F;code&gt; is intrinsically tied to the compiler due to lang items, the compiler doesn&#x27;t intrinsically depend on implementation details of the standard library; it only uses them for dogfooding.&lt;&#x2F;p&gt;
&lt;p&gt;(I don&#x27;t want to hear about how &lt;code&gt;lang&lt;&#x2F;code&gt; items are ideologically impure. I don&#x27;t care. It&#x27;s not changing.)&lt;&#x2F;p&gt;
&lt;p&gt;Here is a graph of what the build would like before:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;component&lt;&#x2F;th&gt;&lt;th&gt;built-by&lt;&#x2F;th&gt;&lt;th&gt;building&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;compiler&lt;&#x2F;td&gt;&lt;td&gt;1 std&lt;&#x2F;td&gt;&lt;td&gt;1 std&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;std&lt;&#x2F;td&gt;&lt;td&gt;2 compilers&lt;&#x2F;td&gt;&lt;td&gt;NA&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;and after:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;component&lt;&#x2F;th&gt;&lt;th&gt;built-by&lt;&#x2F;th&gt;&lt;th&gt;building&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;compiler&lt;&#x2F;td&gt;&lt;td&gt;2 std&lt;&#x2F;td&gt;&lt;td&gt;1 std&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;std&lt;&#x2F;td&gt;&lt;td&gt;1 compiler&lt;&#x2F;td&gt;&lt;td&gt;NA&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;is-the-stage-terminology-itself-confusing&quot;&gt;Is the &quot;stage&quot; terminology itself confusing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-the-stage-terminology-itself-confusing&quot; aria-label=&quot;Anchor link for: is-the-stage-terminology-itself-confusing&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;what-do-other-compilers-do-1&quot;&gt;What do other compilers do?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-do-other-compilers-do-1&quot; aria-label=&quot;Anchor link for: what-do-other-compilers-do-1&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;For GHC, &lt;code&gt;build stage1:exe:ghc-bin&lt;&#x2F;code&gt; builds stage1 GHC with the stage0 compiler.&lt;&#x2F;p&gt;
 &lt;!-- https:&#x2F;&#x2F;discourse.llvm.org&#x2F;t&#x2F;how-to-run-individual-phases-of-a-2-or-3-stage-build&#x2F;2596&#x2F;2 --&gt;
&lt;p&gt;For Clang, &lt;code&gt;ninja stage2&lt;&#x2F;code&gt; builds the stage2 clang with the stage1 compiler and &lt;code&gt;ninja clang-bootstrap-deps&lt;&#x2F;code&gt; builds the stage1 clang with the stage0 compiler.&lt;&#x2F;p&gt;
&lt;!-- https:&#x2F;&#x2F;github.com&#x2F;ocaml&#x2F;ocaml&#x2F;blob&#x2F;64ef2d0ce1eb7d5f09ac6cde1a78f74b62804cc6&#x2F;Makefile#L698-L702 --&gt;
&lt;!-- https:&#x2F;&#x2F;github.com&#x2F;ocaml&#x2F;ocaml&#x2F;blob&#x2F;64ef2d0ce1eb7d5f09ac6cde1a78f74b62804cc6&#x2F;Makefile#L833-L841 --&gt;
&lt;p&gt;OCaml uses &lt;code&gt;make coreall&lt;&#x2F;code&gt; to build the stage1 OCaml with the bootstrap compiler and &lt;code&gt;make bootstrap&lt;&#x2F;code&gt; to build a full bootstrap compiler.&lt;&#x2F;p&gt;
&lt;!-- zig is a pain in the ass to build on windows because it needs llvm installed --&gt;
&lt;!-- pypy doesn&#x27;t have stages --&gt;
&lt;!-- swift isn&#x27;t self-hosted https:&#x2F;&#x2F;github.com&#x2F;apple&#x2F;swift&#x2F;blob&#x2F;2c7b0b22831159396fe0e98e5944e64a483c356e&#x2F;www&#x2F;FAQ.rst --&gt;
&lt;!-- http:&#x2F;&#x2F;www.sbcl.org&#x2F;porting.html is unclear and I don&#x27;t feel like building it --&gt;
&lt;h4 id=&quot;what-does-rust-do-1&quot;&gt;What does Rust do?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-does-rust-do-1&quot; aria-label=&quot;Anchor link for: what-does-rust-do-1&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;x build --stage 0 rustc&lt;&#x2F;code&gt; builds stage1 rustc with the stage0 compiler.
&lt;code&gt;x build --stage 1 rustc&lt;&#x2F;code&gt; builds stage2 rustc with the stage1 compiler.&lt;&#x2F;p&gt;
&lt;p&gt;This is off-by-one from how &lt;em&gt;every other modern compiler&lt;&#x2F;em&gt; counts stages.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;building&#x2F;bootstrapping&#x2F;what-bootstrapping-does.html#understanding-stages-of-bootstrap&quot;&gt;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;building&#x2F;bootstrapping&#x2F;what-bootstrapping-does.html#understanding-stages-of-bootstrap&lt;&#x2F;a&gt;
spends several paragraphs talking about how &lt;code&gt;build --stage N&lt;&#x2F;code&gt; means &quot;build with stage N&quot;, not &quot;create the
compiler that lives in the stage N sysroot&quot;.  All the people I&#x27;ve talked to who say this
meaning of &lt;code&gt;--stage N&lt;&#x2F;code&gt; is intuitive have been using &lt;code&gt;x.py&lt;&#x2F;code&gt; for several years and are experts in the
system. Nearly all the people I&#x27;ve talked to who find it confusing are either new to the compiler,
or contribute regularly but aren&#x27;t experts in Rust&#x27;s build system - even those who are experienced
in bootstrapping compilers for other languages!&lt;&#x2F;p&gt;
&lt;p&gt;In the words of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nilstrieb&quot;&gt;@Nilstrieb&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;You build a &lt;em&gt;target&lt;&#x2F;em&gt;. The focus is always &lt;em&gt;what&lt;&#x2F;em&gt; you build.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;!-- TODO: talk with manish about how to make this less combative --&gt;
&lt;p&gt;We are not meeting that intuition today with x.py.  It seems unfortunate to have a system that only
makes sense if you&#x27;ve used it for a long time and are accustomed to it. If you&#x27;re using it for
several years, you have time to relearn the system.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;what-can-we-do-instead&quot;&gt;What can we do instead?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-can-we-do-instead&quot; aria-label=&quot;Anchor link for: what-can-we-do-instead&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;I would like to introduce four new flags:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--bootstrap-sysroot&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--dev-sysroot&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--dist-sysroot&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--reproducible-sysroot&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This correspond closely, but not exactly, to &lt;code&gt;--stage 0&#x2F;1&#x2F;2&#x2F;3&lt;&#x2F;code&gt; (respectively).
Here is a conversion guide between the two: &lt;img src=&quot;&#x2F;assets&#x2F;bootstrap-sysroot-conversion.png&quot; alt=&quot;conversion guide (see &#x2F;assets&#x2F;bootstrapping.tex for source)&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I propose &lt;em&gt;not&lt;&#x2F;em&gt; putting this in the dev-guide, but creating an inside-rust post which we link to in bootstrap&#x27;s changelog.
The idea is for people who&#x27;ve already been using x.py to see the guide, but not people learning the tool for the first time.
We would keep &lt;code&gt;--stage&lt;&#x2F;code&gt; for a time, but eventually deprecate it.&lt;&#x2F;p&gt;
&lt;p&gt;I want to call out a few interesting properties of these flags:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build --bootstrap-sysroot std&lt;&#x2F;code&gt; makes it more clear how &lt;em&gt;strange&lt;&#x2F;em&gt; it is that &lt;code&gt;std&lt;&#x2F;code&gt; is built before rustc. This isn&#x27;t something people will need to think about if we change &lt;code&gt;std&lt;&#x2F;code&gt; to only need to support one compiler.&lt;&#x2F;li&gt;
&lt;li&gt;The names are self-describing. People don&#x27;t have to wonder whether &lt;code&gt;--stage 1&lt;&#x2F;code&gt; is the flag they want or not; &lt;code&gt;--dev-sysroot&lt;&#x2F;code&gt; makes it clear it is.&lt;&#x2F;li&gt;
&lt;li&gt;The only times &lt;code&gt;--bootstrap-sysroot&lt;&#x2F;code&gt; will be used is for
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;doc&lt;&#x2F;code&gt; &#x2F; &lt;code&gt;clippy&lt;&#x2F;code&gt; (to use the beta tools instead of recompiling, although &lt;code&gt;--dev-sysroot&lt;&#x2F;code&gt; will still be supported). Given that &lt;code&gt;download-rustc&lt;&#x2F;code&gt; will be a blessed workflow, we may want to drop support for this in the future.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;build expand-yaml-anchors&lt;&#x2F;code&gt; (or other bootstrap tools); &lt;em&gt;not&lt;&#x2F;em&gt; the standard library or compiler.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;check&lt;&#x2F;code&gt; will only ever support one stage (&lt;code&gt;--dev-sysroot&lt;&#x2F;code&gt; for the compiler and std; &lt;code&gt;--bootstrap-sysroot&lt;&#x2F;code&gt; for bootstrap tools)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;test --dev-sysroot ui&lt;&#x2F;code&gt; now matches the sysroot of &lt;code&gt;build compiler&lt;&#x2F;code&gt; (!). I am planning to make &lt;code&gt;test rustc_data_structures --dev-sysroot&lt;&#x2F;code&gt; compile &lt;code&gt;rustc_data_strucutres&lt;&#x2F;code&gt; (like &lt;code&gt;--stage 0&lt;&#x2F;code&gt; today) for consistency, and so that we are always testing the compiler &lt;em&gt;that will end up&lt;&#x2F;em&gt; in the given sysroot.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;build --dev-sysroot rustdoc&lt;&#x2F;code&gt; now matches the sysroot of &lt;code&gt;build --dev-sysroot compiler&lt;&#x2F;code&gt; (!). Hopefully we can also do this for clippy and miri.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To make the new flags easier to learn, we can name the sysroots directories after the flags: &lt;code&gt;build&#x2F;host&#x2F;{bootstrap,dev,dist}-sysroot&lt;&#x2F;code&gt;.
I have not yet decided if we should introduce a &lt;code&gt;reproducible-sysroot&lt;&#x2F;code&gt; or not; see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;90244#issuecomment-1120649548&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;90244#issuecomment-1120649548&lt;&#x2F;a&gt; for some of the difficulties involved.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;misc-breaking-changes&quot;&gt;&quot;Misc breaking changes&quot;&lt;a class=&quot;zola-anchor&quot; href=&quot;#misc-breaking-changes&quot; aria-label=&quot;Anchor link for: misc-breaking-changes&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Skimmed over in the previous sections is how to get people to use &lt;code&gt;download-rustc&lt;&#x2F;code&gt;.
If we enable it unconditionally for everyone, distros will get very upset.
If we don&#x27;t enable it, people working on the standard library will have horrifically long compile times.&lt;&#x2F;p&gt;
&lt;p&gt;To avoid this, we could &lt;em&gt;require&lt;&#x2F;em&gt; people to set a profile for &lt;code&gt;config.toml&lt;&#x2F;code&gt;. To avoid making distros
hate us too much, &lt;code&gt;.&#x2F;configure&lt;&#x2F;code&gt; would set the &lt;code&gt;user&lt;&#x2F;code&gt; profile; running &lt;code&gt;.&#x2F;x.py build&lt;&#x2F;code&gt; without
creating a profile would give a hard error pointing you to &lt;code&gt;x.py setup&lt;&#x2F;code&gt;. We would still treat an
empty config.toml as opting-in to no profile.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary-of-future-work&quot;&gt;Summary of future work&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary-of-future-work&quot; aria-label=&quot;Anchor link for: summary-of-future-work&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Here are all the proposed changes in this post, gathered in one place:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Change &lt;code&gt;.&#x2F;configure&lt;&#x2F;code&gt; to set &lt;code&gt;profile = &quot;user&quot;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Make &lt;code&gt;profile&lt;&#x2F;code&gt; required in config.toml.&lt;&#x2F;li&gt;
&lt;li&gt;Fix the existing bugs in &lt;code&gt;download-rustc&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Enable &lt;code&gt;download-rustc = &quot;if-unchanged&quot;&lt;&#x2F;code&gt; by default for the &lt;code&gt;library&lt;&#x2F;code&gt; profile.&lt;&#x2F;li&gt;
&lt;li&gt;Get rid of &lt;code&gt;build --stage 0 std&lt;&#x2F;code&gt;. The compiler will be unconditionally built with beta std, not nightly std.
&lt;ul&gt;
&lt;li&gt;Get rid of &lt;code&gt;stage0-sysroot&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Make sure &lt;code&gt;download-rustc&lt;&#x2F;code&gt; doesn&#x27;t build the compiler from source if there are only library changes; this needs to be careful to still rebuild stage 2 rustc if there are library changes.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Rename &lt;code&gt;build&#x2F;host&#x2F;stage{0,1,2}&lt;&#x2F;code&gt; to &lt;code&gt;build&#x2F;host&#x2F;{bootstrap,dev,dist}-sysroot&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;--{bootstrap,dev,dist}-sysroot&lt;&#x2F;code&gt; flags.
&lt;ul&gt;
&lt;li&gt;When doing this, clippy and miri will start using the same flags as rustdoc. See &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;326414-t-infra.2Fbootstrap&#x2F;topic&#x2F;Stage.20numbering.20for.20tools&#x2F;near&#x2F;298189698&quot;&gt;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;326414-t-infra.2Fbootstrap&#x2F;topic&#x2F;Stage.20numbering.20for.20tools&#x2F;near&#x2F;298189698&lt;&#x2F;a&gt; for how tool flags are numbered today; after this change, both &lt;code&gt;build --dev-sysroot rustdoc&lt;&#x2F;code&gt; and &lt;code&gt;build --dev-sysroot clippy&lt;&#x2F;code&gt; will build rustc once, as a library.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That&#x27;s a lot of breaking changes and a lot of work, for things we are not sure will make the user
experience easier.  To avoid multiple breaking changes in short succession, I propose making all the
changes at once, and inviting people to try out the changes from a branch before merging them. If we
have trouble getting user feedback, I could create a standalone binary which uses the new
&lt;code&gt;*-sysroot&lt;&#x2F;code&gt; flags even on the master branch. Note that this will not be possible for the changes
removing &lt;code&gt;cfg(bootstrap)&lt;&#x2F;code&gt; from std, since that requires changes outside of bootstrap.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;questions-concerns-hate-mail&quot;&gt;Questions? Concerns? Hate mail?&lt;a class=&quot;zola-anchor&quot; href=&quot;#questions-concerns-hate-mail&quot; aria-label=&quot;Anchor link for: questions-concerns-hate-mail&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Feel free to contact me (&lt;code&gt;@jyn&lt;&#x2F;code&gt;) in &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;326414-t-infra.2Fbootstrap&quot;&gt;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;326414-t-infra.2Fbootstrap&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Git cheats</title>
        <published>2022-09-02T00:00:00+00:00</published>
        <updated>2022-09-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/git-cheats/"/>
        <id>https://jyn.dev/git-cheats/</id>
        
        <content type="html" xml:base="https://jyn.dev/git-cheats/">&lt;p&gt;A small note: this will be much less organized and thought out than my other blog posts because I have been unable to convince myself to write a blog in about 2 years. Instead these are some notes to myself that happen to be public for anyone who finds them useful.&lt;&#x2F;p&gt;
&lt;p&gt;A small note written after spending 5 minutes on this post: holy shit this is so deranged I&#x27;m turning into Gankra lmao&lt;&#x2F;p&gt;
&lt;h1 id=&quot;git&quot;&gt;Git&lt;a class=&quot;zola-anchor&quot; href=&quot;#git&quot; aria-label=&quot;Anchor link for: git&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;big fan of the data model.
not a fan of the UI.&lt;&#x2F;p&gt;
&lt;p&gt;Ok so before anything else, don&#x27;t panic. Your code is probably still there somewhere you just can&#x27;t find it. If you &lt;em&gt;stop running commands&lt;&#x2F;em&gt; right now, you can probably get it back.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-had-a-commit-and-then-i-checked-out-a-different-branch-and-now-i-can-t-find-the-commit-again-sob&quot;&gt;I had a commit and then I checked out a different branch and now I can&#x27;t find the commit again 😭&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-had-a-commit-and-then-i-checked-out-a-different-branch-and-now-i-can-t-find-the-commit-again-sob&quot; aria-label=&quot;Anchor link for: i-had-a-commit-and-then-i-checked-out-a-different-branch-and-now-i-can-t-find-the-commit-again-sob&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Run &lt;code&gt;git reflog&lt;&#x2F;code&gt;, it shows you all the recent commits you were on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;someone-told-me-to-rebase-and-i-did-that-but-now-git-says-failed-to-push-some-refs-why-is-this-happening&quot;&gt;someone told me to rebase and I did that but now git says &quot;failed to push some refs&quot;??? why is this happening&lt;a class=&quot;zola-anchor&quot; href=&quot;#someone-told-me-to-rebase-and-i-did-that-but-now-git-says-failed-to-push-some-refs-why-is-this-happening&quot; aria-label=&quot;Anchor link for: someone-told-me-to-rebase-and-i-did-that-but-now-git-says-failed-to-push-some-refs-why-is-this-happening&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The error probably looks like this:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ git push
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;To github.com:jyn514&#x2F;rust.git
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; ! [rejected]                simplify-storage -&amp;gt; simplify-storage (non-fast-forward)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error: failed to push some refs to &amp;#39;git@github.com:jyn514&#x2F;rust.git&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;hint: Updates were rejected because the tip of your current branch is behind
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;hint: its remote counterpart. Integrate the remote changes (e.g.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;hint: &amp;#39;git pull ...&amp;#39;) before pushing again.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;hint: See the &amp;#39;Note about fast-forwards&amp;#39; in &amp;#39;git push --help&amp;#39; for details.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is totally normal. Git just gives absolutely awful error messages. Run &lt;code&gt;git push --force-with-lease&lt;&#x2F;code&gt; and it should work fine.&lt;&#x2F;p&gt;
&lt;p&gt;Be careful using &lt;code&gt;--force&lt;&#x2F;code&gt;. 99% of the time it works. The other 1% someone else pushed to your branch and you just deleted their work. They will not be happy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wait-but-i-ran-git-pull-before-i-looked-at-your-blog-now-what-do-i-do&quot;&gt;wait but I ran git pull before I looked at your blog now what do I do???&lt;a class=&quot;zola-anchor&quot; href=&quot;#wait-but-i-ran-git-pull-before-i-looked-at-your-blog-now-what-do-i-do&quot; aria-label=&quot;Anchor link for: wait-but-i-ran-git-pull-before-i-looked-at-your-blog-now-what-do-i-do&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Your latest commit probably looks like this:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;commit 88fdea3dd2e876a92960601c019e729401e832ab (HEAD -&amp;gt; simplify-storage)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Merge: d6bd3ef8662 6b22a42e011
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Author: jyn &amp;lt;github@jyn.dev&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Date:   Fri Sep 2 19:24:33 2022 -0500
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    Merge github.com:jyn514&#x2F;rust into simplify-storage
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Get rid of it. We don&#x27;t want it. If you have changes since the latest commit, save them somewhere (e.g. &lt;code&gt;git stash&lt;&#x2F;code&gt;).
Then run &lt;code&gt;git reset --hard HEAD~&lt;&#x2F;code&gt;. Now go to the step above about &lt;code&gt;--force-with-lease&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-have-a-detached-head&quot;&gt;I have a detached HEAD&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-have-a-detached-head&quot; aria-label=&quot;Anchor link for: i-have-a-detached-head&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;wtf-does-that-mean&quot;&gt;WTF does that mean&lt;a class=&quot;zola-anchor&quot; href=&quot;#wtf-does-that-mean&quot; aria-label=&quot;Anchor link for: wtf-does-that-mean&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;You have turned into the Nick the Headless Horseman. Have fun trying to join the Headless Hunt.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;no-stop-i-came-here-for-help&quot;&gt;No stop I came here for help&lt;a class=&quot;zola-anchor&quot; href=&quot;#no-stop-i-came-here-for-help&quot; aria-label=&quot;Anchor link for: no-stop-i-came-here-for-help&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Git doesn&#x27;t think you&#x27;re on a branch or tag.&lt;&#x2F;p&gt;
&lt;p&gt;This is &lt;em&gt;not&lt;&#x2F;em&gt; the same as being on a commit that&#x27;s not in any branch or tag. It&#x27;s perfectly possible
to be on the same commit as the latest &lt;code&gt;main&lt;&#x2F;code&gt; and still have a detached HEAD. It just means that
any new commit you make in this state won&#x27;t be on a branch.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-does-this-help-me-i-don-t-understand&quot;&gt;How does this help me I don&#x27;t understand&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-does-this-help-me-i-don-t-understand&quot; aria-label=&quot;Anchor link for: how-does-this-help-me-i-don-t-understand&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Everything is fine. All your work is still here. You just need to figure out what you want to do next.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;i-don-t-care-about-any-of-the-work-i-ve-done-in-the-last-day-i-just-want-a-git-repo-that-works-i-will-wipe-this-directory-if-you-don-t-help&quot;&gt;I don&#x27;t care about any of the work I&#x27;ve done in the last day I just want a git repo that works I will wipe this directory if you don&#x27;t help&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-don-t-care-about-any-of-the-work-i-ve-done-in-the-last-day-i-just-want-a-git-repo-that-works-i-will-wipe-this-directory-if-you-don-t-help&quot; aria-label=&quot;Anchor link for: i-don-t-care-about-any-of-the-work-i-ve-done-in-the-last-day-i-just-want-a-git-repo-that-works-i-will-wipe-this-directory-if-you-don-t-help&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;DO NOT DO THIS IF YOU HAVE WORK YOU WANT TO SAVE!!!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Run &lt;code&gt;git checkout --force $(git rev-parse --abbrev-ref origin&#x2F;HEAD)&lt;&#x2F;code&gt;. If that gives an error for any reason try &lt;code&gt;git checkout --force origin&#x2F;master &lt;&#x2F;code&gt;or &lt;code&gt;origin&#x2F;main&lt;&#x2F;code&gt; instead. If none of those work IDK what to tell you maybe wiping the repo is the best idea after all. Good luck.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;i-have-work-i-want-to-save-please-help-me-fix-this-i-have-a-deadline-in-an-hour&quot;&gt;I have work I want to save please help me fix this I have a deadline in an hour&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-have-work-i-want-to-save-please-help-me-fix-this-i-have-a-deadline-in-an-hour&quot; aria-label=&quot;Anchor link for: i-have-work-i-want-to-save-please-help-me-fix-this-i-have-a-deadline-in-an-hour&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h4&gt;
&lt;p&gt;Ok. Pick which branch you want to put your work on. I&#x27;m going to pick &lt;code&gt;bark&lt;&#x2F;code&gt; because branches have bark. haha&lt;&#x2F;p&gt;
&lt;p&gt;Does the commit you&#x27;re on have the work you want to save?&lt;&#x2F;p&gt;
&lt;h5 id=&quot;yes-how-do-i-get-it-to-work&quot;&gt;yes how do I get it to work&lt;a class=&quot;zola-anchor&quot; href=&quot;#yes-how-do-i-get-it-to-work&quot; aria-label=&quot;Anchor link for: yes-how-do-i-get-it-to-work&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h5&gt;
&lt;p&gt;Run &lt;code&gt;git branch --delete bark &amp;amp;&amp;amp; git checkout --branch bark&lt;&#x2F;code&gt;. This is the least invasive way to fix things;
whatever untracked code is in your working directory won&#x27;t be modified, and the old branch will still be in your reflog if you really need it. If you don&#x27;t know what that means, that&#x27;s ok, you&#x27;re on the right branch now and you can push it wherever you need.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;no-please-i-don-t-know-how-i-got-into-this-state-i-really-hate-git-right-now&quot;&gt;no please I don&#x27;t know how I got into this state I really hate git right now&lt;a class=&quot;zola-anchor&quot; href=&quot;#no-please-i-don-t-know-how-i-got-into-this-state-i-really-hate-git-right-now&quot; aria-label=&quot;Anchor link for: no-please-i-don-t-know-how-i-got-into-this-state-i-really-hate-git-right-now&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h5&gt;
&lt;p&gt;Figure out which commit has the work you want to save. Then run &lt;code&gt;git checkout &amp;lt;that commit&amp;gt;&lt;&#x2F;code&gt; and then follow the steps about branches immediately above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;git-tells-me-something-about-would-overwrite-untracked-files-idk-what-that-means-i-just-want-to-pull-the-latest-branch&quot;&gt;Git tells me something about &quot;would overwrite untracked files&quot;? idk what that means I just want to pull the latest branch&lt;a class=&quot;zola-anchor&quot; href=&quot;#git-tells-me-something-about-would-overwrite-untracked-files-idk-what-that-means-i-just-want-to-pull-the-latest-branch&quot; aria-label=&quot;Anchor link for: git-tells-me-something-about-would-overwrite-untracked-files-idk-what-that-means-i-just-want-to-pull-the-latest-branch&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m going to assume the error looks something like this:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error: The following untracked working tree files would be overwritten by reset:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        src&#x2F;tools&#x2F;rls&#x2F;Cargo.toml
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;        src&#x2F;tools&#x2F;rls&#x2F;README.md
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Please move or remove them before you reset.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Aborting
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;fatal: could not move back to 9ba169a73acfa9c9875b76eec09e9a91cc6246df
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are three things I can think of that could be going wrong here:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You made some changes and didn&#x27;t commit them. Commit them now. Go. Do it. &lt;code&gt;git add src&#x2F;tools&#x2F;rls &amp;amp;&amp;amp; git commit&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This is in a submodule and git got confused. If you don&#x27;t know what a submodule is, mentally replace it with &quot;code I have never modified and will never want to modify&quot;. You can ignore this by running &lt;code&gt;git submodule deinit -f src&#x2F;tools&#x2F;rls&lt;&#x2F;code&gt; (or whichever directory the submodule starts in - you can check with &lt;code&gt;git submodule status&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;DO NOT DO THIS&lt;&#x2F;strong&gt; if you have made changes to that directory you want to save. Git will destroy all you hold dear. It is a sharp and powerful tool. You might call it ... a subtle knife.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This used to be a submodule and it&#x27;s no longer a submodule. You tried the &lt;code&gt;deinit&lt;&#x2F;code&gt; thing above and it didn&#x27;t help. Try &lt;code&gt;rm -rf src&#x2F;tools&#x2F;rls&lt;&#x2F;code&gt;. This does exactly what it looks like, don&#x27;t do it if you want to save your work.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;If none of those fix it, glhf sucks to be you&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-m-in-rust-lang-rust-and-cargo-lock-keeps-showing-modifications-but-i-definitely-didn-t-touch-anything&quot;&gt;I&#x27;m in rust-lang&#x2F;rust and Cargo.lock keeps showing modifications but I definitely didn&#x27;t touch anything ???&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-m-in-rust-lang-rust-and-cargo-lock-keeps-showing-modifications-but-i-definitely-didn-t-touch-anything&quot; aria-label=&quot;Anchor link for: i-m-in-rust-lang-rust-and-cargo-lock-keeps-showing-modifications-but-i-definitely-didn-t-touch-anything&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;yes this is a very specific problem. no I&#x27;m not going to take it out of the blog.&lt;&#x2F;p&gt;
&lt;p&gt;This happens because your submodules are out of date. Run &lt;code&gt;.&#x2F;x.py --help&lt;&#x2F;code&gt;, which updates submodules for you.
Under the hood this is running the equivalent of &lt;code&gt;git submodule update --init --recursive&lt;&#x2F;code&gt; which makes sure all the rust tool submodules are up to date.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;that-didn-t-help&quot;&gt;that didn&#x27;t help.&lt;a class=&quot;zola-anchor&quot; href=&quot;#that-didn-t-help&quot; aria-label=&quot;Anchor link for: that-didn-t-help&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;sucks to be you&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-made-a-commit-and-then-i-realized-i-want-to-make-more-changes-but-also-people-getting-annoyed-when-i-add-lots-of-commits-what-do-i-do&quot;&gt;I made a commit and then I realized I want to make more changes but also people getting annoyed when I add lots of commits what do I do&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-made-a-commit-and-then-i-realized-i-want-to-make-more-changes-but-also-people-getting-annoyed-when-i-add-lots-of-commits-what-do-i-do&quot; aria-label=&quot;Anchor link for: i-made-a-commit-and-then-i-realized-i-want-to-make-more-changes-but-also-people-getting-annoyed-when-i-add-lots-of-commits-what-do-i-do&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;First make your changes. Then run &lt;code&gt;git add .&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you want to change the latest commit you made, run &lt;code&gt;git commit --amend&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to change an earlier commit, run &lt;code&gt;git commit --fixup &amp;lt;earlier commit&amp;gt; &amp;amp;&amp;amp; git rebase -i --autosquash &amp;lt;earlier commit&amp;gt;~&lt;&#x2F;code&gt;. Type the &lt;code&gt;~&lt;&#x2F;code&gt; literally but remove the &lt;code&gt;&amp;lt;&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you don&#x27;t know which commit you want to change, but you know it&#x27;s a commit you made since you made this branch, install
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tummychow&#x2F;git-absorb&#x2F;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;tummychow&#x2F;git-absorb&#x2F;&lt;&#x2F;a&gt; then run the &lt;code&gt;autosquash&lt;&#x2F;code&gt; command from above. Absorb does magic to pick the right commits.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to change a commit that&#x27;s already on master, don&#x27;t. Just don&#x27;t.
If you&#x27;re &lt;em&gt;really&lt;&#x2F;em&gt;, &lt;em&gt;truly&lt;&#x2F;em&gt; convinced you need to, and you&#x27;re &lt;em&gt;sure&lt;&#x2F;em&gt; no one else minds (which in practice is probably never true), you can use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;newren&#x2F;git-filter-repo&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;newren&#x2F;git-filter-repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-made-a-merge-commit-but-now-someone-is-telling-me-merge-commits-aren-t-allowed-how-do-i-fix-this-please-i-already-spent-3-hours-on-this-i-don-t-want-to-spend-3-more&quot;&gt;I made a merge commit but now someone is telling me merge commits aren&#x27;t allowed how do I fix this?? please I already spent 3 hours on this I don&#x27;t want to spend 3 more&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-made-a-merge-commit-but-now-someone-is-telling-me-merge-commits-aren-t-allowed-how-do-i-fix-this-please-i-already-spent-3-hours-on-this-i-don-t-want-to-spend-3-more&quot; aria-label=&quot;Anchor link for: i-made-a-merge-commit-but-now-someone-is-telling-me-merge-commits-aren-t-allowed-how-do-i-fix-this-please-i-already-spent-3-hours-on-this-i-don-t-want-to-spend-3-more&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Run &lt;code&gt;git rebase -i $(git rev-parse --abbrev-ref origin&#x2F;HEAD)&lt;&#x2F;code&gt; (or whatever your default branch is). Then go up to the bit about &quot;failed to push some refs&quot; above.&lt;&#x2F;p&gt;
&lt;p&gt;Yes this will probably cause conflicts. No I don&#x27;t know how to avoid that, probably some nonsense with &lt;code&gt;git reset $(git merge-base $(git rev-parse --abbrev-ref origin&#x2F;HEAD)) &amp;amp;&amp;amp; git add . &amp;amp;&amp;amp; git commit&lt;&#x2F;code&gt; or whatever. Don&#x27;t blame me if that doesn&#x27;t work, I didn&#x27;t test it. Also it throws away all the history, you keep the work but not the commit messages, you have to fish them up again with &lt;code&gt;git reflog&lt;&#x2F;code&gt; or &lt;code&gt;git for-each-ref --sort=committerdate refs&#x2F;heads&#x2F; | tail -n1 | cut -d&#x27; &#x27; -f1 | xargs git log&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;aaa&quot;&gt;AAA&lt;a class=&quot;zola-anchor&quot; href=&quot;#aaa&quot; aria-label=&quot;Anchor link for: aaa&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;yeah no that&#x27;s it have fun kid&lt;&#x2F;p&gt;
&lt;p&gt;ok no actually one more thing —&lt;&#x2F;p&gt;
&lt;p&gt;can I talk for a second about how absolutely &lt;em&gt;awful&lt;&#x2F;em&gt; every error message I&#x27;ve quoted here is. they are so bad I don&#x27;t even refer to them when explaining what went wrong.
half the time they point you to completely the wrong solution; the other half they give no indication at all of why something went wrong.&lt;&#x2F;p&gt;
&lt;p&gt;this is not how it should be. things can be better. here is an error message for the &quot;push after rebase&quot; that is actually useful:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ git push
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;To git@github.com:jyn514&#x2F;rust.git (simplify-storage -&amp;gt; origin&#x2F;simplify-storage)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error: failed to push 1 commit to &amp;#39;origin&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;hint: Both your current branch and the remote branch have changed since the last time you pushed changes.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;hint: The commits locally and in your remote have the same descriptions, and you just finished a rebase.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;hint: If you want to overwrite the commits on the remote, use &amp;#39;git push --force-with-lease&amp;#39; to push.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;note: See https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&#x2F;Git-Branching-Rebasing for more information about rebasing.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See how that&#x27;s helpful? see how you understand more after reading it than before? unlike the absolutely useless error before&lt;&#x2F;p&gt;
&lt;p&gt;god ok that&#x27;s it for real I&#x27;m done now&lt;&#x2F;p&gt;
&lt;h3 id=&quot;update-now-that-this-is-apparently-popular&quot;&gt;update now that this is apparently popular&lt;a class=&quot;zola-anchor&quot; href=&quot;#update-now-that-this-is-apparently-popular&quot; aria-label=&quot;Anchor link for: update-now-that-this-is-apparently-popular&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;go read https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;git.html too, it&#x27;s the most comprehensive document on rebase workflows that I&#x27;ve seen. no the official docs don&#x27;t count, if you don&#x27;t explain the common errors you run into it&#x27;s not comprehensive. also the manpages are useless unless you already know what the command does in which case WHAT WAS THE POINT OF THE MAN PAGE&lt;&#x2F;p&gt;
&lt;p&gt;also go read my twitter where you can read more nonsense like me complaining about how I can&#x27;t convince myself to go to sleep &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jynelson514&#x2F;&quot;&gt;https:&#x2F;&#x2F;twitter.com&#x2F;jynelson514&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>bootstrapping: the once and future compiler</title>
        <published>2022-08-05T00:00:00+00:00</published>
        <updated>2022-08-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/talks/bootstrapping/"/>
        <id>https://jyn.dev/talks/bootstrapping/</id>
        
        <content type="html" xml:base="https://jyn.dev/talks/bootstrapping/"></content>
        
    </entry><entry xml:lang="en">
        <title>async() => { await }</title>
        <published>2022-02-09T00:00:00+00:00</published>
        <updated>2022-02-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/talks/async-await/"/>
        <id>https://jyn.dev/talks/async-await/</id>
        
        <content type="html" xml:base="https://jyn.dev/talks/async-await/"></content>
        
    </entry><entry xml:lang="en">
        <title>I'll Rust With You: the song</title>
        <published>2021-09-10T00:00:00+00:00</published>
        <updated>2021-09-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/i-ll-rust-with-you-the-song/"/>
        <id>https://jyn.dev/i-ll-rust-with-you-the-song/</id>
        
        <content type="html" xml:base="https://jyn.dev/i-ll-rust-with-you-the-song/">&lt;h1 id=&quot;i-ll-rust-with-you-the-song&quot;&gt;I&#x27;ll Rust With You: the song&lt;a class=&quot;zola-anchor&quot; href=&quot;#i-ll-rust-with-you-the-song&quot; aria-label=&quot;Anchor link for: i-ll-rust-with-you-the-song&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Niko Matsakis, co-lead for the Rust language team, recently published a song titled &lt;a href=&quot;https:&#x2F;&#x2F;smallcultfollowing.com&#x2F;babysteps&#x2F;blog&#x2F;2021&#x2F;05&#x2F;26&#x2F;edition-the-song&#x2F;&quot;&gt;&quot;Edition: the
song&quot;&lt;&#x2F;a&gt;. I decided I was not to be outdone and sang a cover of &quot;I&#x27;ll Rust With You&quot;, by
&lt;a href=&quot;https:&#x2F;&#x2F;steampoweredgiraffe.com&#x2F;&quot;&gt;Steam Powered Giraffe&lt;&#x2F;a&gt;. The song has absolutely no relation to the Rust language other than
the title, I just think it&#x27;s fun.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;video&quot;&gt;Video&lt;a class=&quot;zola-anchor&quot; href=&quot;#video&quot; aria-label=&quot;Anchor link for: video&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;chqv-MY1PGQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;&#x2F;iframe&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>borrow-checker FAQs</title>
        <published>2021-03-20T00:00:00+00:00</published>
        <updated>2021-03-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/borrow-checker-faqs/"/>
        <id>https://jyn.dev/borrow-checker-faqs/</id>
        
        <content type="html" xml:base="https://jyn.dev/borrow-checker-faqs/">&lt;p&gt;I got lots of positive feedback about &lt;a href=&quot;https:&#x2F;&#x2F;jyn514.github.io&#x2F;2020&#x2F;09&#x2F;05&#x2F;Rust-in-2021.html#faq&quot;&gt;the FAQ
section&lt;&#x2F;a&gt; in my Rust 2020 blog post, so
I&#x27;m trying that format again for another topic that&#x27;s been requested a lot: How to fix common
borrow-checker issues. This isn&#x27;t meant to explain how or why the borrow checker works the way it
does (see &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;lifetimes.html&quot;&gt;The Nomicon&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;matklad.github.io&#x2F;2020&#x2F;07&#x2F;15&#x2F;two-beautiful-programs.html&quot;&gt;Two Beautiful Rust
Programs&lt;&#x2F;a&gt; for that), just how
to work around some of its current limitations.&lt;&#x2F;p&gt;
&lt;p&gt;In a small break from the format, the &#x27;questions&#x27; will instead be Rust code and the accompanying
compiler error. I make no pretense that the code is doing useful work, it&#x27;s just meant to give
examples of errors.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;faq&quot;&gt;FAQ&lt;a class=&quot;zola-anchor&quot; href=&quot;#faq&quot; aria-label=&quot;Anchor link for: faq&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;How do I modify elements in a collection while also modifying the collection?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=90cf38acb25060d159d46933ba3a0608&quot;&gt;Playground&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; queue &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; elem &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; queue&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt;elem &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    queue&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;push&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt;elem &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error[E0499]: cannot borrow `queue` as mutable more than once at a time
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; --&amp;gt; src&#x2F;main.rs:5:9
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;3 |     for elem in queue.iter_mut() {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  |                 ----------------
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  |                 |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  |                 first mutable borrow occurs here
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  |                 first borrow later used here
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;4 |         *elem += 2;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;5 |         queue.push(*elem + 1);
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  |         ^^^^^ second mutable borrow occurs here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This happens because for-loops borrow the iterator for the &lt;em&gt;whole&lt;&#x2F;em&gt; loop, not just for a single
iteration. You can work around it by using &lt;code&gt;while let&lt;&#x2F;code&gt; instead:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; queue &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;while&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; elem&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; queue&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    elem &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    queue&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;push&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;elem &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that this has a behavior change: unlike the previous loop, this removes the element from the
queue before modifying it. You can get the behavior from before back by adding &lt;code&gt;queue.insert(0, elem)&lt;&#x2F;code&gt; (although at that point you may want to use a
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;collections&#x2F;struct.VecDeque.html&quot;&gt;&lt;code&gt;VecDeque&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have disjoint fields in a struct, but because I use one in a closure, I can&#x27;t use the other.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-struct z-rust&quot;&gt;S&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;elems&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; s &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; S &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    elems&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    metadata&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;thread&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;spawn&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; x &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;elems &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; x&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;metadata&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error[E0382]: borrow of moved value: `s`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  --&amp;gt; src&#x2F;main.rs:18:16
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;8  | let s = S {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |     - move occurs because `s` has type `S`, which does not implement the `Copy` trait
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;12 | std::thread::spawn(|| {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |                    -- value moved into closure here
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;13 |     for x in s.elems {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |              ------- variable moved due to use in closure
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;18 | println!(&amp;quot;{}&amp;quot;, s.metadata);
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |                ^^^^^^^^^^ value borrowed here after move
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This happens because the closure captures the whole &lt;code&gt;s&lt;&#x2F;code&gt; struct, not just the fields it needs.
You can explicitly say which fields to capture by adding a &lt;code&gt;let&lt;&#x2F;code&gt; statement:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; elems &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;elems&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;thread&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;spawn&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; x &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; elems &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; x&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is done automatically for you with &lt;code&gt;#![feature(capture_disjoint_fields)]&lt;&#x2F;code&gt;, which will
hopefully be &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;project-rfc-2229&#x2F;milestones&quot;&gt;enabled by default&lt;&#x2F;a&gt; in the 2021 edition.&lt;&#x2F;p&gt;
&lt;p&gt;Similar issues happen for structs that aren&#x27;t &lt;code&gt;Send&lt;&#x2F;code&gt; or &lt;code&gt;Sync&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;cell&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;RefCell&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-struct z-rust&quot;&gt;S&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;elems&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;RefCell&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; s &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; S &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    elems&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    metadata&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;RefCell&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;new&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;thread&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;spawn&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; x &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;elems &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; x&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;metadata&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error[E0277]: `RefCell&amp;lt;i32&amp;gt;` cannot be shared between threads safely
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   --&amp;gt; src&#x2F;main.rs:16:1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;16  | std::thread::spawn(|| {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    | ^^^^^^^^^^^^^^^^^^ `RefCell&amp;lt;i32&amp;gt;` cannot be shared between threads safely
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    = help: within `S`, the trait `Sync` is not implemented for `RefCell&amp;lt;i32&amp;gt;`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    = note: required because it appears within the type `S`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    = note: required because of the requirements on the impl of `Send` for `&amp;amp;S`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    = note: required because it appears within the type `[closure@src&#x2F;main.rs:16:20: 20:2]`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error: aborting due to previous error
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you only need a few of the fields, you can add explicit &lt;code&gt;let&lt;&#x2F;code&gt; statements in the same way.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; elems &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;elems&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;std&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-path z-rust&quot;&gt;thread&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;spawn&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; x &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; elems &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; x&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-support z-macro z-rust&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-placeholder z-rust&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;metadata&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;borrow&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Moving a line of code into a separate function makes it fail to compile.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There are actually quite a few things that will cause this. The most common are:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The compiler can no longer tell you&#x27;re using disjoint fields.&lt;&#x2F;li&gt;
&lt;li&gt;You wrote the wrong lifetimes (or the elided lifetimes are wrong).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;An example of 1 (&lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=2f84148a276b0c8595a8023363f2f6a7&quot;&gt;Playground&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-struct z-rust&quot;&gt;S&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;elems&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-impl z-rust&quot;&gt;impl&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-impl z-rust&quot;&gt;S&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;set_metadata&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;self&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;val&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-variable z-language z-rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;metadata &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; val&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; s &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; S &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    elems&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    metadata&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; _elems &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;elems&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; moves out of `elems`
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;metadata &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; works fine
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;set_metadata&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; breaks because `elems` is moved
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error[E0382]: borrow of partially moved value: `s`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  --&amp;gt; src&#x2F;main.rs:22:1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;20 | let elems = s.elems; &#x2F;&#x2F; moves out of `elems`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |             ------- value partially moved here
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;21 | s.metadata = 1; &#x2F;&#x2F; works fine
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;22 | s.set_metadata(1); &#x2F;&#x2F; breaks because `elems` is moved
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   | ^ value borrowed here after partial move
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   = note: partial move occurs because `s.elems` has type `Vec&amp;lt;i32&amp;gt;`, which does not implement the `Copy` trait
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is no simple fix for this; this is the main reason getters and setters are discouraged in
Rust. You can either manually inline the code, or change your struct so that the relevant parts
use composition instead of all being in the same struct:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-struct z-rust&quot;&gt;S&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;elems&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; Inner,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-struct z-rust&quot;&gt;Inner&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-impl z-rust&quot;&gt;impl&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-impl z-rust&quot;&gt;Inner&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;set_metadata&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;self&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;val&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-rust&quot;&gt;self&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; Inner&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;val&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; s &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; S &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    elems&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    metadata&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; Inner&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; _elems &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;elems&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; moves out of `elems`
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;metadata &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; Inner&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; works fine
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;metadata&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;set_metadata&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; works fine
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An example of 2 (&lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=99a4597a50b4c7915325ef1caa287040&quot;&gt;Playground&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-struct z-rust&quot;&gt;S&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-impl z-rust&quot;&gt;impl&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-impl z-rust&quot;&gt;S&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&amp;#39;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;inner&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-variable z-language z-rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; x &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; _p &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; s &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; S&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; _q &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; s &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; S&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; error: does not live long enough
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This one is tricky to spot: the issue isn&#x27;t the code you wrote, but rather the code you &lt;em&gt;didn&#x27;t&lt;&#x2F;em&gt; write.
If you desugar &lt;code&gt;inner()&lt;&#x2F;code&gt;, it would be something like&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;inner&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;s&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;s&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-language z-rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this is unnecessarily restrictive - &lt;code&gt;self.0&lt;&#x2F;code&gt; lives longer than &lt;code&gt;self&lt;&#x2F;code&gt;. The fix is to write the lifetime yourself:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-impl z-rust&quot;&gt;impl&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt; &lt;span class=&quot;z-entity z-name z-impl z-rust&quot;&gt;S&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;inner&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;        &lt;span class=&quot;z-variable z-language z-rust&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-impl z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a lot more variants of this. I might publish a follow-up post with more.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;How can I use an iterator from a struct when I also need mutable access? I know that my changes won&#x27;t affect the iterator.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=d5324bfe8d3429c6f40fe09bd52c7d04&quot;&gt;Playground&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; same `s` from earlier example
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-struct z-rust&quot;&gt;S&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;elems&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; s &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; S &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    elems&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-macro z-rust&quot;&gt;vec!&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    metadata&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; x &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;elems&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-function z-rust&quot;&gt;takes_s&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt;x&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; s&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;takes_s&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;x&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;i32&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;s&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; S&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;metadata &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; x&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  --&amp;gt; src&#x2F;main.rs:13:17
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;12 | for x in s.elems.iter() {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |          --------------
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |          |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |          immutable borrow occurs here
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |          immutable borrow later used here
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;13 |     takes_s(*x, &amp;amp;mut s);
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   |                 ^^^^^^ mutable borrow occurs here
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can &lt;code&gt;.collect&lt;&#x2F;code&gt; the iterator before using it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-rust&quot;&gt;let&lt;&#x2F;span&gt; iter&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; s&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;elems&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;copied&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; x &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; iter &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-function z-rust&quot;&gt;takes_s&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;x&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; s&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that this isn&#x27;t ideal in several ways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you&#x27;re wrong that &lt;code&gt;takes_s&lt;&#x2F;code&gt; doesn&#x27;t affect the iterator, it changes the behavior.&lt;&#x2F;li&gt;
&lt;li&gt;It makes the iterator eager instead of lazy, which means you have to allocate a new collection
(you don&#x27;t strictly have to use &lt;code&gt;Vec&lt;&#x2F;code&gt;, but there&#x27;s no reason to use anything else).&lt;&#x2F;li&gt;
&lt;li&gt;It requires either copying or cloning the elements.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, in some cases, there&#x27;s no alternative. See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;82020#discussion_r575905338&quot;&gt;this Rustdoc
PR&lt;&#x2F;a&gt; for a real-world example.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title><pre><code>&amp;'borrow mut dyn FnMut(BrokenLink&lt;'input&gt;) -> CowStr&lt;'input&gt;</code></pre> and other valid rust programs</title>
        <published>2020-12-08T00:00:00+00:00</published>
        <updated>2020-12-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/borrow-mut-dyn-fnmut-brokenlink-cowstring-and-other-valid-rust-programs/"/>
        <id>https://jyn.dev/borrow-mut-dyn-fnmut-brokenlink-cowstring-and-other-valid-rust-programs/</id>
        
        <content type="html" xml:base="https://jyn.dev/borrow-mut-dyn-fnmut-brokenlink-cowstring-and-other-valid-rust-programs/">&lt;p&gt;This is a story about type signatures, Higher Ranked Trait Bounds (&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;hrtb.html&quot;&gt;HRTB&lt;&#x2F;a&gt;), and the most
confusing diagnostics bug I&#x27;ve seen in the Rust compiler. Along the way we&#x27;ll learn how
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;raphlinus&#x2F;pulldown-cmark&quot;&gt;&lt;code&gt;pulldown-cmark&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; has been trying to fix the same API for 3 different releases, and discover
that some bugs only appear at the compile time of downstream crates.&lt;&#x2F;p&gt;
&lt;p&gt;If you don&#x27;t know what some of the words mean, there is &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;borrow-mut-dyn-fnmut-brokenlink-cowstring-and-other-valid-rust-programs&#x2F;#appendix&quot;&gt;an appendix&lt;&#x2F;a&gt;. Unfortunately,
this article needs too much background knowledge to fit all of it in a blog post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;a class=&quot;zola-anchor&quot; href=&quot;#background&quot; aria-label=&quot;Anchor link for: background&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Our story starts with a simple change to rustdoc: It wants to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;79781&quot;&gt;hide the &lt;code&gt;[]&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; around &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustdoc&#x2F;linking-to-items-by-name.html&quot;&gt;intra-doc links&lt;&#x2F;a&gt; in search results.
(For context, search results have links stripped since otherwise the relative links would be broken, which means rustdoc needs to do some preprocessing of the markdown.)
That would turn screenshots like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;37223377&#x2F;101309556-92908680-3801-11eb-8420-0609e7af4e92.png&quot; alt=&quot;Before&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;into this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;user-images.githubusercontent.com&#x2F;37223377&#x2F;101309591-a0dea280-3801-11eb-85e1-620549f64bf6.png&quot; alt=&quot;After&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Rustdoc does this in several &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;d32c80467db39672fa612e1519564ad5fd473e91&#x2F;src&#x2F;librustdoc&#x2F;html&#x2F;markdown.rs#L1066&quot;&gt;different&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;blob&#x2F;d32c80467db39672fa612e1519564ad5fd473e91&#x2F;src&#x2F;librustdoc&#x2F;html&#x2F;markdown.rs#L1151&quot;&gt;places&lt;&#x2F;a&gt;, so
naturally this should be pulled out into a single function that can be reused. This is a callback
to pulldown&#x27;s markdown &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;pulldown-cmark&#x2F;0.8.0&#x2F;pulldown_cmark&#x2F;struct.Parser.html&quot;&gt;&lt;code&gt;Parser&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; Omitted: in real life, this would only mark intra-doc links as valid, not all broken links.
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;summary_broken_link_callback&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;link&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;BrokenLink&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;CowStr&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;CowStr&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;#&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;into&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; link&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;reference&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;into&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Except that doesn&#x27;t work:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error[E0621]: explicit lifetime required in the type of `md`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    --&amp;gt; src&#x2F;librustdoc&#x2F;html&#x2F;markdown.rs:1065:9
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;1050 | fn markdown_summary_with_limit(md: &amp;amp;str, length_limit: usize) -&amp;gt; (String, bool) {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     |                                    ---- help: add explicit lifetime `&amp;#39;static` to the type of `md`: `&amp;amp;&amp;#39;static str`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;1065 |         Parser::new_with_broken_link_callback(md, summary_opts(), Some(&amp;amp;mut summary_broken_link_callback))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime `&amp;#39;static` required
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error: higher-ranked subtype error
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    --&amp;gt; src&#x2F;librustdoc&#x2F;html&#x2F;markdown.rs:1065:72
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;1065 |         Parser::new_with_broken_link_callback(md, summary_opts(), Some(&amp;amp;mut summary_broken_link_callback))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     |                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error[E0716]: temporary value dropped while borrowed
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    --&amp;gt; src&#x2F;librustdoc&#x2F;html&#x2F;markdown.rs:1065:77
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;1065 |         Parser::new_with_broken_link_callback(md, summary_opts(), Some(&amp;amp;mut summary_broken_link_callback))
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     |         --------------------------------------------------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^--
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     |         |                                                                   |                            |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     |         |                                                                   |                            temporary value is freed at the end of this statement
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     |         |                                                                   creates a temporary which is freed while still in use
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;     |         argument requires that borrow lasts for `&amp;#39;static`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;lifetime-annotations-action-at-a-distance&quot;&gt;Lifetime annotations: action at a distance&lt;a class=&quot;zola-anchor&quot; href=&quot;#lifetime-annotations-action-at-a-distance&quot; aria-label=&quot;Anchor link for: lifetime-annotations-action-at-a-distance&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;What on earth is going on here? We have a simple function that takes a link and returns it, right?
What does that have to do with &quot;higher-ranked subtypes&quot; and &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;? To find out, we have to look
at the definition of &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;pulldown-cmark&#x2F;0.8.0&#x2F;pulldown_cmark&#x2F;struct.Parser.html#method.new_with_broken_link_callback&quot;&gt;&lt;code&gt;new_with_broken_link_callback()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;new_with_broken_link_callback&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;text&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;str&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;options&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; Options,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;broken_link_callback&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; dyn &lt;span class=&quot;z-support z-type z-rust&quot;&gt;FnMut&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;BrokenLink&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&amp;#39;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-generic z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;CowStr&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;CowStr&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;Parser&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt; &lt;span class=&quot;z-comment z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;*&lt;&#x2F;span&gt; ... &lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wow! There&#x27;s a lot going on here, especially in &lt;code&gt;broken_link_callback&lt;&#x2F;code&gt;. Let&#x27;s take that type apart a little:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Option&lt;&#x2F;code&gt; means the callback is optional; if you pass in &lt;code&gt;None&lt;&#x2F;code&gt; it will just do nothing.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;&#x27;a mut&lt;&#x2F;code&gt; is a mutable reference.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;FnMut(BrokenLink&amp;lt;&#x27;_&amp;gt;) -&amp;gt; Option&amp;lt;(CowStr&amp;lt;&#x27;a&amp;gt;, CowStr&amp;lt;&#x27;a&amp;gt;)&amp;gt;&lt;&#x2F;code&gt; is a trait for &#x27;functions taking &lt;code&gt;BrokenLink&lt;&#x2F;code&gt; and returning a tuple of &lt;code&gt;CowStr&lt;&#x2F;code&gt;&#x27;.&lt;&#x2F;li&gt;
&lt;li&gt;Because &lt;code&gt;FnMut&lt;&#x2F;code&gt; is a &lt;em&gt;trait&lt;&#x2F;em&gt; and not a type, &lt;code&gt;dyn&lt;&#x2F;code&gt; turns it into a type (i.e. this is &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;28961957&#x2F;example-of-runtime-polymorphism-in-java&quot;&gt;runtime polymorphism&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;But there&#x27;s something funny here - the &lt;em&gt;same&lt;&#x2F;em&gt; lifetime &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; is used for both the reference to the
function, and the types it outputs. That&#x27;s what made our function break: since
&lt;code&gt;summary_broken_link_callback&lt;&#x2F;code&gt; is a function, any reference to it has a &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime.
Fortunately, Rust will implicitly &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;lifetimes.html#the-area-covered-by-a-lifetime&quot;&gt;reborrow&lt;&#x2F;a&gt; the reference if it lives too long. Unfortunately,
we don&#x27;t know how long it &lt;em&gt;should&lt;&#x2F;em&gt; live. That&#x27;s why the error is mentioning &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;; since it can&#x27;t figure out the right lifetime, it falls back to the longest possible.
By looking at the definition of &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;pulldown-cmark&#x2F;0.8.0&#x2F;src&#x2F;pulldown_cmark&#x2F;parse.rs.html#2051-2062&quot;&gt;&lt;code&gt;Parser&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, we can see why that gives an error about &lt;code&gt;md&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-struct z-rust&quot;&gt;Parser&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;md&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;str&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;broken_link_callback&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;BrokenLinkCallback&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt; ... some fields omitted
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-type z-rust&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-rust&quot;&gt;BrokenLinkCallback&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; dyn &lt;span class=&quot;z-support z-type z-rust&quot;&gt;FnMut&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;BrokenLink&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-generic z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;CowStr&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;CowStr&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So there&#x27;s &lt;em&gt;many&lt;&#x2F;em&gt; lifetimes that have been tied together here:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The lifetime of the input, &lt;code&gt;md&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The lifetime of the borrow, &lt;code&gt;&amp;amp;mut broken_link_callback&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The lifetime of the function &lt;em&gt;outputs&lt;&#x2F;em&gt;, which are unnamed here (pulldown &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;pulldown-cmark&#x2F;0.8.0&#x2F;src&#x2F;pulldown_cmark&#x2F;parse.rs.html#2380&quot;&gt;calls them&lt;&#x2F;a&gt; &lt;code&gt;url&lt;&#x2F;code&gt; and &lt;code&gt;title&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;And that explains all the errors:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;md&lt;&#x2F;code&gt; is a temporary, but &lt;code&gt;&amp;amp;mut broken_link_callback&lt;&#x2F;code&gt; is &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;mut broken_link_callback&lt;&#x2F;code&gt; can&#x27;t find an appropriate lifetime for the borrow, so it gives up altogether with &quot;higher-ranked subtype error&quot;&lt;&#x2F;li&gt;
&lt;li&gt;The arguments are temporaries, so the outputs are temporaries too (because we declared &lt;code&gt;broken_link_callback&lt;&#x2F;code&gt; as &lt;code&gt;fn summary_broken_link_callback&amp;lt;&#x27;a&amp;gt;(link: BrokenLink&amp;lt;&#x27;a&amp;gt;) -&amp;gt; Option&amp;lt;(CowStr&amp;lt;&#x27;a&amp;gt;, CowStr&amp;lt;&#x27;a&amp;gt;)&amp;gt;&lt;&#x2F;code&gt;), but &lt;code&gt;&amp;amp;mut broken_link_callback&lt;&#x2F;code&gt; is &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;how-do-you-solve-a-problem-like-a-lifetime&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=s-VRyQprlu8&quot;&gt;How do you solve a problem like a lifetime?&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-do-you-solve-a-problem-like-a-lifetime&quot; aria-label=&quot;Anchor link for: how-do-you-solve-a-problem-like-a-lifetime&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Notice that the bug here is &lt;em&gt;not&lt;&#x2F;em&gt; in &lt;code&gt;broken_link_callback&lt;&#x2F;code&gt; - it&#x27;s in the API itself, which is
tying the lifetimes together unnecessarily. If you write &lt;code&gt;broken_link_callback&lt;&#x2F;code&gt; on its own, it
will compile and run just fine, it&#x27;s only the way that it interacts with &lt;code&gt;Parser&lt;&#x2F;code&gt; that breaks
things. The fix is not to tie the lifetimes together:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-struct z-rust&quot;&gt;struct&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-entity z-name z-struct z-rust&quot;&gt;Parser&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;input&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;callback&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;text&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;input&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-rust&quot;&gt;str&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;    &lt;span class=&quot;z-variable z-other z-member z-rust&quot;&gt;broken_link_callback&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-type z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;BrokenLinkCallback&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;input&lt;&#x2F;span&gt;, &lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;callback&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-struct z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;pub&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-type z-rust&quot;&gt;type&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-type z-rust&quot;&gt;BrokenLinkCallback&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;input&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;borrow&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;    &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;borrow&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; dyn &lt;span class=&quot;z-support z-type z-rust&quot;&gt;FnMut&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;BrokenLink&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;input&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt; &lt;span class=&quot;z-punctuation z-separator z-generic z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;CowStr&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;input&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;CowStr&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;input&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that 1. and 3. are still tied together; this is because pulldown has an API that yields
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;pulldown-cmark&#x2F;0.8.0&#x2F;pulldown_cmark&#x2F;struct.Parser.html#associatedtype.Item&quot;&gt;events with the lifetime of the input&lt;&#x2F;a&gt;. To use the output of the callback in the
&lt;code&gt;Iterator&lt;&#x2F;code&gt; implementation, the outputs have to live as long as the full markdown input, not just
the current link.&lt;&#x2F;p&gt;
&lt;p&gt;An interesting note is that &lt;code&gt;broken_link_callback&lt;&#x2F;code&gt; had a similar issue over overspecifying lifetimes:
if you change the type signature to&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;summary_broken_link_callback&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;	&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;link&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;BrokenLink&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&amp;#39;&lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;_&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-support z-type z-rust&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;CowStr&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;CowStr&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-double z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;#&lt;span class=&quot;z-punctuation z-definition z-string z-end z-rust&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;into&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; link&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;reference&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;into&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;it will suddenly compile. In particular, the lifetime of the input is no longer tied to the lifetime of the output,
which works because &lt;code&gt;link.reference&lt;&#x2F;code&gt; is copied, not borrowed.&lt;&#x2F;p&gt;
&lt;p&gt;For more information about this problem, including strange and disconcerting errors that show up
if you give lifetimes the wrong annotations, see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;raphlinus&#x2F;pulldown-cmark&#x2F;issues&#x2F;509&quot;&gt;the issue&lt;&#x2F;a&gt; against pulldown, as well as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;raphlinus&#x2F;pulldown-cmark&#x2F;pull&#x2F;510&quot;&gt;the
PR&lt;&#x2F;a&gt; I made fixing it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bonus-wait-where-s-my-diagnostics-bug-i-was-promised-a-diagnostics-bug&quot;&gt;Bonus: Wait, where&#x27;s my diagnostics bug? I was promised a diagnostics bug!&lt;a class=&quot;zola-anchor&quot; href=&quot;#bonus-wait-where-s-my-diagnostics-bug-i-was-promised-a-diagnostics-bug&quot; aria-label=&quot;Anchor link for: bonus-wait-where-s-my-diagnostics-bug-i-was-promised-a-diagnostics-bug&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;For some reason, the error in a stand-alone program is different from the one when you compile &lt;code&gt;broken_link_callback&lt;&#x2F;code&gt; as part of rustdoc:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;error: implementation of `FnOnce` is not general enough
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   --&amp;gt; src&#x2F;lib.rs:8:80
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;8   |       for _ in Parser::new_with_broken_link_callback(txt, Options::empty(), Some(&amp;amp;mut callback)) {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    |                                                                                  ^^^^^^^^^^^^^ implementation of `FnOnce` is not general enough
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    | 
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   ::: &#x2F;home&#x2F;jyn&#x2F;.local&#x2F;lib&#x2F;rustup&#x2F;toolchains&#x2F;stable-x86_64-unknown-linux-gnu&#x2F;lib&#x2F;rustlib&#x2F;src&#x2F;rust&#x2F;library&#x2F;core&#x2F;src&#x2F;ops&#x2F;function.rs:219:1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;219 | &#x2F; pub trait FnOnce&amp;lt;Args&amp;gt; {
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;220 | |     &#x2F;&#x2F;&#x2F; The returned type after the call operator is used.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;221 | |     #[lang = &amp;quot;fn_once_output&amp;quot;]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;222 | |     #[stable(feature = &amp;quot;fn_once_output&amp;quot;, since = &amp;quot;1.12.0&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...   |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;227 | |     extern &amp;quot;rust-call&amp;quot; fn call_once(self, args: Args) -&amp;gt; Self::Output;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;228 | | }
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    | |_- trait `FnOnce` defined here
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    |
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    = note: `for&amp;lt;&amp;#39;a&amp;gt; fn(pulldown_cmark::BrokenLink&amp;lt;&amp;#39;a&amp;gt;) -&amp;gt; Option&amp;lt;(pulldown_cmark::CowStr&amp;lt;&amp;#39;a&amp;gt;, pulldown_cmark::CowStr&amp;lt;&amp;#39;a&amp;gt;)&amp;gt; {callback}` must implement `FnOnce&amp;lt;(pulldown_cmark::BrokenLink&amp;lt;&amp;#39;_&amp;gt;,)&amp;gt;`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;    = note: ...but `FnOnce&amp;lt;(pulldown_cmark::BrokenLink&amp;lt;&amp;#39;_&amp;gt;,)&amp;gt;` is actually implemented for the type `for&amp;lt;&amp;#39;a&amp;gt; fn(pulldown_cmark::BrokenLink&amp;lt;&amp;#39;a&amp;gt;) -&amp;gt; Option&amp;lt;(pulldown_cmark::CowStr&amp;lt;&amp;#39;a&amp;gt;, pulldown_cmark::CowStr&amp;lt;&amp;#39;a&amp;gt;)&amp;gt; {callback}`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In particular, the &lt;code&gt;note:&lt;&#x2F;code&gt; makes no sense: it shows the same types above and below!
This is a long-lived &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;79643&quot;&gt;diagnostics issue&lt;&#x2F;a&gt; with the compiler itself, going back &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;41078&quot;&gt;at least until 2017&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;a class=&quot;zola-anchor&quot; href=&quot;#appendix&quot; aria-label=&quot;Anchor link for: appendix&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;hrtb.html&quot;&gt;HRTB&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustdoc&#x2F;&quot;&gt;Rustdoc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustdoc&#x2F;linking-to-items-by-name.html&quot;&gt;intra-doc links&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;lifetimes.html#the-area-covered-by-a-lifetime&quot;&gt;reborrowing&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;I wrote more about &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;28961957&#x2F;example-of-runtime-polymorphism-in-java&quot;&gt;runtime polymorphism&lt;&#x2F;a&gt; (which is like &lt;code&gt;virtual&lt;&#x2F;code&gt; in C++ or any method call in Python) in an &lt;a href=&quot;https:&#x2F;&#x2F;acm.cse.sc.edu&#x2F;assets&#x2F;2020-09-09&quot;&gt;ACM talk&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>The intra-doc links saga</title>
        <published>2020-10-23T00:00:00+00:00</published>
        <updated>2020-10-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/the-intra-doc-links-saga/"/>
        <id>https://jyn.dev/the-intra-doc-links-saga/</id>
        
        <content type="html" xml:base="https://jyn.dev/the-intra-doc-links-saga/">&lt;p&gt;One of my projects for the last 4 months or so has been working on
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;43466&quot;&gt;&#x27;intra-doc links&#x27;&lt;&#x2F;a&gt;, a feature of &lt;code&gt;rustdoc&lt;&#x2F;code&gt;
that lets you link to items by name. That feature will be stable in 4 weeks in
Rust 1.48.0!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;@Manishearth&lt;&#x2F;strong&gt; and I wrote a longer blog post about intra-doc links which you
can read on &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;inside-rust&#x2F;2020&#x2F;09&#x2F;17&#x2F;stabilizing-intra-doc-links.html&quot;&gt;the official Rust blog&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Rust in 2021</title>
        <published>2020-09-05T00:00:00+00:00</published>
        <updated>2020-09-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/rust-in-2021/"/>
        <id>https://jyn.dev/rust-in-2021/</id>
        
        <content type="html" xml:base="https://jyn.dev/rust-in-2021/">&lt;h2 id=&quot;who-is-this-guy-anyway&quot;&gt;Who is this guy anyway?&lt;a class=&quot;zola-anchor&quot; href=&quot;#who-is-this-guy-anyway&quot; aria-label=&quot;Anchor link for: who-is-this-guy-anyway&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Hello, it&#x27;s me! I&#x27;m a somewhat new contributor to Rust and I&#x27;m about three blog posts behind. Here they are all at once:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;building-docs-rs&#x2F;&quot;&gt;I work on docs.rs!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;saltwater&#x2F;&quot;&gt;I wrote a C compiler in Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;I spend way too much time &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pulls?q=is%3Apr+label%3AA-intra-doc-links+author%3Ajyn514+&quot;&gt;working on intra-doc links&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;compiler-team&#x2F;issues&#x2F;326&quot;&gt;help&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rustc-dev-guide&#x2F;pulls?q=+is%3Apr+author%3Ajyn514+&quot;&gt;make&lt;&#x2F;a&gt; it easier to contribute to the Rust compiler&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;wait-we-re-writing-a-blog-post-here&quot;&gt;Wait, we&#x27;re writing a blog post here.&lt;a class=&quot;zola-anchor&quot; href=&quot;#wait-we-re-writing-a-blog-post-here&quot; aria-label=&quot;Anchor link for: wait-we-re-writing-a-blog-post-here&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;In particular I want to talk about that last point.
I spend way too much time on Discord and I commonly run into questions like this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do I get the first element of a vector if I don&#x27;t care about the rest? &lt;code&gt;vec[0]&lt;&#x2F;code&gt; gives me a reference.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;How does docs.rs calculate the percentage of items documented in a crate?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Why doesn&#x27;t &lt;code&gt;async || { ... }&lt;&#x2F;code&gt; work? The compiler told me to add &lt;code&gt;async&lt;&#x2F;code&gt; if I want to use &lt;code&gt;await&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Why am I getting a borrow check error when I try to add something to a map if it&#x27;s not yet there?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;How can I use generic types in an &lt;code&gt;extern &quot;C&quot;&lt;&#x2F;code&gt; function? Is this even possible? (This one I asked!)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;How do I link to the latest version of a subpage of my docs on docs.rs?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there a guide on how to add a new target or promote a target to tier 2?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;How can I use C or C++ functions from Rust? (not just the C standard library, but other libraries)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I have an API that takes either a value or a reference?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I have a logging function that will print then return a value?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Where did &lt;code&gt;arg_enum!&lt;&#x2F;code&gt; end up in clap 3? It&#x27;s not at &lt;code&gt;clap::arg_enum&lt;&#x2F;code&gt; like it was before.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there a way to do this with iterator methods instead?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;All of these have &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;rust-in-2021&#x2F;#faq&quot;&gt;answers&lt;&#x2F;a&gt; that are simple to understand after the fact, but
are very hard to figure out if you don&#x27;t already know them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;discoverability&quot;&gt;Discoverability&lt;a class=&quot;zola-anchor&quot; href=&quot;#discoverability&quot; aria-label=&quot;Anchor link for: discoverability&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;As a frequent contributor to the compiler, the theme I want to focus on in 2021 is &lt;strong&gt;discoverability&lt;&#x2F;strong&gt;.
Rust and the Rust ecosystem have a lot of features, but it can be hard to find them all,
or even to know that they exist - you can&#x27;t search if you don&#x27;t know what to search for!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;in-the-compiler&quot;&gt;In the compiler&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-the-compiler&quot; aria-label=&quot;Anchor link for: in-the-compiler&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Rust has a well-earned reputation for good error messages.
I want to continue to expand those to catch more common errors and guide you
in the right direction. There is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;73996&quot;&gt;lot&lt;&#x2F;a&gt; of
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;76171&quot;&gt;great&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;75931&quot;&gt;work&lt;&#x2F;a&gt; going on this area:
A giant thank you to &lt;strong&gt;@estebank&lt;&#x2F;strong&gt;, &lt;strong&gt;@da-x&lt;&#x2F;strong&gt;, and everyone else working on improving diagnostics!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;in-libraries&quot;&gt;In libraries&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-libraries&quot; aria-label=&quot;Anchor link for: in-libraries&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;This one is harder - libraries can&#x27;t give error messages,
the best they can do is write documentation.
I want to see more examples of ways to solve errors &lt;em&gt;using the library&lt;&#x2F;em&gt;.
For example, imagine if this error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;error&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-rust&quot;&gt;E0499&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; cannot borrow `&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt;map` &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;as&lt;&#x2F;span&gt; mutable more than once at a time
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;  &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; src&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt;main&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;rs&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;14&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;13&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;   &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;6&lt;&#x2F;span&gt;  &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;   &lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-storage z-type z-function z-rust&quot;&gt;fn&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-entity z-name z-function z-rust&quot;&gt;get_default&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;m&lt;&#x2F;span&gt;, K, V&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;map&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;m&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic z-rust&quot;&gt;HashMap&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-rust&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;K, V&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-rust&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;key&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; K&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt; &lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;m&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-rust&quot;&gt;mut&lt;&#x2F;span&gt; V
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;   &lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;                  &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt; lifetime `&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;m&lt;&#x2F;span&gt;` defined here
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-range z-rust&quot;&gt;...&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;11&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;       &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;match&lt;&#x2F;span&gt; map&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;key&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;   &lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;       -     --- first mutable borrow occurs here&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;   &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;  &lt;span class=&quot;z-constant z-other z-rust&quot;&gt;_____&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;   &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;12&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;         &lt;span class=&quot;z-support z-type z-rust&quot;&gt;Some&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;value&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; value&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;13&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;         &lt;span class=&quot;z-support z-type z-rust&quot;&gt;None&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;=&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;14&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;             map&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;key&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;V&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;default&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-rust&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;   &lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt; &lt;span class=&quot;z-punctuation z-section z-parameters z-end z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;             &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt; second mutable borrow occurs here&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;15&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;             map&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;key&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;16&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;         &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;17&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;     &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-rust&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;   &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-rust&quot;&gt;_____&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt; returning this value requires that `&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;*&lt;&#x2F;span&gt;map` is borrowed &lt;span class=&quot;z-keyword z-control z-rust&quot;&gt;for&lt;&#x2F;span&gt; `&lt;span class=&quot;z-storage z-modifier z-lifetime z-rust&quot;&gt;&amp;#39;m&lt;&#x2F;span&gt;`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;also said this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;   &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; note&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; this pattern is valid&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; but not currently recognized by the borrow&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;checker&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; https&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-double-slash z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-rust&quot;&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;doc.rust-lang.org&#x2F;nomicon&#x2F;lifetime-mismatch.html#improperly-reduced-borrows
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;   &lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; help&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; try using the `Entry` &lt;span class=&quot;z-constant z-other z-rust&quot;&gt;API&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;   &lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;11&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;       map&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;entry&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;key&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-function z-rust&quot;&gt;or_default&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;   &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;       &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;^&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;error&lt;span class=&quot;z-meta z-group z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-other z-rust&quot;&gt;E0433&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; failed to resolve&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; could not find `arg_enum` &lt;span class=&quot;z-keyword z-operator z-rust&quot;&gt;in&lt;&#x2F;span&gt; `clap`
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; src&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt;lib&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;rs&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;10&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;  &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;clap&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;arg_enum&lt;span class=&quot;z-keyword z-operator z-logical z-rust&quot;&gt;!&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;           ^^^^^^^^ could not find `arg_enum` in `clap`&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Could instead be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust z-code&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;error&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; `arg_enum` is now a derive &lt;span class=&quot;z-invalid z-illegal z-rust&quot;&gt;macro&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;-&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-return-type z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt; src&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-rust&quot;&gt;&#x2F;&lt;&#x2F;span&gt;lib&lt;span class=&quot;z-punctuation z-accessor z-dot z-rust&quot;&gt;.&lt;&#x2F;span&gt;rs&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;10&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;  &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-rust&quot;&gt;2&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-bitwise z-rust&quot;&gt;|&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-path z-rust&quot;&gt;clap&lt;span class=&quot;z-punctuation z-accessor z-rust&quot;&gt;::&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;arg_enum&lt;span class=&quot;z-keyword z-operator z-logical z-rust&quot;&gt;!&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-rust&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;  &lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-rust&quot;&gt;|&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-rust&quot;&gt;           ^^^^^^^^ &lt;span class=&quot;z-variable z-parameter z-rust&quot;&gt;note&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; this code was valid in clap 2.0&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;,&lt;&#x2F;span&gt; but has changed in 3.0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-rust&quot;&gt;&lt;span class=&quot;z-meta z-block z-rust&quot;&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;  &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-closure z-rust&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-rust&quot;&gt;=&lt;&#x2F;span&gt; help&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-other z-rust&quot;&gt;use&lt;&#x2F;span&gt; a derive instead&lt;span class=&quot;z-punctuation z-separator z-rust&quot;&gt;:&lt;&#x2F;span&gt; `&lt;span class=&quot;z-meta z-annotation z-rust&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-annotation z-rust&quot;&gt;#&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-rust&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;clap&lt;&#x2F;span&gt;::&lt;span class=&quot;z-variable z-annotation z-rust&quot;&gt;arg_enum&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-rust&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;`&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not only would it help fix the code, but it would help you learn more about the library and the Rust language!
I&#x27;m sure there&#x27;s many things making this difficult, but I think it&#x27;s a great goal to reach for.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;in-devtools&quot;&gt;In devtools&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-devtools&quot; aria-label=&quot;Anchor link for: in-devtools&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;This one I think has both the most room for improvement and needs the least effort to fix.
Currently, a lot of functionality is &#x27;hidden&#x27; behind &lt;code&gt;cargo&lt;&#x2F;code&gt; subcommands.
For examples, &lt;code&gt;cargo test -- --ignored&lt;&#x2F;code&gt; and &lt;code&gt;cargo test -- --test-threads 1&lt;&#x2F;code&gt;
are very difficult to find unless you see existing examples online.
Even experienced rustaceans don&#x27;t know about many rustdoc options because they need
&lt;code&gt;cargo rustdoc -- -h&lt;&#x2F;code&gt;, not &lt;code&gt;cargo doc -h&lt;&#x2F;code&gt; or &lt;code&gt;cargo doc -- -h&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I think we should both document these options better and make them easier to find
by experimenting.&lt;&#x2F;p&gt;
&lt;p&gt;Another improvement I see in devtools is distinguishing between stable and unstable features.
Right now the way to do this is different for every tool:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cargo&lt;&#x2F;code&gt; has &lt;code&gt;cargo-features = [&quot;...&quot;]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rustfmt&lt;&#x2F;code&gt; has &lt;code&gt;unstable_features = true&lt;&#x2F;code&gt;, including on the stable channel&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rustdoc&lt;&#x2F;code&gt; enables most features by default, even without &lt;code&gt;#![feature(...)]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This causes confusion: In the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;63305&quot;&gt;words of &lt;strong&gt;@abonader&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;,&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I assume it works on stable if there&#x27;s no feature flags.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I think there should be a consistent story here that makes it easier to see
what&#x27;s nightly and what isn&#x27;t (even I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;pull&#x2F;75953&quot;&gt;got confused&lt;&#x2F;a&gt; by this!).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;in-the-community&quot;&gt;In the community&lt;a class=&quot;zola-anchor&quot; href=&quot;#in-the-community&quot; aria-label=&quot;Anchor link for: in-the-community&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;It can be difficult to know where discussions take place.
There are many different places:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Zulip&lt;&#x2F;li&gt;
&lt;li&gt;Discord&lt;&#x2F;li&gt;
&lt;li&gt;rustc-dev-guide&lt;&#x2F;li&gt;
&lt;li&gt;Forge&lt;&#x2F;li&gt;
&lt;li&gt;Blog posts (usually discussed on reddit)&lt;&#x2F;li&gt;
&lt;li&gt;internals.rust-lang.org&lt;&#x2F;li&gt;
&lt;li&gt;users.rust-lang.org&lt;&#x2F;li&gt;
&lt;li&gt;MCPs in rust-lang&#x2F;compiler&lt;&#x2F;li&gt;
&lt;li&gt;MCPs in rust-lang&#x2F;lang&lt;&#x2F;li&gt;
&lt;li&gt;RFCs in rust-lang&#x2F;rfcs&lt;&#x2F;li&gt;
&lt;li&gt;FCPs in rust-lang&#x2F;rust&lt;&#x2F;li&gt;
&lt;li&gt;Various READMEs in the compiler itself (although most of those point to external links now)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This makes it hard for new contributors to find information
and hard for frequent contributors to stay up to date on the current status of issues.&lt;&#x2F;p&gt;
&lt;p&gt;I think we should consolidate documentation into fewer places and discussion
into fewer channels. This would make it easier to understand what&#x27;s going on
without having to spend lots of time chasing down leads (in both senses 😉).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-do-you-think-could-be-more-discoverable&quot;&gt;What do &lt;em&gt;you&lt;&#x2F;em&gt; think could be more discoverable?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-do-you-think-could-be-more-discoverable&quot; aria-label=&quot;Anchor link for: what-do-you-think-could-be-more-discoverable&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Is there a feature of Rust you really enjoy that people don&#x27;t know about?
Are you looking for a feature that &lt;em&gt;seems&lt;&#x2F;em&gt; like it should exist but you haven&#x27;t been able to find?
Please let me know! Good ways to bring this up are writing other blog posts or opening an issue.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I think Rust is a great language with a bright future.
I want to make it easier not just to get started, but to
explore and learn more about Rust and the Rust community.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;faq&quot;&gt;FAQ&lt;a class=&quot;zola-anchor&quot; href=&quot;#faq&quot; aria-label=&quot;Anchor link for: faq&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;You can&#x27;t have questions without answers!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do I get the first element of a vector if I don&#x27;t care about the rest? &lt;code&gt;vec[0]&lt;&#x2F;code&gt; gives me a reference.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;vec.into_iter().next()&lt;&#x2F;code&gt; or &lt;code&gt;vec.truncate(1); vec.pop()&lt;&#x2F;code&gt; depending on when you want to drop the items (&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;219381-t-libs&#x2F;topic&#x2F;Eager.20skipping.20for.20iterators&#x2F;near&#x2F;209045693&quot;&gt;discussion&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;How does docs.rs calculate the percentage of items documented in a crate?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustdoc&#x2F;unstable-features.html#--show-coverage-calculate-the-percentage-of-items-with-documentation&quot;&gt;&lt;code&gt;rustdoc --show-coverage&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why doesn&#x27;t &lt;code&gt;async || { ... }&lt;&#x2F;code&gt; work? The compiler told me to add &lt;code&gt;async&lt;&#x2F;code&gt; if I want to use &lt;code&gt;await&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Use &lt;code&gt;async { ... }&lt;&#x2F;code&gt; instead. I opened &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;76011&quot;&gt;an issue&lt;&#x2F;a&gt; to add a suggestion for this.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why am I getting a borrow check error when I try to add something to a map if it&#x27;s not yet there?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is a limitation of the borrow checker; use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;collections&#x2F;hash_map&#x2F;enum.Entry.html&quot;&gt;&lt;code&gt;entry()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; instead.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;How can I use generic types in an &lt;code&gt;extern &quot;C&quot;&lt;&#x2F;code&gt; function? Is this even possible? (This one I asked!)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It works like a normal function pointer! You can simply use &lt;code&gt;my_c_func(my_callback::&amp;lt;T&amp;gt; as fn()&lt;&#x2F;code&gt;,
and declare &lt;code&gt;my_callback&lt;&#x2F;code&gt; like a normal generic function that happens to have &lt;code&gt;extern &quot;C&quot;&lt;&#x2F;code&gt; at the front.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do I link to the latest version of a subpage of my docs on docs.rs?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;&#x2F;my-crate&#x2F;latest&#x2F;my_crate&#x2F;module&#x2F;kind.name.html&lt;&#x2F;code&gt;; &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;about&#x2F;redirections&quot;&gt;docs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there a guide on how to add a new target or promote a target to tier 2?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There is an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;2803&quot;&gt;RFC in progress&lt;&#x2F;a&gt; and docs for &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;building&#x2F;new-target.html&quot;&gt;adding a new target&lt;&#x2F;a&gt;.
However I&#x27;m not aware of any documentation for promoting a target from tier 3 to tier 2,
or from &#x27;tier 2 cross-compiled&#x27; to &#x27;tier 2 hosted&#x27; (see the RFC).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;How can I use C or C++ functions from Rust? (not just the C standard library, but other libraries)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;You probably want either &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;cxx&#x2F;&quot;&gt;bindgen&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;cxx&#x2F;&quot;&gt;cxx&lt;&#x2F;a&gt;. For the reverse, calling Rust from C or C++,
take a look at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eqrion&#x2F;cbindgen&quot;&gt;cbindgen&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I have an API that takes either a value or a reference?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Yes, &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;borrow&#x2F;trait.Borrow.html&quot;&gt;&lt;code&gt;Borrow&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;NOTE: this answer originally said &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;convert&#x2F;trait.AsRef.html&quot;&gt;&lt;code&gt;AsRef&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
which doesn&#x27;t always work - there&#x27;s no blanket &lt;code&gt;impl AsRef&amp;lt;T&amp;gt; for &amp;amp;T&lt;&#x2F;code&gt;
like there is for &lt;code&gt;Borrow&lt;&#x2F;code&gt;. This difference is itself a discoverability problem! Thanks to &lt;strong&gt;@raphlinus&lt;&#x2F;strong&gt; for pointing out the difference.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Can I have a logging function that will print then return a value?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Yes, and it&#x27;s even in the standard library: &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.dbg.html&quot;&gt;&lt;code&gt;dbg!&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
Unfortunately it doesn&#x27;t work with &lt;code&gt;log&lt;&#x2F;code&gt; or &lt;code&gt;tracing&lt;&#x2F;code&gt;,
but it&#x27;s not too hard to write your own wrapper around those.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Where did &lt;code&gt;arg_enum!&lt;&#x2F;code&gt; end up in clap 3? It&#x27;s not at &lt;code&gt;clap::arg_enum&lt;&#x2F;code&gt; like it was before.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It&#x27;s now a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clap-rs&#x2F;clap&#x2F;blob&#x2F;master&#x2F;clap_derive&#x2F;examples&#x2F;arg_enum.rs&quot;&gt;derive macro&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there a way to do this with iterator methods instead?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Yes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;updates&quot;&gt;Updates!&lt;a class=&quot;zola-anchor&quot; href=&quot;#updates&quot; aria-label=&quot;Anchor link for: updates&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;This was surprisingly popular &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;inxwka&#x2F;rust_in_2021_discoverability&#x2F;&quot;&gt;on reddit&lt;&#x2F;a&gt;! I&#x27;m answering a few of the most relevant questions here so everyone can see them.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there a way a library can give a custom message on trait errors?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Yes, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;29628&quot;&gt;&lt;code&gt;rustc_on_unimplemented&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Unfortunately it&#x27;s not intended to be stabilized,
but I&#x27;d be happy to see an RFC for it!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is there something like Hoogle for Rust, where you give it a type signature and it suggests possible implementations?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Yes, rustdoc has &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;rc&#x2F;struct.Rc.html?search=*%20-%3E%20String&quot;&gt;&#x27;type-based search&#x27;&lt;&#x2F;a&gt;. Press &lt;code&gt;?&lt;&#x2F;code&gt; in any rustdoc page for more information about it.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Couldn&#x27;t the maintainers of clap make &lt;code&gt;arg_enum!&lt;&#x2F;code&gt; deprecated and point to the derive macro?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;No, because both the old and new macro have the same name in the same namespace.
So adding both would be a compile error. Fortunately this means the compiler can help out, I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;76429&quot;&gt;opened an issue&lt;&#x2F;a&gt; for it to do so.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Building Docs.rs</title>
        <published>2019-11-26T00:00:00+00:00</published>
        <updated>2019-11-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/building-docs-rs/"/>
        <id>https://jyn.dev/building-docs-rs/</id>
        
        <content type="html" xml:base="https://jyn.dev/building-docs-rs/">&lt;h2 id=&quot;what-is-docs-rs&quot;&gt;What is docs.rs?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-docs-rs&quot; aria-label=&quot;Anchor link for: what-is-docs-rs&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;&quot;&gt;docs.rs&lt;&#x2F;a&gt; is a site dedicated to hosting documentation for Rust projects.
It automatically builds documentation for every package published to
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot;&gt;crates.io&lt;&#x2F;a&gt; using &lt;code&gt;cargo&lt;&#x2F;code&gt; and &lt;code&gt;rustdoc&lt;&#x2F;code&gt;.
Unfortunately, because &lt;code&gt;rustdoc&lt;&#x2F;code&gt; is tied so closely to the compiler,
this requires building every package from source using &lt;code&gt;cargo doc&lt;&#x2F;code&gt;.
As a result, I&#x27;ve heard several members of the docs.rs team describe it as
&#x27;Remote Code Execution as a Service&#x27; (since &lt;code&gt;build.rs&lt;&#x2F;code&gt; files can
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;build-scripts.html&quot;&gt;execute arbitrary code&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Just from this description you can see that hosting docs.rs is an enormous job
and requires a ton of compute resources. It gets worse when you consider that
docs.rs has to &lt;em&gt;store&lt;&#x2F;em&gt; all this documentation somewhere. In fact, it&#x27;s in
an AWS storage bucket and gets uploaded after every build.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-did-i-get-involved&quot;&gt;How did I get involved?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-did-i-get-involved&quot; aria-label=&quot;Anchor link for: how-did-i-get-involved&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;My main rust project is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;rcc&quot;&gt;rcc&lt;&#x2F;a&gt;, a C compiler written in Rust.
I use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;CraneStation&#x2F;cranelift&quot;&gt;Cranelift&lt;&#x2F;a&gt; to generate the assembly
code; Cranelift is a code generator like &lt;a href=&quot;https:&#x2F;&#x2F;llvm.org&#x2F;&quot;&gt;LLVM&lt;&#x2F;a&gt;.
Cranelift releases very quickly - I first started using it in version
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;rcc&#x2F;commit&#x2F;9f5573d&quot;&gt;&lt;code&gt;0.36&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and it&#x27;s currently on
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;cranelift-codegen&#x2F;0.51.0&#x2F;cranelift_codegen&#x2F;&quot;&gt;&lt;code&gt;0.51&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
Because I used the docs so much when I was getting started,
Firefox got convinced that I always wanted to visit &lt;code&gt;0.36&lt;&#x2F;code&gt; - see also the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;9461&quot;&gt;rustdoc issue&lt;&#x2F;a&gt; about canonical URLs.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, docs.rs has a little link you can click to go to the latest version.
Unfortunately, docs.rs used to redirect you to the home page whenever you clicked that link,
so if you were looking up
&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;cranelift-codegen&#x2F;0.42.0&#x2F;cranelift_codegen&#x2F;ir&#x2F;trait.InstBuilder.html&quot;&gt;&lt;code&gt;cranelift_codegen::ir::InstBuilder&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
before, you&#x27;d have to click through 3 links to get back there on the latest version.
This has made a lot of people very angry and been widely regarded as a bad move.
There had actually been &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;issues&#x2F;200&quot;&gt;an issue open&lt;&#x2F;a&gt;
for about a year and a half at this point, although it wasn&#x27;t getting much attention.&lt;&#x2F;p&gt;
&lt;p&gt;I decided since I was running into the issue so much, I may as well contribute a patch.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-happened&quot;&gt;What happened?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-happened&quot; aria-label=&quot;Anchor link for: what-happened&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;At that point, docs.rs was using &lt;a href=&quot;https:&#x2F;&#x2F;www.vagrantup.com&#x2F;&quot;&gt;Vagrant&lt;&#x2F;a&gt; to run
builds locally, because it needed to have a sandboxed environment to execute
arbitrary code on. When I tried using it, it took about 20 minutes and then I
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;issues&#x2F;200#issuecomment-539771094&quot;&gt;got an ugly error&lt;&#x2F;a&gt; without any explanation.
Remember, this isn&#x27;t even the hard part of the change, I just wanted to get it running from master.&lt;&#x2F;p&gt;
&lt;p&gt;I chatted with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pietroalbini&quot;&gt;Pietro&lt;&#x2F;a&gt; on Discord
and it turns out that docs.rs had recently
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;pull&#x2F;407&quot;&gt;switched to a different sandbox&lt;&#x2F;a&gt;,
but the Vagrantfile never got updated. Since I don&#x27;t know really how to use Vagrant
or Ruby (and no one was volunteering to fix it), I didn&#x27;t have any hope of getting
that working. I asked what I could do and someone pointed me to
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;wiki&#x2F;Self-hosting-outside-the-Vagrant-VM&quot;&gt;the wiki&lt;&#x2F;a&gt;.
I took one look and knew there was no way I wanted to do this - it&#x27;s about 5 pages,
and 30 manually steps, most of which have to be done in order.
So I figured, hey, I&#x27;m a developer, let&#x27;s automate this!&lt;&#x2F;p&gt;
&lt;p&gt;Long story short, I ended up &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;pull&#x2F;432&quot;&gt;writing a &lt;code&gt;Dockerfile&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;
and Pietro was so impressed that he started &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;pull&#x2F;455&quot;&gt;using it in production&lt;&#x2F;a&gt; :D&lt;&#x2F;p&gt;
&lt;p&gt;After a month and what has been called&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;rust-2020-growth&#x2F;34956&#x2F;43&quot;&gt;Unprecedented (but greatly appreciated) levels of yak shaving&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I finally &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;pull&#x2F;454&quot;&gt;got the original change merged&lt;&#x2F;a&gt; :)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-next&quot;&gt;What next?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-next&quot; aria-label=&quot;Anchor link for: what-next&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Pietro and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;QuietMisdreavus&quot;&gt;QuietMisdreavus&lt;&#x2F;a&gt; were so impressed
with my work that they invited me to the team! As of November 1st, I have push access
to &lt;code&gt;docs.rs&lt;&#x2F;code&gt; :) (Pietro still handles the deploys)&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve been helping with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;pull&#x2F;487&quot;&gt;a&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;pull&#x2F;485&quot;&gt;few&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;pull&#x2F;476&quot;&gt;other&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;pull&#x2F;468&quot;&gt;PRs&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;docs.rs&#x2F;pull&#x2F;460&quot;&gt;since&lt;&#x2F;a&gt;
and plan to contribute for the foreseeable future!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;acknowledgments&quot;&gt;Acknowledgments&lt;a class=&quot;zola-anchor&quot; href=&quot;#acknowledgments&quot; aria-label=&quot;Anchor link for: acknowledgments&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Thank you so much to Pietro and QuietMisdreavus for helping me get started with
the project! My favorite part of working on docs.rs is giving and receiving feedback
from my friends.&lt;&#x2F;p&gt;
&lt;p&gt;Thank you to &lt;a href=&quot;https:&#x2F;&#x2F;users.rust-lang.org&#x2F;u&#x2F;17cupsofcoffee&quot;&gt;&#x2F;u&#x2F;17cupsofcoffee&lt;&#x2F;a&gt;
for prompting me to write this blog post!&lt;&#x2F;p&gt;
&lt;p&gt;And finally, thanks to everyone in the Rust community for making this an awesome
language to work on :D&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Intro to Reverse Engineering</title>
        <published>2019-11-11T00:00:00+00:00</published>
        <updated>2019-11-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/talks/assembly/"/>
        <id>https://jyn.dev/talks/assembly/</id>
        
        <content type="html" xml:base="https://jyn.dev/talks/assembly/"></content>
        
    </entry><entry xml:lang="en">
        <title>Intro to C</title>
        <published>2019-11-05T00:00:00+00:00</published>
        <updated>2019-11-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/talks/c/"/>
        <id>https://jyn.dev/talks/c/</id>
        
        <content type="html" xml:base="https://jyn.dev/talks/c/"></content>
        
    </entry><entry xml:lang="en">
        <title>Intro to Linux</title>
        <published>2019-09-16T00:00:00+00:00</published>
        <updated>2019-09-16T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/talks/linux/"/>
        <id>https://jyn.dev/talks/linux/</id>
        
        <content type="html" xml:base="https://jyn.dev/talks/linux/"></content>
        
    </entry><entry xml:lang="en">
        <title>Intro to Python</title>
        <published>2019-09-11T00:00:00+00:00</published>
        <updated>2019-09-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/talks/python/"/>
        <id>https://jyn.dev/talks/python/</id>
        
        <content type="html" xml:base="https://jyn.dev/talks/python/"></content>
        
    </entry><entry xml:lang="en">
        <title>Fun with gaming on Linux</title>
        <published>2019-08-04T00:00:00+00:00</published>
        <updated>2019-08-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/fun-with-gaming-on-linux/"/>
        <id>https://jyn.dev/fun-with-gaming-on-linux/</id>
        
        <content type="html" xml:base="https://jyn.dev/fun-with-gaming-on-linux/">&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-problem&quot; aria-label=&quot;Anchor link for: the-problem&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;As my family frequently reminds me, most of my tech problems are of my own making.&lt;&#x2F;p&gt;
&lt;p&gt;For instance, I wanted to play &lt;a href=&quot;https:&#x2F;&#x2F;civilization.com&#x2F;civilization-5&#x2F;&quot;&gt;Civilization 5&lt;&#x2F;a&gt; with a friend of mine through Steam.
I have a Linux&#x2F;Windows dual-boot with a shared
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;NTFS&quot;&gt;NTFS&lt;&#x2F;a&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Disk_partitioning&quot;&gt;partition&lt;&#x2F;a&gt; so that I can share files between the operating systems.
I run Linux by default.
I also have Hibernate disabled on Windows because I can&#x27;t use the shared partition
from Linux if Windows is hibernated -
Windows &lt;a href=&quot;https:&#x2F;&#x2F;www.tuxera.com&#x2F;community&#x2F;ntfs-3g-faq&#x2F;#fullyshut&quot;&gt;doesn&#x27;t see the new changes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This led to a perfect storm of interactions, since running Civ required&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rebooting the machine&lt;&#x2F;li&gt;
&lt;li&gt;Waiting about 10 minutes for Windows to cold-start from a HDD (remember that Hibernate is disabled)&lt;&#x2F;li&gt;
&lt;li&gt;Waiting another 5-10 minutes for Steam and Civ to launch&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Needless to say, this was frustrating for both my friend and I.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trying-new-things&quot;&gt;Trying new things&lt;a class=&quot;zola-anchor&quot; href=&quot;#trying-new-things&quot; aria-label=&quot;Anchor link for: trying-new-things&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I found recently that &lt;a href=&quot;https:&#x2F;&#x2F;fosspost.org&#x2F;tutorials&#x2F;enable-steam-play-on-linux-to-run-windows-games&quot;&gt;Steam has a compatibility layer&lt;&#x2F;a&gt;
for playing Windows games from other OSs.
I downloaded it and gave it a try on a single-player game.
It works great, I have no complaints.&lt;&#x2F;p&gt;
&lt;p&gt;The first time I tried to play with my friend, though, I got repeated issues saying
&#x27;Could not connect to host&#x27;.
Related, I block outgoing network traffic by default at the firewall level.
Unfortunately, Civ uses random ports to connect, so I can&#x27;t whitelist it like I do for HTTP, SSH, etc.
My normal solution here is to have a group called &lt;code&gt;internet&lt;&#x2F;code&gt; which is whitelisted by
IPTables (the native firewall software on Linux, similar to Windows Firewall).
If I want to, for example, chat via Discord, I run &lt;code&gt;sg internet discord&lt;&#x2F;code&gt;
which allows unrestricted network traffic for that single Discord instance.&lt;&#x2F;p&gt;
&lt;p&gt;When I tried this with Steam, however, I ran into all sorts of strange errors.
Sometimes Civ would launch but show network errors when I tried to connect.
Sometimes Steam wouldn&#x27;t recognize my game library, mounted on the NTFS partition so I don&#x27;t have to redownload 5 GB of assets when I reboot.
I tried re-adding the library but got the message &#x27;The partition where the game library is mounted must allow programs to be executed&#x27;.
This was exceedingly odd because I execute programs on that partition all the time.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;strange-and-maddening-rules&quot;&gt;Strange and Maddening Rules&lt;a class=&quot;zola-anchor&quot; href=&quot;#strange-and-maddening-rules&quot; aria-label=&quot;Anchor link for: strange-and-maddening-rules&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I finally tracked the error down to Steam trying to create and run a shell script unsuccessfully.
Fun fact: &lt;code&gt;strings steamclient.so&lt;&#x2F;code&gt; shows, among other things, a complete shell script:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;.steam_exec_test.sh
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;#!&#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;exit 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Couldn&amp;#39;t write %s: %s
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The issue was that my NTFS drive only recognized me, UID 1000 and GID 1000, as a user.
Any file written by any other user or group would have the ownership set to &lt;code&gt;root:root&lt;&#x2F;code&gt;.
Worse yet, the OS would then deny all permissions to you (since you&#x27;re not root).&lt;&#x2F;p&gt;
&lt;p&gt;I spent about a half hour reading through lots of manuals about Linux &amp;lt;=&amp;gt; Windows permissions
(here&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.tuxera.com&#x2F;community&#x2F;ntfs-3g-advanced&#x2F;ownership-and-permissions&#x2F;#usermapping&quot;&gt;the manual&lt;&#x2F;a&gt; if you&#x27;re looking for it).
The solution I came up with was to explicitly add the &lt;code&gt;internet&lt;&#x2F;code&gt; group as me in &lt;code&gt;&amp;lt;mountpoint&amp;gt;&#x2F;.NTFS-3G&#x2F;UserMapping&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now everything works!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;even-more-info&quot;&gt;Even more info&lt;a class=&quot;zola-anchor&quot; href=&quot;#even-more-info&quot; aria-label=&quot;Anchor link for: even-more-info&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;lib&#x2F;iptables&quot;&gt;My IPTables configuration file&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;assets&#x2F;UserMapping.txt&quot;&gt;My &lt;code&gt;UserMapping&lt;&#x2F;code&gt; file&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Buffer Overflows and Stacks and Assembly, Oh My!</title>
        <published>2019-04-29T00:00:00+00:00</published>
        <updated>2019-04-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/buffer-overflows-and-stacks-and-assembly-oh-my/"/>
        <id>https://jyn.dev/buffer-overflows-and-stacks-and-assembly-oh-my/</id>
        
        <content type="html" xml:base="https://jyn.dev/buffer-overflows-and-stacks-and-assembly-oh-my/">&lt;p&gt;Google has a &#x27;Intro&#x27; Capture The Flag competition at
&lt;a href=&quot;https:&#x2F;&#x2F;capturetheflag.withgoogle.com&#x2F;#beginners&#x2F;&quot;&gt;https:&#x2F;&#x2F;capturetheflag.withgoogle.com&#x2F;#beginners&#x2F;&lt;&#x2F;a&gt;.
I&#x27;ve been trying it out because, why not?
The challenges aren&#x27;t easy by any means - they range from javascript crypto
(let me know if you find out how to break JS Safe!) to SQL injections to steganography.
The challenge this post about, however, is a reverse engineering challenge: three, in fact.&lt;&#x2F;p&gt;
&lt;p&gt;10-second summary of reverse engineering: you have a binary and no source code,
and you want to exploit it somehow. In this case, the binary is across a network
connection, so you can&#x27;t modify the code, you have to use what&#x27;s there already.
If you want to try it yourself, the binary is &lt;a href=&quot;&#x2F;assets&#x2F;mngmnt&quot;&gt;here&lt;&#x2F;a&gt;,
it runs on 64-bit Linux 2.4+ (but may work on other machines, I haven&#x27;t tried).
I highly recommend going through the whole CTF first, though.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;challenge-1&quot;&gt;Challenge 1&lt;a class=&quot;zola-anchor&quot; href=&quot;#challenge-1&quot; aria-label=&quot;Anchor link for: challenge-1&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Do some black box testing here, it&#x27;ll go well with your hat.
&lt;code&gt;nc mngmnt-iface.ctfcompetition.com 1337&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;When you connect, you get a screen saying&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;=== Management Interface ===
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 1) Service access
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 2) Read EULA&#x2F;patch notes
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 3) Quit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s read the patchnotes!&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;The following patchnotes were found:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Version0.2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Version0.3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Which patchnotes should be shown?
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Version0.2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# Release 0.2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Updated library X to version 0.Y
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Fixed path traversal bug
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Improved the UX
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;=== Management Interface ===
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 1) Service access
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 2) Read EULA&#x2F;patch notes
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 3) Quit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;The following patchnotes were found:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Version0.2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Version0.3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Which patchnotes should be shown?
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Version0.3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;# Version 0.3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Rollback of version 0.2 because of random reasons
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Blah Blah
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Fix random reboots at 2:32 every second Friday when it&amp;#39;s new-moon.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, look at that. There&#x27;s a path traversal bug:
fixed in .2 and rolled back in .3 for &#x27;random reasons&#x27;.
A path traversal bug is when you have a public server which is meant to serve
files in the starting directory, but instead servers files from the whole machine if
you use relative paths. An example:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;=== Management Interface ===
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 1) Service access
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 2) Read EULA&#x2F;patch notes
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 3) Quit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;The following patchnotes were found:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Version0.2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Version0.3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Which patchnotes should be shown?
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;user:x:1337:1337::&#x2F;home&#x2F;user:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From here you have a couple options to get the flag: you can either guess
(&#x27;fuzz&#x27;) the filename, or you can download the binary and see what file it&#x27;s
trying to open. Let&#x27;s do the second.&lt;&#x2F;p&gt;
&lt;p&gt;But wait, how do we get the binary? It turns out on linux there&#x27;s a &lt;code&gt;proc&lt;&#x2F;code&gt; filesystem
which &lt;em&gt;looks&lt;&#x2F;em&gt; like it has a bunch of files but really is a bunch of kernel info about
the running system. What that means for us is we can get the program without knowing the filename or current directory.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;=== Management Interface ===
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 1) Service access
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 2) Read EULA&#x2F;patch notes
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 3) Quit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;The following patchnotes were found:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Version0.2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Version0.3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Which patchnotes should be shown?
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;exe
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;ELF&amp;gt;PAAA@X�@8
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;... more binary follows ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;&#x2F;proc&lt;&#x2F;code&gt; is the start of the filesystem, &lt;code&gt;self&lt;&#x2F;code&gt; is the directory for the currently running process
(in this case the vulnerable program), and &lt;code&gt;exe&lt;&#x2F;code&gt; is the executable file as it was
when the process started running. So now that we&#x27;ve got the binary, we can take a look at what it&#x27;s doing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enter-gdb&quot;&gt;Enter GDB&lt;a class=&quot;zola-anchor&quot; href=&quot;#enter-gdb&quot; aria-label=&quot;Anchor link for: enter-gdb&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;If you don&#x27;t know how to use GDB, I highly recommend learning. Not only will it
be useful for debugging your own code, but it&#x27;s the main way I know of to
reverse engineer executables.&lt;&#x2F;p&gt;
&lt;p&gt;The first thing I normally do is look at the main function:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;gdb -q .&#x2F;mngmnt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Reading symbols from .&#x2F;mngmnt...done.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) break main
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Breakpoint 1 at 0x41414660: file main.cpp, line 133.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) run
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Starting program: &#x2F;home&#x2F;jyn&#x2F;Documents&#x2F;Programming&#x2F;challenges&#x2F;googlectf&#x2F;mngmnt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Breakpoint 1, main (argc=1, argv=0x7fffffffdc28) at main.cpp:133
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;133     main.cpp: No such file or directory.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) disas
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Dump of assembler code for function main(int, char**):
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414648 &amp;lt;+0&amp;gt;:     push   %rbp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414649 &amp;lt;+1&amp;gt;:     mov    %rsp,%rbp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141464c &amp;lt;+4&amp;gt;:     sub    $0x1e0,%rsp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414653 &amp;lt;+11&amp;gt;:    mov    %edi,-0x1d4(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414659 &amp;lt;+17&amp;gt;:    mov    %rsi,-0x1e0(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;=&amp;gt; 0x0000000041414660 &amp;lt;+24&amp;gt;:    mov    0x201a99(%rip),%rax        # 0x41616100 &amp;lt;stdin@@GLIBC_2.2.5&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;... lots of assembly follows, about 600 lines ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well that&#x27;s a lot to look at. There&#x27;s a function called &lt;code&gt;primary_login&lt;&#x2F;code&gt;
about halfway down though, that looks promising.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) break primary_login()
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Breakpoint 2 at 0x41414576: file main.cpp, line 112.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) continue
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Continuing.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;=== Management Interface ===
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 1) Service access
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 2) Read EULA&#x2F;patch notes
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 3) Quit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Breakpoint 2, primary_login () at main.cpp:112
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;112     in main.cpp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) disas
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Dump of assembler code for function primary_login():
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141456b &amp;lt;+0&amp;gt;:     push   %rbp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141456c &amp;lt;+1&amp;gt;:     mov    %rsp,%rbp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141456f &amp;lt;+4&amp;gt;:     sub    $0x110,%rsp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;=&amp;gt; 0x0000000041414576 &amp;lt;+11&amp;gt;:    lea    0x62b(%rip),%rdi        # 0x41414ba8
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141457d &amp;lt;+18&amp;gt;:    callq  0x400a90 &amp;lt;puts@plt&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414582 &amp;lt;+23&amp;gt;:    mov    $0x0,%esi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414587 &amp;lt;+28&amp;gt;:    lea    0x49e(%rip),%rdi        # 0x41414a2c &amp;lt;_ZL9FLAG_FILE&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141458e &amp;lt;+35&amp;gt;:    mov    $0x0,%eax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414593 &amp;lt;+40&amp;gt;:    callq  0x400be0 &amp;lt;open@plt&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;... about 200 more lines of assembly ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What&#x27;s &lt;code&gt;_ZL9FLAG_FILE&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) printf &amp;quot;%s\n&amp;quot;, 0x41414a2c
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;flag
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After all that, that was it? Well, at least we know how to get the flag now.
One last trick - we can get the current directory of the running process with
&lt;code&gt;&#x2F;proc&#x2F;self&#x2F;cwd&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;nc mngmnt-iface.ctfcompetition.com 1337
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;=== Management Interface ===
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 1) Service access
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 2) Read EULA&#x2F;patch notes
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 3) Quit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;The following patchnotes were found:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Version0.2
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; - Version0.3
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Which patchnotes should be shown?
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;cwd&#x2F;flag
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CTF{I_luv_buggy_sOFtware}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;challenge-2&quot;&gt;Challenge 2&lt;a class=&quot;zola-anchor&quot; href=&quot;#challenge-2&quot; aria-label=&quot;Anchor link for: challenge-2&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;That got our feet wet. The next challenge is a bit trickier.
Can we get through the login screen?&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;nc mngmnt-iface.ctfcompetition.com 1337&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;=== Management Interface ===
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 1) Service access
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 2) Read EULA&#x2F;patch notes
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt; 3) Quit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Please enter the backdoo^Wservice password:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;CTF{I_luv_buggy_sOFtware}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;! Two factor authentication required !
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Please enter secret secondary password:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh boy, what now? Let&#x27;s look at the program again.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;gdb .&#x2F;mngmnt
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Reading symbols from .&#x2F;mngmnt...done.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) disas primary_login
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Dump of assembler code for function primary_login():
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;... lots of code ...
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414627 &amp;lt;+188&amp;gt;:   jne    0x41414630 &amp;lt;primary_login()+197&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414629 &amp;lt;+190&amp;gt;:   callq  0x41414446 &amp;lt;secondary_login()&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141462e &amp;lt;+195&amp;gt;:   jmp    0x41414646 &amp;lt;primary_login()+219&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414630 &amp;lt;+197&amp;gt;:   lea    0x5b9(%rip),%rdi        # 0x41414bf0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414637 &amp;lt;+204&amp;gt;:   callq  0x400a90 &amp;lt;puts@plt&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141463c &amp;lt;+209&amp;gt;:   mov    $0x1,%edi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;---Type &amp;lt;return&amp;gt; to continue, or q &amp;lt;return&amp;gt; to quit---
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414641 &amp;lt;+214&amp;gt;:   callq  0x400aa0 &amp;lt;exit@plt&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414646 &amp;lt;+219&amp;gt;:   leaveq
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414647 &amp;lt;+220&amp;gt;:   retq
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;End of assembler dump.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;secondary_login&lt;&#x2F;code&gt; looks promising, what&#x27;s that look like?
Note: this is really long because we do need to read it this time.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) disas secondary_login
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Dump of assembler code for function secondary_login():
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414446 &amp;lt;+0&amp;gt;:     push   %rbp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414447 &amp;lt;+1&amp;gt;:     mov    %rsp,%rbp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141444a &amp;lt;+4&amp;gt;:     sub    $0x90,%rsp
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414451 &amp;lt;+11&amp;gt;:    lea    0x6d8(%rip),%rdi        # 0x41414b30
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414458 &amp;lt;+18&amp;gt;:    callq  0x400a90 &amp;lt;puts@plt&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141445d &amp;lt;+23&amp;gt;:    lea    0x6f4(%rip),%rdi        # 0x41414b58
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414464 &amp;lt;+30&amp;gt;:    callq  0x400a90 &amp;lt;puts@plt&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414469 &amp;lt;+35&amp;gt;:    lea    -0x90(%rbp),%rax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414470 &amp;lt;+42&amp;gt;:    mov    %rax,%rsi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414473 &amp;lt;+45&amp;gt;:    lea    0x706(%rip),%rdi        # 0x41414b80
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141447a &amp;lt;+52&amp;gt;:    mov    $0x0,%eax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141447f &amp;lt;+57&amp;gt;:    callq  0x400b00 &amp;lt;scanf@plt&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414484 &amp;lt;+62&amp;gt;:    lea    -0x90(%rbp),%rax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141448b &amp;lt;+69&amp;gt;:    mov    %rax,%rdi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141448e &amp;lt;+72&amp;gt;:    callq  0x400b10 &amp;lt;strlen@plt&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414493 &amp;lt;+77&amp;gt;:    mov    %rax,-0x10(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414497 &amp;lt;+81&amp;gt;:    movq   $0x0,-0x8(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141449f &amp;lt;+89&amp;gt;:    mov    -0x8(%rbp),%rax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144a3 &amp;lt;+93&amp;gt;:    cmp    -0x10(%rbp),%rax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144a7 &amp;lt;+97&amp;gt;:    jae    0x414144d6 &amp;lt;secondary_login()+144&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144a9 &amp;lt;+99&amp;gt;:    lea    -0x90(%rbp),%rdx
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144b0 &amp;lt;+106&amp;gt;:   mov    -0x8(%rbp),%rax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144b4 &amp;lt;+110&amp;gt;:   add    %rdx,%rax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144b7 &amp;lt;+113&amp;gt;:   movzbl (%rax),%eax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144ba &amp;lt;+116&amp;gt;:   xor    $0xffffffc7,%eax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144bd &amp;lt;+119&amp;gt;:   mov    %eax,%ecx
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144bf &amp;lt;+121&amp;gt;:   lea    -0x90(%rbp),%rdx
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144c6 &amp;lt;+128&amp;gt;:   mov    -0x8(%rbp),%rax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144ca &amp;lt;+132&amp;gt;:   add    %rdx,%rax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144cd &amp;lt;+135&amp;gt;:   mov    %cl,(%rax)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144cf &amp;lt;+137&amp;gt;:   addq   $0x1,-0x8(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144d4 &amp;lt;+142&amp;gt;:   jmp    0x4141449f &amp;lt;secondary_login()+89&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144d6 &amp;lt;+144&amp;gt;:   cmpq   $0x23,-0x10(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144db &amp;lt;+149&amp;gt;:   jne    0x41414537 &amp;lt;secondary_login()+241&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144dd &amp;lt;+151&amp;gt;:   mov    0x55c(%rip),%rax        # 0x41414a40 &amp;lt;_ZL4FLAG&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144e4 &amp;lt;+158&amp;gt;:   mov    0x55d(%rip),%rdx        # 0x41414a48 &amp;lt;_ZL4FLAG+8&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144eb &amp;lt;+165&amp;gt;:   mov    %rax,-0x90(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144f2 &amp;lt;+172&amp;gt;:   mov    %rdx,-0x88(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x00000000414144f9 &amp;lt;+179&amp;gt;:   mov    0x550(%rip),%rax        # 0x41414a50 &amp;lt;_ZL4FLAG+16&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414500 &amp;lt;+186&amp;gt;:   mov    0x551(%rip),%rdx        # 0x41414a58 &amp;lt;_ZL4FLAG+24&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414507 &amp;lt;+193&amp;gt;:   mov    %rax,-0x80(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141450b &amp;lt;+197&amp;gt;:   mov    %rdx,-0x78(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141450f &amp;lt;+201&amp;gt;:   movzwl 0x54a(%rip),%eax        # 0x41414a60 &amp;lt;_ZL4FLAG+32&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414516 &amp;lt;+208&amp;gt;:   mov    %ax,-0x70(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141451a &amp;lt;+212&amp;gt;:   movzbl 0x541(%rip),%eax        # 0x41414a62 &amp;lt;_ZL4FLAG+34&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414521 &amp;lt;+219&amp;gt;:   mov    %al,-0x6e(%rbp)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414524 &amp;lt;+222&amp;gt;:   lea    -0x90(%rbp),%rax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;---Type &amp;lt;return&amp;gt; to continue, or q &amp;lt;return&amp;gt; to quit---
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141452b &amp;lt;+229&amp;gt;:   test   %rax,%rax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141452e &amp;lt;+232&amp;gt;:   je     0x41414537 &amp;lt;secondary_login()+241&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414530 &amp;lt;+234&amp;gt;:   mov    $0x1,%eax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414535 &amp;lt;+239&amp;gt;:   jmp    0x4141453c &amp;lt;secondary_login()+246&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414537 &amp;lt;+241&amp;gt;:   mov    $0x0,%eax
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141453c &amp;lt;+246&amp;gt;:   test   %al,%al
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141453e &amp;lt;+248&amp;gt;:   je     0x41414553 &amp;lt;secondary_login()+269&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414540 &amp;lt;+250&amp;gt;:   lea    0x63f(%rip),%rdi        # 0x41414b86
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414547 &amp;lt;+257&amp;gt;:   callq  0x400a90 &amp;lt;puts@plt&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141454c &amp;lt;+262&amp;gt;:   callq  0x4141428e &amp;lt;command_line()&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414551 &amp;lt;+267&amp;gt;:   jmp    0x41414569 &amp;lt;secondary_login()+291&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414553 &amp;lt;+269&amp;gt;:   lea    0x63a(%rip),%rdi        # 0x41414b94
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141455a &amp;lt;+276&amp;gt;:   callq  0x400a90 &amp;lt;puts@plt&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141455f &amp;lt;+281&amp;gt;:   mov    $0x1,%edi
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414564 &amp;lt;+286&amp;gt;:   callq  0x400aa0 &amp;lt;exit@plt&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x0000000041414569 &amp;lt;+291&amp;gt;:   leaveq
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;   0x000000004141456a &amp;lt;+292&amp;gt;:   retq
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s a few things of note here. First is the &lt;code&gt;command_line&lt;&#x2F;code&gt; function,
which looks promising. Next is &lt;code&gt;_ZL4FLAG&lt;&#x2F;code&gt;, which seems useful. What&#x27;s there?&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) printf &amp;quot;%s\n&amp;quot;, 0x41414a40
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;�����������������������������������&#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s not helpful, it&#x27;s binary data. And why does it have a shell at the end there?
And finally, how do we get to &lt;code&gt;command_line&lt;&#x2F;code&gt;? Let&#x27;s trace the execution.
If you&#x27;ve heard of &#x27;basic blocks&#x27; in compilers, that&#x27;s basically what we&#x27;re going
to do now: split up the code into segments divided by jumps.&lt;&#x2F;p&gt;
&lt;p&gt;First we start at +0. Then execution is linear until line +93, where there&#x27;s a
&lt;code&gt;cmp&lt;&#x2F;code&gt; (compare) and a &lt;code&gt;jae&lt;&#x2F;code&gt; (jump above equal) to +144. At 144, it compares
-0x10(%rbp) to 0x23, or 35 in decimal.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s funny, the number of &lt;code&gt;�&lt;&#x2F;code&gt; characters in the data above is 35.
Coincidence? I think not. What happens if we just put in a string with 35 characters?&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;! Two factor authentication required !
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Please enter secret secondary password:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Authenticated
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Wait, what? That&#x27;s it? Where&#x27;s the flag?
It turns out this program forgot to check that you had the right password.
I couldn&#x27;t figure out what was going on, so I cheated and looked at
https:&#x2F;&#x2F;jhalon.github.io&#x2F;2018-google-ctf-beginners-pwn-solutions-1&#x2F;
(which is a much better writeup). Long story short, there&#x27;s an inner loop
doing funny things with &lt;code&gt;xor&lt;&#x2F;code&gt;. If we xor the binary at &lt;code&gt;_ZL4FLAG&lt;&#x2F;code&gt; with
&lt;code&gt;0xc7&lt;&#x2F;code&gt;, we get back the flag. GDB and python will both be helpful here.&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) print&#x2F;x _ZL4FLAG
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$5 = {0x84, 0x93, 0x81, 0xbc, 0x93, 0xb0, 0xa8, 0x98, 0x97, 0xa6, 0xb4, 0x94, 0xb0, 0xa8,
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  0xb5, 0x83, 0xbd, 0x98, 0x85, 0xa2, 0xb3, 0xb3, 0xa2, 0xb5, 0x98, 0xb3, 0xaf, 0xf3, 0xa9,
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  0x98, 0xf6, 0x98, 0xac, 0xf8, 0xba}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;(gdb) quit
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ python -q
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import re
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; hexes = &amp;quot;&amp;quot;&amp;quot;0x84, 0x93, 0x81, 0xbc, 0x93, 0xb0, 0xa8, 0x98, 0x97, 0xa6, 0xb4, 0x94, 0xb0, 0xa8,
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...   0xb5, 0x83, 0xbd, 0x98, 0x85, 0xa2, 0xb3, 0xb3, 0xa2, 0xb5, 0x98, 0xb3, 0xaf, 0xf3, 0xa9,
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;...   0x98, 0xf6, 0x98, 0xac, 0xf8, 0xba&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; chars = &amp;#39;&amp;#39;.join(hexes.split()).replace(&amp;#39;,&amp;#39;, &amp;#39;&amp;#39;).replace(&amp;#39;0x&amp;#39;, &amp;#39;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; chars
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;#39;849381bc93b0a89897a6b494b0a8b583bd9885a2b3b3a2b598b3aff3a998f698acf8ba&amp;#39;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &amp;#39;&amp;#39;.join([chr(int(c, 16) ^ 0xc7) for c in re.findall(&amp;#39;..&amp;#39;, chars)])
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;&amp;#39;CTF{Two_PasSworDz_Better_th4n_1_k?}&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Quick explanation of that awful and hacky code:
&lt;code&gt;print&#x2F;x&lt;&#x2F;code&gt; means print as hexidecimal instead of decimal or binary.
&lt;code&gt;&#x27;&#x27;.join(hexes.split())&lt;&#x2F;code&gt; is a hacky way of removing whitespace.
The &lt;code&gt;replace&lt;&#x2F;code&gt; calls are just getting rid of formatting we don&#x27;t care about.
&lt;code&gt;re.findall(&#x27;..&#x27;, chars)&lt;&#x2F;code&gt; splits the strings into 2-character sequences.
The rest is a list comprehesion which converts each string to an int,
xors it with hexidecimal c7, then finally joins the whole list into a string.&lt;&#x2F;p&gt;
&lt;p&gt;Side note: originally this was even more hacky - I used gdb&#x27;s &lt;code&gt;&amp;lt;address&amp;gt;@n&lt;&#x2F;code&gt; syntax
which gives you back the memory in architecture-endian order. 1&#x2F;10 do not recommend.&lt;&#x2F;p&gt;
&lt;!--

## Challenge 3
&gt; It&#x27;s a sure bet that they can&#x27;t handle their memory properly

The last challenge was also the hardest to exploit. Once you enter the second flag,
you get a shell without any instructions:

```
$  .&#x2F;mngmnt
=== Management Interface ===
 1) Service access
 2) Read EULA&#x2F;patch notes
 3) Quit
1
Please enter the backdoo^Wservice password:
flag
! Two factor authentication required !
Please enter secret secondary password:
CTF{Two_PasSworDz_Better_th4n_1_k?}
Authenticated
&gt; help
Unknown command &#x27;help&#x27;
&gt; ls
Unknown command &#x27;ls&#x27;
&gt; whoami
Unknown command &#x27;whoami&#x27;
```

Let&#x27;s see if we can find what&#x27;s going on. Looking back up at the assembly,
we see that it calls `command_line` once you put in the second password.
What&#x27;s that doing?

```
gdb .&#x2F;mngmnt
Reading symbols from .&#x2F;mngmnt...done.
(gdb) disas command_line
Dump of assembler code for function command_line():
   0x000000004141428e &lt;+0&gt;:     push   %rbp
   0x000000004141428f &lt;+1&gt;:     mov    %rsp,%rbp
   0x0000000041414292 &lt;+4&gt;:     push   %rbx
   0x0000000041414293 &lt;+5&gt;:     sub    $0x128,%rsp
   0x000000004141429a &lt;+12&gt;:    lea    0x7ca(%rip),%rdi        # 0x41414a6b
   0x00000000414142a1 &lt;+19&gt;:    mov    $0x0,%eax
   0x00000000414142a6 &lt;+24&gt;:    callq  0x400a70 &lt;printf@plt&gt;
   0x00000000414142ab &lt;+29&gt;:    lea    -0x30(%rbp),%rax
   0x00000000414142af &lt;+33&gt;:    mov    %rax,%rdi
   0x00000000414142b2 &lt;+36&gt;:    callq  0x4141423a &lt;getsx(char*)&gt;
   0x00000000414142b7 &lt;+41&gt;:    mov    0x201e77(%rip),%eax        # 0x41616134 &lt;_ZL13cmds_executed&gt;
   0x00000000414142bd &lt;+47&gt;:    add    $0x1,%eax
   0x00000000414142c0 &lt;+50&gt;:    mov    %eax,0x201e6e(%rip)        # 0x41616134 &lt;_ZL13cmds_executed&gt;
   0x00000000414142c6 &lt;+56&gt;:    lea    -0x30(%rbp),%rax
   0x00000000414142ca &lt;+60&gt;:    lea    0x79d(%rip),%rsi        # 0x41414a6e
   0x00000000414142d1 &lt;+67&gt;:    mov    %rax,%rdi
   0x00000000414142d4 &lt;+70&gt;:    callq  0x400ba0 &lt;strcmp@plt&gt;
   0x00000000414142d9 &lt;+75&gt;:    test   %eax,%eax
   0x00000000414142db &lt;+77&gt;:    jne    0x414142ee &lt;command_line()+96&gt;
   0x00000000414142dd &lt;+79&gt;:    lea    0x78f(%rip),%rdi        # 0x41414a73
   0x00000000414142e4 &lt;+86&gt;:    callq  0x400a90 &lt;puts@plt&gt;
   0x00000000414142e9 &lt;+91&gt;:    jmpq   0x4141443c &lt;command_line()+430&gt;
   0x00000000414142ee &lt;+96&gt;:    lea    -0x30(%rbp),%rax
   0x00000000414142f2 &lt;+100&gt;:   lea    0x77f(%rip),%rsi        # 0x41414a78
   0x00000000414142f9 &lt;+107&gt;:   mov    %rax,%rdi
   0x00000000414142fc &lt;+110&gt;:   callq  0x400ba0 &lt;strcmp@plt&gt;
   0x0000000041414301 &lt;+115&gt;:   test   %eax,%eax
   0x0000000041414303 &lt;+117&gt;:   jne    0x41414313 &lt;command_line()+133&gt;
   0x0000000041414305 &lt;+119&gt;:   lea    0x774(%rip),%rdi        # 0x41414a80
   0x000000004141430c &lt;+126&gt;:   callq  0x400a90 &lt;puts@plt&gt;
... snip ...
   0x00000000414143ff &lt;+369&gt;:   lea    0x708(%rip),%rdi        # 0x41414b0e
   0x0000000041414406 &lt;+376&gt;:   callq  0x400a90 &lt;puts@plt&gt;
   0x000000004141440b &lt;+381&gt;:   lea    -0x130(%rbp),%rax
   0x0000000041414412 &lt;+388&gt;:   mov    %rax,%rdi
   0x0000000041414415 &lt;+391&gt;:   callq  0x400ae0 &lt;system@plt&gt;
   0x000000004141441a &lt;+396&gt;:   jmpq   0x4141429a &lt;command_line()+12&gt;
---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---
   0x000000004141441f &lt;+401&gt;:   lea    -0x30(%rbp),%rax
   0x0000000041414423 &lt;+405&gt;:   mov    %rax,%rsi
   0x0000000041414426 &lt;+408&gt;:   lea    0x6ec(%rip),%rdi        # 0x41414b19
   0x000000004141442d &lt;+415&gt;:   mov    $0x0,%eax
   0x0000000041414432 &lt;+420&gt;:   callq  0x400a70 &lt;printf@plt&gt;
   0x0000000041414437 &lt;+425&gt;:   jmpq   0x4141429a &lt;command_line()+12&gt;
   0x000000004141443c &lt;+430&gt;:   add    $0x128,%rsp
   0x0000000041414443 &lt;+437&gt;:   pop    %rbx
   0x0000000041414444 &lt;+438&gt;:   pop    %rbp
   0x0000000041414445 &lt;+439&gt;:   retq
```

This looks long and compilicated, but it&#x27;s really doing the same thing
over and over: comparing a string to a bunch of other strings.
That begs the question: What other strings?

```
(gdb) printf &quot;%s\n&quot;, 0x41414a6e
quit
(gdb) printf &quot;%s\n&quot;, 0x41414a78
version
(gdb) printf &quot;%s\n&quot;, 0x41414a8c
shell
(gdb) printf &quot;%s\n&quot;, 0x41414ac3
echo
(gdb) printf &quot;%s\n&quot;, 0x41414ac8
debug
```

Let&#x27;s see what these do.

```
&gt; version
Version 0.3
&gt; shell
Security made us disable the shell, sorry!
&gt; echo hi
hi
&gt; debug
Debug data dump:
 pid=30575 cmds executed=0x41616134-&gt;8 Mappings:
───────┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
       │ File: &#x2F;proc&#x2F;30575&#x2F;maps
───────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
   1   │ 00400000-00401000 r-xp 00000000 08:04 315016                             &#x2F;home&#x2F;jyn&#x2F;Documents&#x2F;Programming&#x2F;challenges&#x2F;googlectf&#x2F;mngmnt
   2   │ 41414000-41415000 r-xp 00014000 08:04 315016                             &#x2F;home&#x2F;jyn&#x2F;Documents&#x2F;Programming&#x2F;challenges&#x2F;googlectf&#x2F;mngmnt
   3   │ 41615000-41616000 r--p 00015000 08:04 315016                             &#x2F;home&#x2F;jyn&#x2F;Documents&#x2F;Programming&#x2F;challenges&#x2F;googlectf&#x2F;mngmnt
   4   │ 41616000-41617000 rw-p 00016000 08:04 315016                             &#x2F;home&#x2F;jyn&#x2F;Documents&#x2F;Programming&#x2F;challenges&#x2F;googlectf&#x2F;mngmnt
   5   │ 41617000-41638000 rw-p 00000000 00:00 0                                  [heap]
   6   │ 7ffff70a5000-7ffff728c000 r-xp 00000000 08:05 1840331                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.27.so
   7   │ 7ffff728c000-7ffff748c000 ---p 001e7000 08:05 1840331                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.27.so
   8   │ 7ffff748c000-7ffff7490000 r--p 001e7000 08:05 1840331                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.27.so
   9   │ 7ffff7490000-7ffff7492000 rw-p 001eb000 08:05 1840331                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libc-2.27.so
  10   │ 7ffff7492000-7ffff7496000 rw-p 00000000 00:00 0 
  11   │ 7ffff7496000-7ffff74ad000 r-xp 00000000 08:05 1840694                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libgcc_s.so.1
  12   │ 7ffff74ad000-7ffff76ac000 ---p 00017000 08:05 1840694                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libgcc_s.so.1
  13   │ 7ffff76ac000-7ffff76ad000 r--p 00016000 08:05 1840694                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libgcc_s.so.1
  14   │ 7ffff76ad000-7ffff76ae000 rw-p 00017000 08:05 1840694                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libgcc_s.so.1
  15   │ 7ffff76ae000-7ffff784b000 r-xp 00000000 08:05 1840394                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libm-2.27.so
  16   │ 7ffff784b000-7ffff7a4a000 ---p 0019d000 08:05 1840394                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libm-2.27.so
  17   │ 7ffff7a4a000-7ffff7a4b000 r--p 0019c000 08:05 1840394                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libm-2.27.so
  18   │ 7ffff7a4b000-7ffff7a4c000 rw-p 0019d000 08:05 1840394                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libm-2.27.so
  19   │ 7ffff7a4c000-7ffff7bc5000 r-xp 00000000 08:05 1706663                    &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libstdc++.so.6.0.25
  20   │ 7ffff7bc5000-7ffff7dc5000 ---p 00179000 08:05 1706663                    &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libstdc++.so.6.0.25
  21   │ 7ffff7dc5000-7ffff7dcf000 r--p 00179000 08:05 1706663                    &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libstdc++.so.6.0.25
  22   │ 7ffff7dcf000-7ffff7dd1000 rw-p 00183000 08:05 1706663                    &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libstdc++.so.6.0.25
  23   │ 7ffff7dd1000-7ffff7dd5000 rw-p 00000000 00:00 0 
  24   │ 7ffff7dd5000-7ffff7dfc000 r-xp 00000000 08:05 1840303                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.27.so
  25   │ 7ffff7fc4000-7ffff7fca000 rw-p 00000000 00:00 0 
  26   │ 7ffff7ff7000-7ffff7ffa000 r--p 00000000 00:00 0                          [vvar]
  27   │ 7ffff7ffa000-7ffff7ffc000 r-xp 00000000 00:00 0                          [vdso]
  28   │ 7ffff7ffc000-7ffff7ffd000 r--p 00027000 08:05 1840303                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.27.so
  29   │ 7ffff7ffd000-7ffff7ffe000 rw-p 00028000 08:05 1840303                    &#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;ld-2.27.so
  30   │ 7ffff7ffe000-7ffff7fff000 rw-p 00000000 00:00 0 
  31   │ 7ffffffdd000-7ffffffff000 rw-p 00000000 00:00 0                          [stack]
  32   │ ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
&gt; quit
Bye!
```

Well, no dice. That debug info is a little strange.
And why have a shell option if it&#x27;s disabled?
Let&#x27;s look at that more closely.

```
   0x0000000041414317 &lt;+137&gt;:   lea    0x76e(%rip),%rsi        # 0x41414a8c
   0x000000004141431e &lt;+144&gt;:   mov    %rax,%rdi
   0x0000000041414321 &lt;+147&gt;:   callq  0x400ba0 &lt;strcmp@plt&gt;
   0x0000000041414326 &lt;+152&gt;:   test   %eax,%eax
   0x0000000041414328 &lt;+154&gt;:   jne    0x41414353 &lt;command_line()+197&gt;
   0x000000004141432a &lt;+156&gt;:   movzbl 0x201e07(%rip),%eax        # 0x41616138 &lt;_ZL13shell_enabled&gt;
   0x0000000041414331 &lt;+163&gt;:   xor    $0x1,%eax
   0x0000000041414334 &lt;+166&gt;:   test   %al,%al
   0x0000000041414336 &lt;+168&gt;:   je     0x41414349 &lt;command_line()+187&gt;
   0x0000000041414338 &lt;+170&gt;:   lea    0x759(%rip),%rdi        # 0x41414a98
   0x000000004141433f &lt;+177&gt;:   callq  0x400a90 &lt;puts@plt&gt;
   0x0000000041414344 &lt;+182&gt;:   jmpq   0x4141429a &lt;command_line()+12&gt;
   0x0000000041414349 &lt;+187&gt;:   callq  0x41414227 &lt;debug_shell()&gt;
```

This is basically doing three things - checking if we input &#x27;shell&#x27;,
checking if `_ZL13shell_enabled` is 0, and if so launching a shell on the host.
Unfortunately, `_ZL13shell_enabled` is _always_ 0. What can we do?

Well, the challenge description mentioned memory.
Could there be a buffer overrun somewhere? Let&#x27;s open gdb and check it out.
For this bit I&#x27;m actually going to use a gdb addon called
[peda](https:&#x2F;&#x2F;github.com&#x2F;longld&#x2F;peda) which makes debugging much nicer
without changing any behaviour.

What happens if we put in a really long string?

```

!--&gt;
&lt;p&gt;(Challenge 3 will probably not be forthcoming, I finished it but never got around to writing it up.)&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Reverse Engineering x86 assembly</title>
        <published>2018-09-29T00:00:00+00:00</published>
        <updated>2018-09-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/reverse-engineering-x86-assembly/"/>
        <id>https://jyn.dev/reverse-engineering-x86-assembly/</id>
        
        <content type="html" xml:base="https://jyn.dev/reverse-engineering-x86-assembly/">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;a class=&quot;zola-anchor&quot; href=&quot;#intro&quot; aria-label=&quot;Anchor link for: intro&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;For those of you not familiar with the C toolchain, it goes something like this:&lt;&#x2F;p&gt;
&lt;p&gt;Source -&amp;gt; preprocessed source -&amp;gt; assembly -&amp;gt; object file -&amp;gt; binary&lt;&#x2F;p&gt;
&lt;p&gt;The second step (preprocessed -&amp;gt; assembly) is the hardest to undo.
It removes labels, debug symbols, and turns a high-level control flow into assembly instructions.
However, since you &lt;em&gt;need&lt;&#x2F;em&gt; a binary to run a program, if you can undo that step,
you can see what&#x27;s going on.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;gdb-basics&quot;&gt;GDB Basics&lt;a class=&quot;zola-anchor&quot; href=&quot;#gdb-basics&quot; aria-label=&quot;Anchor link for: gdb-basics&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;GDB is a debugger. It steps through a compiled program, line by line, and shows you
the changes after every step.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a simple hello-world program and step through it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; class=&quot;language-C z-code&quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;stdio.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;puts&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Hello, world!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-keyword z-control z-flow z-return z-c&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-c&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Passing &lt;code&gt;-g&lt;&#x2F;code&gt; to &lt;code&gt;gcc&lt;&#x2F;code&gt; means preserve debug symbols, so we know where we are in the original source code.
Passing &lt;code&gt;-q&lt;&#x2F;code&gt; to &lt;code&gt;gdb&lt;&#x2F;code&gt; means don&#x27;t print 10 lines of copyright info.
Note that we have to add a breakpoint in the main function, or it will run without ever stopping.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; gcc&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;g&lt;&#x2F;span&gt; hello_world.c&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;o&lt;&#x2F;span&gt; hello&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; gdb&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;q&lt;&#x2F;span&gt; hello&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; symbols from hello...done.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; list&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;1       &lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;include &amp;lt;stdio.h&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;       int main(void&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-punctuation z-definition z-compound z-braces z-begin z-shell&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;4&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;         puts(&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Hello, world!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;5&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;         return 0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;6&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;       &lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-braces z-end z-shell&quot;&gt;}&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;7&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; break main&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Breakpoint&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1 at 0x4004db: file hello_world.c, line 4.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; run&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Starting&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; program: &#x2F;home&#x2F;jyn&#x2F;hello&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Breakpoint&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1, main (&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;at&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; tmp.c:4&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;4&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;         puts(&lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Hello, world!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; next&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Hello,&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; world!&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;5&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;         return 0&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;6&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;       &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; continue&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Continuing.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;[Inferior&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1 (process 28690&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;exited&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; normally]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also show variables as you step through.
(Note that &lt;code&gt;return 0&lt;&#x2F;code&gt; is optional in the main function)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; class=&quot;language-C z-code&quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-preprocessor z-include z-c&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-include z-c&quot;&gt;#include&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-other z-lt-gt z-include z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;stdio.h&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-c&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-storage z-type z-c&quot;&gt;void&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-c&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-storage z-type z-c&quot;&gt;char&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-c&quot;&gt;*&lt;&#x2F;span&gt;var &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Hello, world!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  var &lt;span class=&quot;z-keyword z-operator z-assignment z-c&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;changed my mind&lt;span class=&quot;z-punctuation z-definition z-string z-end z-c&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;  &lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-support z-function z-C99 z-c&quot;&gt;puts&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-c&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;var&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-c&quot;&gt;&lt;span class=&quot;z-meta z-group z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-c&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-c&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-c&quot;&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-c&quot;&gt;&lt;span class=&quot;z-meta z-block z-c&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-c&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; gcc&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;g&lt;&#x2F;span&gt; var.c&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;o&lt;&#x2F;span&gt; var&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; gdb&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;q&lt;&#x2F;span&gt; var&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Reading&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; symbols from var...done.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; break main&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Breakpoint&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1 at 0x4004df: file var.c, line 4.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; run&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Starting&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; program: &#x2F;home&#x2F;jyn&#x2F;var&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Breakpoint&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1, main (&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;at&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; var.c:4&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;4&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;         char &lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;*&lt;&#x2F;span&gt;var = &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Hello, world!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; print var&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; = 0x0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; n&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;5&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;         var = &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;changed my mind&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; print var&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; = 0x4005a0 &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Hello, world!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; n&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;6&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;         puts(var&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; print var&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; = 0x4005ae &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;changed my mind&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; n&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;changed&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; my mind&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;7&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;       &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gdb&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-compound z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; c&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Continuing.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;[Inferior&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; 1 (process 29542&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;) &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;exited&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; normally]&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This post is continued in &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;buffer-overflows-and-stacks-and-assembly-oh-my&#x2F;&quot;&gt;Buffer Overflows and Stacks and Assembly, Oh My&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Keepass on Linux and Android</title>
        <published>2018-08-24T00:00:00+00:00</published>
        <updated>2018-08-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/keepass-on-linux-and-android/"/>
        <id>https://jyn.dev/keepass-on-linux-and-android/</id>
        
        <content type="html" xml:base="https://jyn.dev/keepass-on-linux-and-android/">&lt;p&gt;Previously, I wrote about
&lt;a href=&quot;&#x2F;2018-02-24-Password-Safety.html&quot;&gt;using a password manager&lt;&#x2F;a&gt;.
However, the disadvantage of using an audited, local manager like
&lt;a href=&quot;https:&#x2F;&#x2F;keepass.info&quot;&gt;Keepass&lt;&#x2F;a&gt; is that it&#x27;s hard to share passwords between devices.
You can put the encrypted database in a file-sharing service like Google Drive,
but that means you need a sync client on all of your devices, and Google
&lt;a href=&quot;https:&#x2F;&#x2F;abevoelker.github.io&#x2F;how-long-since-google-said-a-google-drive-linux-client-is-coming&#x2F;&quot;&gt;doesn&#x27;t have one for Linux&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, it&#x27;s Linux, so there are alternatives.&lt;&#x2F;p&gt;
&lt;p&gt;My current favorite sync client is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astrada&#x2F;google-drive-ocamlfuse&quot;&gt;google-drive-ocamlfuse&lt;&#x2F;a&gt;.
Although it&#x27;s annoying to have to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astrada&#x2F;google-drive-ocamlfuse&#x2F;wiki&#x2F;Installation&quot;&gt;build from source&lt;&#x2F;a&gt;
and is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astrada&#x2F;google-drive-ocamlfuse#usage&quot;&gt;command-line only&lt;&#x2F;a&gt;,
it lets you treat Drive as a user-land file system using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;libfuse&#x2F;libfuse&quot;&gt;FUSE&lt;&#x2F;a&gt;,
which is particularly nice for clients that aren&#x27;t web-aware (like keepass).
It also has an excellent &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;astrada&#x2F;google-drive-ocamlfuse&#x2F;wiki&#x2F;Automounting&quot;&gt;walkthrough&lt;&#x2F;a&gt; on how to automount on boot
(this is Linux, nothing is automatic).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;a class=&quot;zola-anchor&quot; href=&quot;#appendix&quot; aria-label=&quot;Anchor link for: appendix&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Why not just use Dropbox? It doesn&#x27;t support NTFS drives
(or anything other than &lt;a href=&quot;https:&#x2F;&#x2F;www.dropbox.com&#x2F;help&#x2F;desktop-web&#x2F;system-requirements#desktop&quot;&gt;ext4&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Why not use an encrypted service, like &lt;a href=&quot;https:&#x2F;&#x2F;mega.nz&#x2F;&quot;&gt;MEGA&lt;&#x2F;a&gt;
or &lt;a href=&quot;https:&#x2F;&#x2F;spideroak.com&#x2F;&quot;&gt;Spideroak&lt;&#x2F;a&gt;? They don&#x27;t support WebDAV,
and I don&#x27;t feel like going through a file system every time I update passwords
(most phone clients only allow file access through a specific app).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Why not use &amp;lt;some other service&amp;gt; that (supports WebDAV or syncs automatically on phones) and has a Linux client? I haven&#x27;t heard of &amp;lt;some other service&amp;gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Rewriting Jython</title>
        <published>2018-06-09T00:00:00+00:00</published>
        <updated>2018-06-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/rewriting-jython/"/>
        <id>https://jyn.dev/rewriting-jython/</id>
        
        <content type="html" xml:base="https://jyn.dev/rewriting-jython/">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;a class=&quot;zola-anchor&quot; href=&quot;#intro&quot; aria-label=&quot;Anchor link for: intro&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Have you heard of Jython? It&#x27;s a variant of Python written in Java instead of C;
it lets you use native Java classes in python code.
The most common use case is integration with large existing Java codebases:
You can reuse Java code and still get the readability and conciseness of python.&lt;&#x2F;p&gt;
&lt;p&gt;I was thinking about types in Python, particularly how it allows
primitive operators to be overridden (+-&#x2F;*%). For those unfamiliar with Python classes,
check out my &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;object-oriented-python&#x2F;&quot;&gt;previous post&lt;&#x2F;a&gt;;
essentially it uses methods like &lt;code&gt;__add__&lt;&#x2F;code&gt;, &lt;code&gt;__sub__&lt;&#x2F;code&gt;, etc. as interfaces.
This lets you do things like&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;which would throw nasty exceptions in most other languages.&lt;&#x2F;p&gt;
&lt;p&gt;Because python allows any type to be called with these methods, it&#x27;s the
responsibility of the class implementing the interface to ensure type safety,
for example &lt;code&gt;42 - &#x27;2&#x27;&lt;&#x2F;code&gt; will throw &lt;code&gt;TypeError: unsupported operand type(s) for -: &#x27;int&#x27; and &#x27;str&#x27;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I thought to myself, this looks doable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reflections&quot;&gt;Reflections&lt;a class=&quot;zola-anchor&quot; href=&quot;#reflections&quot; aria-label=&quot;Anchor link for: reflections&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Java has a rarely-used but very powerful &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;tutorial&#x2F;reflect&#x2F;&quot;&gt;reflection API&lt;&#x2F;a&gt;.
This allows you to do anything from get the class of a variable at runtime
(and do different things depending on which class it is)
to get the methods and constructors of an unknown class.
My (primitive) implementation of Jython make heavy use of reflections to use the
builtin Java classes and avoiding writing an interpreter from scratch.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duck-typing&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Duck_typing&quot;&gt;Duck Typing&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#duck-typing&quot; aria-label=&quot;Anchor link for: duck-typing&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Since python doesn&#x27;t enforce types, we won&#x27;t either. That means we have to call
methods at runtime, without knowing the class of the variable.
&lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;lang&#x2F;Class.html#getMethods--&quot;&gt;Java lets you do this!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;[&#x2F;&#x2F;]: # Secondly, since we want to allow inheritance, we have to find the constructors at runtime.
[&#x2F;&#x2F;]: # This &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;8&#x2F;docs&#x2F;api&#x2F;java&#x2F;lang&#x2F;Class.html#getConstructors--&quot;&gt;can be done&lt;&#x2F;a&gt; as well,
[&#x2F;&#x2F;]: # but since we want the types to match, we have to iterate all the constructors until we find one that&#x27;s compatible.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;api&quot;&gt;API&lt;a class=&quot;zola-anchor&quot; href=&quot;#api&quot; aria-label=&quot;Anchor link for: api&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The current API is exactly one class, &lt;code&gt;NumberWrapper&lt;&#x2F;code&gt;, which does nothing more than
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Type_conversion#Type_promotion&quot;&gt;type promotion&lt;&#x2F;a&gt; (and demotion).
I&#x27;m currently working on a &lt;code&gt;ListWrapper&lt;&#x2F;code&gt; which would demonstrate the power of
duck typing more clearly.
Because this is a toy project (and because parsing is hard), I have not implemented
an interpreter; the sample usage would be &lt;code&gt;add(new NumberWrapper(5), new NumberWrapper(-.14))&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The full code is available &lt;a href=&quot;&#x2F;assets&#x2F;jython.java&quot;&gt;here&lt;&#x2F;a&gt;.
Its output is as follows:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ javac jython.java -Xlint:unchecked
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;$ java main
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;3.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that despite the extensive use of duck typing there are no type warnings;
&lt;code&gt;javac&lt;&#x2F;code&gt; emits warnings only for casts, not calls to the reflection API.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Copying Generic Arrays in Java</title>
        <published>2018-03-29T00:00:00+00:00</published>
        <updated>2018-03-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/copying-generic-arrays-in-java/"/>
        <id>https://jyn.dev/copying-generic-arrays-in-java/</id>
        
        <content type="html" xml:base="https://jyn.dev/copying-generic-arrays-in-java/">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;a class=&quot;zola-anchor&quot; href=&quot;#intro&quot; aria-label=&quot;Anchor link for: intro&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Copying an array.
It sounds so simple - run a quick &lt;code&gt;for&lt;&#x2F;code&gt; loop,
or better yet, &lt;code&gt;System.arraycopy&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; class=&quot;language-java z-code&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;System&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-java&quot;&gt;&lt;span class=&quot;z-variable z-function z-java&quot;&gt;arraycopy&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;array&lt;span class=&quot;z-punctuation z-separator z-comma z-java&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-java&quot;&gt;,&lt;&#x2F;span&gt; tmp&lt;span class=&quot;z-punctuation z-separator z-comma z-java&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-java&quot;&gt;,&lt;&#x2F;span&gt; array&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;length&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What if you need to perform a destructive operation? &lt;sup&gt;&lt;a href=&quot;#1&quot;&gt;[1]&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;
In my Data Structures class, we&#x27;re asked to implement heap sort
without modifying the original array.
This is simple enough: use &lt;code&gt;array.clone&lt;&#x2F;code&gt;.
It preserves the order of the original array while giving you a new instance.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; class=&quot;language-java z-code&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; tmp &lt;span class=&quot;z-meta z-assignment z-rhs z-java&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-java&quot;&gt;=&lt;&#x2F;span&gt; array&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-java&quot;&gt;&lt;span class=&quot;z-variable z-function z-java&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember that this is a destructive operation, however;
you need a new third array in which to store the result.
Only one problem: Java doesn&#x27;t allow generic arrays to be created.
Trying to do so is a compile-time error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; class=&quot;language-java z-code&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-java&quot;&gt;&lt;span class=&quot;z-storage z-type z-java&quot;&gt;class&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-class z-java&quot;&gt;Generic&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-declaration z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-java&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-type z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-java&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-identifier z-java&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-constructor z-java&quot;&gt;Generic&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-parameters z-java&quot;&gt;&lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-support z-class z-java&quot;&gt;System&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;out&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-java&quot;&gt;&lt;span class=&quot;z-variable z-function z-java&quot;&gt;println&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-instantiation z-java&quot;&gt;&lt;span class=&quot;z-keyword z-other z-storage z-new z-java&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-array-initialization z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-java&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-java&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;public&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-storage z-type z-void z-java&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-identifier z-java&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-java&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-parameters z-java&quot;&gt;&lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-java&quot;&gt;args&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-meta z-instantiation z-java&quot;&gt;&lt;span class=&quot;z-keyword z-other z-storage z-new z-java&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;Generic&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-java&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-java&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-parens z-constructor-arguments z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-job z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-job z-shell&quot;&gt;%&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; javac Generic.java&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Generic.java:3:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; error: generic array creation&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;        &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;System.out.println&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;(new T&lt;span class=&quot;z-keyword z-control z-regexp z-set z-begin z-shell&quot;&gt;[&lt;&#x2F;span&gt;0&lt;span class=&quot;z-keyword z-control z-regexp z-set z-end z-shell&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;                           &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;^&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;1&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; error&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fine, let&#x27;s do some &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;530289&quot;&gt;ugly casting&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;T[] array = (T[]) new Object[0];&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;strange-happenings&quot;&gt;Strange happenings&lt;a class=&quot;zola-anchor&quot; href=&quot;#strange-happenings&quot; aria-label=&quot;Anchor link for: strange-happenings&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;So far, this has all been pretty standard.
Java has &lt;a href=&quot;https:&#x2F;&#x2F;docs.oracle.com&#x2F;javase&#x2F;tutorial&#x2F;java&#x2F;generics&#x2F;erasure.html&quot;&gt;type erasure&lt;&#x2F;a&gt;, Java generics are a pain, yadda yadda.
Now we get to the strange part of this post.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; class=&quot;language-java z-code&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-java&quot;&gt;&lt;span class=&quot;z-storage z-type z-java&quot;&gt;class&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-class z-java&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-declaration z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-java&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-type z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-java&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;private&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-field z-java&quot;&gt;array&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-identifier z-java&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-constructor z-java&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-parameters z-java&quot;&gt;&lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-java&quot;&gt;array&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-variable z-language z-java&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;array &lt;span class=&quot;z-meta z-assignment z-rhs z-java&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-java&quot;&gt;=&lt;&#x2F;span&gt; array&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-identifier z-java&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-java&quot;&gt;getNew&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-parameters z-java&quot;&gt;&lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; result &lt;span class=&quot;z-meta z-assignment z-rhs z-java&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-java&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-instantiation z-java&quot;&gt;&lt;span class=&quot;z-keyword z-other z-storage z-new z-java&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-array-initialization z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-java&quot;&gt;[&lt;&#x2F;span&gt;array&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;length&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-java&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-loop z-for z-java&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-java&quot;&gt;int&lt;&#x2F;span&gt; i &lt;span class=&quot;z-meta z-assignment z-rhs z-java&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-java&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-comparison z-java&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; array&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;length&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt; i&lt;span class=&quot;z-keyword z-operator z-increment-decrement z-java&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;            result[i] &lt;span class=&quot;z-meta z-assignment z-rhs z-java&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-java&quot;&gt;=&lt;&#x2F;span&gt; array[i]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;        &lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-flow z-return z-java&quot;&gt;return&lt;&#x2F;span&gt; result&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;public&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-storage z-type z-void z-java&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-identifier z-java&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-java&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-parameters z-java&quot;&gt;&lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-java&quot;&gt;args&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-support z-class z-java&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; arr &lt;span class=&quot;z-meta z-assignment z-rhs z-java&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-java&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-instantiation z-java&quot;&gt;&lt;span class=&quot;z-keyword z-other z-storage z-new z-java&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-java&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-java&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-parens z-constructor-arguments z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-instantiation z-java&quot;&gt;&lt;span class=&quot;z-keyword z-other z-storage z-new z-java&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-array-initialization z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-java&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-java&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-braces z-array-initialization z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-java&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-java&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-java&quot;&gt;&lt;span class=&quot;z-variable z-function z-java&quot;&gt;getNew&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-job z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-job z-shell&quot;&gt;%&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; javac copy.java&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Note:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; copy.java uses unchecked or unsafe operations.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Note:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; Recompile with&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;Xlint&lt;&#x2F;span&gt;:unchecked for details.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-job z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-job z-shell&quot;&gt;%&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; java copy &lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Exception&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; in thread &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;main&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; java.lang.ClassCastException: [Ljava.lang.Object&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cannot&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; be cast to [Ljava.lang.Integer&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;        &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;at&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; copy.main(copy.java:16&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What?!‽
Not only are we getting a &lt;code&gt;ClassCastException&lt;&#x2F;code&gt; trying to convert &lt;code&gt;Integer&lt;&#x2F;code&gt; to &lt;code&gt;Integer&lt;&#x2F;code&gt;,
but we&#x27;re getting it at runtime, not compile-time!
Worse yet, there&#x27;s no traceback - the error pointed to &lt;code&gt;main&lt;&#x2F;code&gt;, not to &lt;code&gt;getNew&lt;&#x2F;code&gt;!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;my-solution&quot;&gt;My solution&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-solution&quot; aria-label=&quot;Anchor link for: my-solution&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;What happens when you declare a new array in Java?
You might assume that this is translated directly to Java bytecode, but you would be incorrect.
&lt;code&gt;javac&lt;&#x2F;code&gt; actually translates this to &lt;code&gt;java.lang.reflect.Array.newInstance&lt;&#x2F;code&gt;, which in turn
&lt;a href=&quot;http:&#x2F;&#x2F;hg.openjdk.java.net&#x2F;jdk&#x2F;jdk&#x2F;file&#x2F;1f9dd2360b17&#x2F;src&#x2F;java.base&#x2F;share&#x2F;classes&#x2F;java&#x2F;lang&#x2F;reflect&#x2F;Array.java#l76&quot;&gt;calls&lt;&#x2F;a&gt;
the native method &lt;code&gt;java.lang.reflect.Array.newArray&lt;&#x2F;code&gt;.
In fact, you can call this method yourself, but only if you have the class type.
Type parameters don&#x27;t cut it.&lt;&#x2F;p&gt;
&lt;p&gt;Well, if you have an instance of the class, you can call &lt;code&gt;instance.getClass()&lt;&#x2F;code&gt;.
If you don&#x27;t, you can (in this particular case) return a null pointer,
since the array must be empty.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; class=&quot;language-java z-code&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;z-source z-java&quot;&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-java&quot;&gt;%&lt;&#x2F;span&gt; cat copy&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;java
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-identifier z-java&quot;&gt;&lt;span class=&quot;z-storage z-type z-java&quot;&gt;class&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-class z-java&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-declaration z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-java&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-type z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-java&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;private&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;final&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-field z-java&quot;&gt;array&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-identifier z-java&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-constructor z-java&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-parameters z-java&quot;&gt;&lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-java&quot;&gt;array&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-variable z-language z-java&quot;&gt;this&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;array &lt;span class=&quot;z-meta z-assignment z-rhs z-java&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-java&quot;&gt;=&lt;&#x2F;span&gt; array&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-identifier z-java&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-java&quot;&gt;getNew&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-parameters z-java&quot;&gt;&lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-conditional z-if z-java&quot;&gt;if&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;array&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;length &lt;span class=&quot;z-keyword z-operator z-comparison z-java&quot;&gt;==&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;0&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-flow z-return z-java&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-language z-java&quot;&gt;null&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; result &lt;span class=&quot;z-meta z-assignment z-rhs z-java&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-java&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-path z-java&quot;&gt;&lt;span class=&quot;z-support z-type z-package z-java&quot;&gt;java&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-type z-package z-java&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-type z-package z-java&quot;&gt;reflect&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;Array&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-java&quot;&gt;&lt;span class=&quot;z-variable z-function z-java&quot;&gt;newInstance&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;array[&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;0&lt;&#x2F;span&gt;]&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-java&quot;&gt;&lt;span class=&quot;z-variable z-function z-java&quot;&gt;getClass&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-java&quot;&gt;,&lt;&#x2F;span&gt; array&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;length&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-loop z-for z-java&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-type z-primitive z-java&quot;&gt;int&lt;&#x2F;span&gt; i &lt;span class=&quot;z-meta z-assignment z-rhs z-java&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-java&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt; i &lt;span class=&quot;z-keyword z-operator z-comparison z-java&quot;&gt;&amp;lt;&lt;&#x2F;span&gt; array&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;length&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt; i&lt;span class=&quot;z-keyword z-operator z-increment-decrement z-java&quot;&gt;++&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;            result[i] &lt;span class=&quot;z-meta z-assignment z-rhs z-java&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-java&quot;&gt;=&lt;&#x2F;span&gt; array[i]&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;        &lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-flow z-return z-java&quot;&gt;return&lt;&#x2F;span&gt; result&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;public&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-storage z-type z-void z-java&quot;&gt;void&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-identifier z-java&quot;&gt;&lt;span class=&quot;z-entity z-name z-function z-java&quot;&gt;main&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-parameters z-java&quot;&gt;&lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-storage z-modifier z-array z-java&quot;&gt;[]&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-java&quot;&gt;args&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;        &lt;span class=&quot;z-support z-class z-java&quot;&gt;System&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;out&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-java&quot;&gt;&lt;span class=&quot;z-variable z-function z-java&quot;&gt;println&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-instantiation z-java&quot;&gt;&lt;span class=&quot;z-keyword z-other z-storage z-new z-java&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-begin z-java&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-generic z-end z-java&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-parens z-constructor-arguments z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-instantiation z-java&quot;&gt;&lt;span class=&quot;z-keyword z-other z-storage z-new z-java&quot;&gt;new&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-brackets z-array-initialization z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-java&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-java&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-braces z-array-initialization z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-java&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-comma z-java&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-java&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-braces z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-java&quot;&gt;&lt;span class=&quot;z-variable z-function z-java&quot;&gt;getNew&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-java&quot;&gt;&lt;span class=&quot;z-meta z-method z-body z-java&quot;&gt;    &lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-java&quot;&gt;&lt;span class=&quot;z-meta z-class z-body z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-job z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-job z-shell&quot;&gt;%&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; javac &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-shell&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Note:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; copy.java uses unchecked or unsafe operations.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Note:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; Recompile with&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;Xlint&lt;&#x2F;span&gt;:unchecked for details.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;jyn@debian-thinkpad&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;Documents&#x2F;Programming&#x2F;Java&#x2F;test&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-job z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-job z-shell&quot;&gt;%&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; java copy &lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;[Ljava.lang.Integer&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-logical z-continue z-shell&quot;&gt;;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;@28d93b30&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;I still have no idea what&#x27;s going on here - my best guess is that due to type erasure,
the &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;95679&quot;&gt;JIT compiler&lt;&#x2F;a&gt; doesn&#x27;t know that the objects in
&lt;code&gt;array&lt;&#x2F;code&gt; are actually valid &lt;code&gt;Integer&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote&quot; name=&quot;1&quot;&gt;&lt;sup&gt;1&lt;&#x2F;sup&gt;For the purpose of this post, I assume that only a shallow copy is necessary.&lt;&#x2F;div&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Object Oriented Python</title>
        <published>2018-03-03T00:00:00+00:00</published>
        <updated>2018-03-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/object-oriented-python/"/>
        <id>https://jyn.dev/object-oriented-python/</id>
        
        <content type="html" xml:base="https://jyn.dev/object-oriented-python/">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;a class=&quot;zola-anchor&quot; href=&quot;#intro&quot; aria-label=&quot;Anchor link for: intro&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;Python is a strange language.
You can do a lot with it, up to and including shooting your own foot off.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;python-allows&quot;&gt;Python allows&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-allows&quot; aria-label=&quot;Anchor link for: python-allows&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;array splicing&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;l&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;l&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-slice z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;l&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-arguments z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-slice z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;l&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-slice z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-slice z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;appending lists with the &#x27;+&#x27; operator&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;6&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;5&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;6&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;using the first string of a progam as documentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-job z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-job z-shell&quot;&gt;%&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cat test.py&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;This is a docstring.&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;(__doc__&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt; &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&lt;span class=&quot;z-meta z-group z-expansion z-job z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-job z-shell&quot;&gt;%&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; python &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-shell&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;This&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; is a docstring.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;renaming objects as they are imported&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-from z-python&quot;&gt;from&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-source z-python&quot;&gt; &lt;span class=&quot;z-meta z-import-path z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-name z-python&quot;&gt;sys&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-python&quot;&gt;import&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;stdin&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-import z-as z-python&quot;&gt;as&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;s&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;s&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;_io&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;TextIOWrapper&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;mode&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;r&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;UTF-8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;modifying the type of a variable at runtime&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-python&quot;&gt;import&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;sys&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;hi&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;sys&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;stdin&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;_io&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;TextIOWrapper&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;mode&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;r&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;UTF-8&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;within a function, using a variable that has not yet been declared&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;add_global&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-storage z-modifier z-global z-python&quot;&gt;global&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-python&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;0&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;add_global&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-statement z-python&quot;&gt;;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;python-disallows&quot;&gt;Python disallows&lt;a class=&quot;zola-anchor&quot; href=&quot;#python-disallows&quot; aria-label=&quot;Anchor link for: python-disallows&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;declaring types&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;int&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;  &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;File&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;line&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;    &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;int&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;^&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-exception z-python&quot;&gt;SyntaxError&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;invalid&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;syntax&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;throwing errors before runtime&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;add_local&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-augmented z-python&quot;&gt;+=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;add_local&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;Traceback&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;most&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;recent&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;call&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;last&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;  &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;File&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;line&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;, &lt;span class=&quot;z-keyword z-operator z-logical z-python&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;module&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;  &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;File&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;line&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;, &lt;span class=&quot;z-keyword z-operator z-logical z-python&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;add_local&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-exception z-python&quot;&gt;UnboundLocalError&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;local&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;variable&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;x&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;referenced&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;before&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;assignment&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;declaring and assigning a global variable in the same statement&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;myfunc&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-storage z-modifier z-global z-python&quot;&gt;global&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt; &lt;span class=&quot;z-invalid z-illegal z-name z-storage z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-invalid z-illegal z-name z-storage z-python&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;  &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;File&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;line&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;    &lt;span class=&quot;z-storage z-modifier z-global z-python&quot;&gt;global&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;x&lt;&#x2F;span&gt; &lt;span class=&quot;z-invalid z-illegal z-name z-storage z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-invalid z-illegal z-name z-storage z-python&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;             &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;^&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-exception z-python&quot;&gt;SyntaxError&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;invalid&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;syntax&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;bad indentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-for z-in z-python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt; &lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-loop z-for z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;  &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;File&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;line&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;^&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-exception z-python&quot;&gt;IndentationError&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;expected&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;an&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;indented&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;block&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;13591970&#x2F;&quot;&gt;tail call optimization&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-3103&#x2F;&quot;&gt;switch statements&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this article, I go over some of the things you can do with object-oriented python,
some things you should do, and some you really shouldn&#x27;t.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;objects-in-python&quot;&gt;Objects in python&lt;a class=&quot;zola-anchor&quot; href=&quot;#objects-in-python&quot; aria-label=&quot;Anchor link for: objects-in-python&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;In other object-oriented languages I am familiar with, notably Java,
each object has its own methods you must learn to use.
&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;1965500&#x2F;&quot;&gt;&lt;code&gt;size&lt;&#x2F;code&gt;, &lt;code&gt;length&lt;&#x2F;code&gt;, and &lt;code&gt;length()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
for example, are easily confused even for experienced developers.&lt;&#x2F;p&gt;
&lt;p&gt;In python, there is only one function, and it is not a property of the object.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;len&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Similarly, all array-like objects can be treated as arrays:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;135&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-arguments z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;5&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;how-is-this-done&quot;&gt;How is this done?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-is-this-done&quot; aria-label=&quot;Anchor link for: how-is-this-done&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;In Java, C++, and every other language I can think of,
objects are essentially implemented as very complicated structs:
there are pointers to data and void pointers to functions.
All object pointers are void pointers at runtime;
this is safe because types are checked at compile time.
How would you implement a global type-independent &lt;code&gt;length&lt;&#x2F;code&gt; function
when you don&#x27;t know what length means for that object?
The closest you could get is a wrapper:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; class=&quot;language-java z-code&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;public&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-modifier z-java&quot;&gt;static&lt;&#x2F;span&gt; &lt;span class=&quot;z-storage z-type z-primitive z-java&quot;&gt;int&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-java&quot;&gt;&lt;span class=&quot;z-variable z-function z-java&quot;&gt;length&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-support z-class z-java&quot;&gt;T&lt;&#x2F;span&gt; object&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-conditional z-switch z-java&quot;&gt;switch&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-parens z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;object&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-java&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-begin z-java&quot;&gt;{&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-conditional z-case z-java&quot;&gt;case&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-java&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-ternary z-java&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-flow z-return z-java&quot;&gt;return&lt;&#x2F;span&gt; object&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;length&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-conditional z-case z-java&quot;&gt;case&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;List&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-java&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-ternary z-java&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-flow z-return z-java&quot;&gt;return&lt;&#x2F;span&gt; object&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-java&quot;&gt;&lt;span class=&quot;z-variable z-function z-java&quot;&gt;size&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-keyword z-control z-conditional z-case z-java&quot;&gt;case&lt;&#x2F;span&gt; &lt;span class=&quot;z-support z-class z-java&quot;&gt;String&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-java&quot;&gt;class&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-ternary z-java&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-flow z-return z-java&quot;&gt;return&lt;&#x2F;span&gt; object&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-java&quot;&gt;&lt;span class=&quot;z-variable z-function z-java&quot;&gt;length&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-java&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-java&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-terminator z-java&quot;&gt;;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;    &lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-java&quot;&gt;.&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-meta z-block z-java&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-end z-java&quot;&gt;}&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s a nightmare just to write 3 of those switch cases;
imagine how awful it would be for every object in &lt;code&gt;java.util&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Well, it turns out, that wrapper is essentially what python does.
When you run &lt;code&gt;len(object)&lt;&#x2F;code&gt;, all it does is &lt;code&gt;return object.__len__()&lt;&#x2F;code&gt;!
It&#x27;s the same for every other attribute -
accessing an item, iterating, the whole
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Shebang_(Unix)&quot;&gt;shebang&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;class&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;obj&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-magic z-python&quot;&gt;__len__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;         &lt;span class=&quot;z-keyword z-control z-flow z-return z-python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;  &lt;span class=&quot;z-comment z-line z-number-sign z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-python&quot;&gt;#&lt;&#x2F;span&gt; guarenteed by IEEE to be random
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-magic z-python&quot;&gt;__getitem__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;index&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;         &lt;span class=&quot;z-keyword z-control z-flow z-return z-python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-magic z-python&quot;&gt;__iter__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;         &lt;span class=&quot;z-keyword z-control z-flow z-yield z-python&quot;&gt;yield&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;obj&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;len&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;4&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-arguments z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;613&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-for z-in z-python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-loop z-for z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-block z-loop z-for z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have to &lt;code&gt;yield&lt;&#x2F;code&gt; 1 instead of &lt;code&gt;return&lt;&#x2F;code&gt; because &lt;code&gt;iter&lt;&#x2F;code&gt; takes a
&lt;a href=&quot;https:&#x2F;&#x2F;wiki.python.org&#x2F;moin&#x2F;Generators&quot;&gt;generator&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-objects&quot;&gt;Using objects&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-objects&quot; aria-label=&quot;Anchor link for: using-objects&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;So, now we know how objects work -
all we have to do is implement the builtin methods.
How do you extend a class, though?
Java&#x27;s entire paradigm is built around inheritance.&lt;&#x2F;p&gt;
&lt;p&gt;You extend classes in Python by passing them to the constructor:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;class&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_list&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-python&quot;&gt;list&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_function&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;             &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;Hello from my_list!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_list&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-list z-empty z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_list&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_list&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-arguments z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_list&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-sequence z-list z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-sequence z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;2&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-sequence z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_function&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-from z-python&quot;&gt;from&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-source z-python&quot;&gt; &lt;span class=&quot;z-meta z-import-path z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-name z-python&quot;&gt;my_list&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And what&#x27;s up with that pesky &lt;code&gt;self&lt;&#x2F;code&gt;, anyway?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;class&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_class&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_function&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;             &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;Hello from my_function!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_other_function&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;             &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;Hello from my_other_function!&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_class&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_function&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;Traceback&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;most&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;recent&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;call&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;last&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;  &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;File&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;line&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;, &lt;span class=&quot;z-keyword z-operator z-logical z-python&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;module&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-exception z-python&quot;&gt;TypeError&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_function&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;takes&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;0&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;positional&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;but&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;was&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;given&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;my_other_function&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-from z-python&quot;&gt;from&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-source z-python&quot;&gt; &lt;span class=&quot;z-meta z-import-path z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-name z-python&quot;&gt;my_other_function&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It turns out that Python automatically passes &lt;code&gt;self&lt;&#x2F;code&gt; to each method when it&#x27;s called.
The reason for this is one of my least favorite parts of Python:
there&#x27;s no class namespace. If you want to refer to an attribute of the instance,
you have to use &lt;code&gt;self&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;class&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;obj&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-magic z-python&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;         &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;num&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;f&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;         &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;num&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;     &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-invalid z-illegal z-name z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;f2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;         &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;print&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;num&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;...&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;obj&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;o&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;num&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;f&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;Traceback&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;most&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;recent&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;call&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;last&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;  &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;File&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;line&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;1&lt;&#x2F;span&gt;, &lt;span class=&quot;z-keyword z-operator z-logical z-python&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;module&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;  &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;File&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-double z-python&quot;&gt;&amp;lt;stdin&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;line&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;5&lt;&#x2F;span&gt;, &lt;span class=&quot;z-keyword z-operator z-logical z-python&quot;&gt;in&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;f&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-support z-type z-exception z-python&quot;&gt;NameError&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-annotation z-variable z-python&quot;&gt;:&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;name&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;num&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-python&quot;&gt;is&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-logical z-python&quot;&gt;not&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;defined&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-comparison z-python&quot;&gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;o&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;f2&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;constructors-and-destructors&quot;&gt;Constructors and Destructors&lt;a class=&quot;zola-anchor&quot; href=&quot;#constructors-and-destructors&quot; aria-label=&quot;Anchor link for: constructors-and-destructors&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;So . . . about those.&lt;&#x2F;p&gt;
&lt;p&gt;When you instantiate an object in python, it calls
&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;q&#x2F;674304&quot;&gt;&lt;code&gt;__new__&lt;&#x2F;code&gt; then &lt;code&gt;__init__&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, in that order.
&lt;code&gt;__init__&lt;&#x2F;code&gt; is &lt;code&gt;None&lt;&#x2F;code&gt; by default; &lt;code&gt;__new__&lt;&#x2F;code&gt; may or may not be.
It&#x27;s considered bad practice to define &lt;code&gt;__new__&lt;&#x2F;code&gt; in your program.&lt;&#x2F;p&gt;
&lt;p&gt;When an object is destroyed through garbage collection,
&lt;code&gt;__del__&lt;&#x2F;code&gt; is called.&lt;&#x2F;p&gt;
&lt;p&gt;This sounds simple enough so far.&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;code&gt;__init__&lt;&#x2F;code&gt; is interrupted, &lt;code&gt;__del__&lt;&#x2F;code&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;2433847&quot;&gt;may or may not be called&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you use a &lt;code&gt;with&lt;&#x2F;code&gt; statement, i.e. &lt;code&gt;with open(filename) as f:&lt;&#x2F;code&gt;,
&lt;em&gt;neither &lt;code&gt;__init__&lt;&#x2F;code&gt; nor &lt;code&gt;__del__&lt;&#x2F;code&gt; are called&lt;&#x2F;em&gt;; &lt;code&gt;__enter__&lt;&#x2F;code&gt; and &lt;code&gt;__exit__&lt;&#x2F;code&gt;
are called instead.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m still confused by these.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;While python certainly supports objects,
I think it is harder to create objects in python than in other languages,
especially compared to the simplicity of the rest of the language.
You shouldn&#x27;t have to know how the garbage collector handles references
to create a deconstructor (I haven&#x27;t seen any syntax for deconstructors I liked,
but that&#x27;s a different topic). You especially should &lt;em&gt;not&lt;&#x2F;em&gt; have to create
methods with two underscores before and afterwards to have a useful class.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;&#x2F;rant&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;a class=&quot;zola-anchor&quot; href=&quot;#example&quot; aria-label=&quot;Anchor link for: example&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ll leave you with an example from my research project:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; class=&quot;language-python z-code&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-from z-python&quot;&gt;from&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-source z-python&quot;&gt; &lt;span class=&quot;z-meta z-import-path z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-name z-python&quot;&gt;keras&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-import-name z-python&quot;&gt;utils&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-import-name z-python&quot;&gt;data_utils&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-python&quot;&gt;import&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;Sequence&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-from z-python&quot;&gt;from&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-source z-python&quot;&gt; &lt;span class=&quot;z-meta z-import-path z-python&quot;&gt;&lt;span class=&quot;z-meta z-import-name z-python&quot;&gt;pandas&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-import z-python&quot;&gt;import&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-statement z-import z-python&quot;&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;read_csv&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-class z-python&quot;&gt;&lt;span class=&quot;z-storage z-type z-class z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-class z-python&quot;&gt;class&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-class z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;FileGenerator&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-class z-inheritance z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-inheritance z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-class z-inheritance z-python&quot;&gt;&lt;span class=&quot;z-entity z-other z-inherited-class z-python&quot;&gt;Sequence&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-inheritance z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-class z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-class z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-magic z-python&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameters z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;data&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-default-value z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;AmPEP-master&#x2F;combined_sequences.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-parameters z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;batch_size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-default-value z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;128&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-parameters z-python&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;                 &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;ratio&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-default-value z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-separator z-parameters z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;labels&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-default-value z-python&quot;&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;AmPEP-master&#x2F;labels.txt&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;positive_matches&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;3286&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;filename&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;open&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;filename&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-string z-python&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-python&quot;&gt;r&lt;span class=&quot;z-punctuation z-definition z-string z-end z-python&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;batch_size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;batch_size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;length&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;positive_matches&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;+&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;positive_matches&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;ratio&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;&#x2F;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;batch_size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-magic z-python&quot;&gt;__len__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-flow z-return z-python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;length&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-magic z-python&quot;&gt;__getitem__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-parameters z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;index&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;data&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;read_csv&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;data&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;header&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;None&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;skiprows&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;index&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;batch_size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;                        &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;nrows&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;batch_size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-arguments z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;labels&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;read_csv&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-accessor z-dot z-python&quot;&gt;.&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;labels&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;header&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-constant z-language z-python&quot;&gt;None&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt; &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;skiprows&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-group z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;index&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-arithmetic z-python&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;batch_size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-separator z-arguments z-python&quot;&gt;,&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;                        &lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;nrows&lt;&#x2F;span&gt;&lt;span class=&quot;z-keyword z-operator z-assignment z-python&quot;&gt;=&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;batch_size&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-arguments z-python&quot;&gt;&lt;span class=&quot;z-constant z-numeric z-integer z-decimal z-python&quot;&gt;0&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-flow z-return z-python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;data&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;, &lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;labels&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;    &lt;span class=&quot;z-storage z-type z-function z-python&quot;&gt;&lt;span class=&quot;z-keyword z-declaration z-function z-python&quot;&gt;def&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-entity z-name z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-magic z-python&quot;&gt;__iter__&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-parameters z-python&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parameters z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-function z-begin z-python&quot;&gt;:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-python&quot;&gt;        &lt;span class=&quot;z-keyword z-control z-flow z-return z-python&quot;&gt;return&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-group z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-begin z-python&quot;&gt;[&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-arguments z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;i&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-item-access z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-brackets z-end z-python&quot;&gt;]&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-expression z-generator z-python&quot;&gt;&lt;span class=&quot;z-keyword z-control z-loop z-for z-generator z-python&quot;&gt;for&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-generic-name z-python&quot;&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-control z-loop z-for z-in z-python&quot;&gt;in&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;range&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-python&quot;&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-function z-python&quot;&gt;&lt;span class=&quot;z-support z-function z-builtin z-python&quot;&gt;len&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-python&quot;&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-begin z-python&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-qualified-name z-python&quot;&gt;&lt;span class=&quot;z-variable z-language z-python&quot;&gt;self&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-arguments z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-group z-end z-python&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Password Safety</title>
        <published>2018-02-24T00:00:00+00:00</published>
        <updated>2018-02-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/password-safety/"/>
        <id>https://jyn.dev/password-safety/</id>
        
        <content type="html" xml:base="https://jyn.dev/password-safety/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;On the web today, there many different services we use.
We use email, Facebook, GitHub, Google, Twitter, dozens of various services.
Each of these require their own username and password.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re told, of course, to use a different password for each account.
&lt;a href=&quot;https:&#x2F;&#x2F;www.troyhunt.com&#x2F;science-of-password-selection&#x2F;&quot;&gt;Only 70% of us&lt;&#x2F;a&gt;, however, actually do so.
How are we supposed to remember a &lt;a href=&quot;https:&#x2F;&#x2F;www.nist.gov&#x2F;publications&#x2F;character-strings-memory-and-passwords-what-recall-study-can-tell-us&quot;&gt;dozen random passwords&lt;&#x2F;a&gt;, each different?
Traditionally, we use the same password for each,
perhaps with &lt;a href=&quot;https:&#x2F;&#x2F;reusablesec.blogspot.com&#x2F;2010&#x2F;10&#x2F;new-paper-on-password-security-metrics.html&quot;&gt;slight differences&lt;&#x2F;a&gt;.
This makes it very easy for hackers to &lt;a href=&quot;https:&#x2F;&#x2F;xkcd.com&#x2F;792&#x2F;&quot;&gt;get into your accounts&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are very few common remedies for this -
there&#x27;s ways to &lt;a href=&quot;https:&#x2F;&#x2F;haveibeenpwned.com&#x2F;&quot;&gt;check if you&#x27;ve been hacked&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Multi-factor_authentication&quot;&gt;multi-factor auth&lt;&#x2F;a&gt;,
but most peoples&#x27; response is to either write sticky notes of passwords,
or ignore the problem altogether.&lt;&#x2F;p&gt;
&lt;p&gt;This does work if you don&#x27;t &lt;a href=&quot;&#x2F;assets&#x2F;password.jpg&quot;&gt;leave your passwords lying around&lt;&#x2F;a&gt;.
It is inconvenient, however, and doesn&#x27;t scale to a large password database.
What you should be using is a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Password_manager&quot;&gt;password manager&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;password-managers&quot;&gt;Password Managers&lt;a class=&quot;zola-anchor&quot; href=&quot;#password-managers&quot; aria-label=&quot;Anchor link for: password-managers&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;A password manager is an easy way to keep track of passwords.
It can be anything from an &lt;a href=&quot;https:&#x2F;&#x2F;support.office.com&#x2F;en-us&#x2F;article&#x2F;Protect-an-Excel-file-7359d4ae-7213-4ac2-b058-f75e9311b599&quot;&gt;encrypted Excel Spreadsheet&lt;&#x2F;a&gt;
to &lt;a href=&quot;https:&#x2F;&#x2F;duckduckgo.com&#x2F;?q=browser+manage+password+saving&quot;&gt;your browser&#x27;s builtin manager&lt;&#x2F;a&gt;.
It takes one &#x27;master password&#x27;, and in return keeps track of everything else for you.
There&#x27;s no need to remember multiple passwords,
it&#x27;s easy to meet any complexity requirement,
and it doesn&#x27;t matter how often you&#x27;re required to change your passwords
(which is &lt;a href=&quot;http:&#x2F;&#x2F;cs.unc.edu&#x2F;~fabian&#x2F;papers&#x2F;PasswordExpire.pdf&quot;&gt;bad practice&lt;&#x2F;a&gt;, by the way.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-to-use&quot;&gt;What to use&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-to-use&quot; aria-label=&quot;Anchor link for: what-to-use&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Wikipedia has &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;List_of_password_managers&quot;&gt;an extensive list&lt;&#x2F;a&gt;
of password managers.&lt;&#x2F;p&gt;
&lt;p&gt;When choosing a manager, you should consider several things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What features are you looking for? What would be a dealbreaker?&lt;&#x2F;li&gt;
&lt;li&gt;How much security are you looking for? What is your
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Threat_model&quot;&gt;threat model&lt;&#x2F;a&gt;?&lt;&#x2F;li&gt;
&lt;li&gt;How much convenience are you willing to sacrifice?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I recommend &lt;a href=&quot;https:&#x2F;&#x2F;keepass.info&quot;&gt;Keepass&lt;&#x2F;a&gt; because it&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;encrypts your databases with &lt;a href=&quot;https:&#x2F;&#x2F;keepass.info&#x2F;help&#x2F;base&#x2F;security.html&quot;&gt;state of the art encryption&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;organizes your passwords &lt;a href=&quot;https:&#x2F;&#x2F;keepass.info&#x2F;features.html#lnkgroups&quot;&gt;by groups&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;stores usernames, URLs, and
&lt;a href=&quot;https:&#x2F;&#x2F;keepass.info&#x2F;features.html#lnktimes&quot;&gt;arbitrary data&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;randomly &lt;a href=&quot;https:&#x2F;&#x2F;keepass.info&#x2F;help&#x2F;base&#x2F;pwgenerator.html&quot;&gt;generates passwords&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;is &lt;a href=&quot;https:&#x2F;&#x2F;keepass.info&#x2F;download.html&quot;&gt;open source&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;is fully interoperable with many &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;KeePass#Unofficial_KeePass_derivatives&quot;&gt;other programs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;has &lt;a href=&quot;https:&#x2F;&#x2F;keepass.info&#x2F;features.html&quot;&gt;many other features&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Once you start using a password manager, you can start using passwords like
&lt;code&gt;W(xv|u7N&#x27;&#x27;fAs,{t|J&lt;&#x2F;code&gt; for all your accounts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;a class=&quot;zola-anchor&quot; href=&quot;#appendix&quot; aria-label=&quot;Anchor link for: appendix&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;If you&#x27;re not on Windows, or just want more features, check out &lt;a href=&quot;https:&#x2F;&#x2F;keepassxc.org&#x2F;&quot;&gt;Keepassxc&lt;&#x2F;a&gt;
(Keepass Cross-Platform Community Edition). It supports global autotype and
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Time-based_One-time_Password_Algorithm&quot;&gt;timed one-time passwords&lt;&#x2F;a&gt;, a.k.a. two-factor auth.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;ve written a &lt;a href=&quot;https:&#x2F;&#x2F;drive.google.com&#x2F;open?id=15u4uXxC5K7v2Llsu8L4JVDcFNjyavW4pKBJ2GW5YV5M&quot;&gt;presentation on secure passwords&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;security.stackexchange.com&#x2F;q&#x2F;6682&quot;&gt;StackOverflow on password reuse&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The figure for reuse &lt;a href=&quot;https:&#x2F;&#x2F;www.lightbluetouchpaper.org&#x2F;2011&#x2F;02&#x2F;09&#x2F;measuring-password-re-use-empirically&#x2F;&quot;&gt;may be lower&lt;&#x2F;a&gt; than I&#x27;ve claimed,
but it&#x27;s still a minimum of 30%&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Speed Up!</title>
        <published>2018-02-14T00:00:00+00:00</published>
        <updated>2018-02-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/speed-up/"/>
        <id>https://jyn.dev/speed-up/</id>
        
        <content type="html" xml:base="https://jyn.dev/speed-up/">&lt;p&gt;Good news! As of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;jyn514.github.io&#x2F;commit&#x2F;525779f74014e46b11d0d035314806fa234a58d4&quot;&gt;today&lt;&#x2F;a&gt;,
my site now takes less than a tenth of the time to load.&lt;&#x2F;p&gt;
&lt;p&gt;I found an excellent &lt;a href=&quot;https:&#x2F;&#x2F;gtmetrix.com&#x2F;&quot;&gt;site&lt;&#x2F;a&gt; which tests page load speeds.
It told me that my site (which is mostly static pages)
was taking a full 4.3 seconds to load.
I was very confused by this - I don&#x27;t have any large pages that I&#x27;m aware of;
the &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;CSS&quot;&gt;CSS&lt;&#x2F;a&gt; is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Minification_(programming)&quot;&gt;minified&lt;&#x2F;a&gt; and there&#x27;s almost no JavaScript.&lt;&#x2F;p&gt;
&lt;p&gt;It turns out that the nifty DNSSEC testers I&#x27;d put in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;jyn514.github.io&#x2F;commit&#x2F;988425efe8b17ea75509f8f940d2db7dd042db4b&quot;&gt;the other day&lt;&#x2F;a&gt;
were taking a second each to load.
Now, a second doesn&#x27;t sound like a lot, but it makes a &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;web&#x2F;fundamentals&#x2F;performance&#x2F;rail#ux&quot;&gt;big difference&lt;&#x2F;a&gt;
to how users perceive the site. 3.5 seconds - the speed up I&#x27;ve since gotten -
is an eternity on the web.&lt;&#x2F;p&gt;
&lt;p&gt;Honestly, I feel a lot more comfortable without the DNSSEC testers.
They always felt suspiciously like analytics (which I firmly oppose),
even though I didn&#x27;t see the results.&lt;&#x2F;p&gt;
&lt;p&gt;The site is now at 223 milliseconds per load and counting.
The slowest things still present are Open Sans (loaded from Google fonts, nearly half the load time)
and the second DNS tester.
However, I&#x27;ve been told the site looks a lot nicer than before, so I&#x27;m loath to remove the nice fonts.
If I were self-hosting, I could fix this with caching, but I unfortunately don&#x27;t control GitHub&#x27;s servers.
Let me know if you have any suggestions!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;appendix&quot;&gt;Appendix&lt;a class=&quot;zola-anchor&quot; href=&quot;#appendix&quot; aria-label=&quot;Anchor link for: appendix&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Google has a &lt;a href=&quot;https:&#x2F;&#x2F;testmysite.thinkwithgoogle.com&quot;&gt;&#x27;mobile experience&#x27; site&lt;&#x2F;a&gt; that I tried first.
Unfortunately, it kept giving me errors.&lt;&#x2F;li&gt;
&lt;li&gt;Proudly inspired by &lt;a href=&quot;https:&#x2F;&#x2F;danluu.com&#x2F;octopress-speedup&#x2F;&quot;&gt;this post&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Using PGP Keys</title>
        <published>2018-02-11T00:00:00+00:00</published>
        <updated>2018-02-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/using-pgp-keys/"/>
        <id>https://jyn.dev/using-pgp-keys/</id>
        
        <content type="html" xml:base="https://jyn.dev/using-pgp-keys/">&lt;h1 id=&quot;what-is-gpg&quot;&gt;What is GPG?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-gpg&quot; aria-label=&quot;Anchor link for: what-is-gpg&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gnupg.org&#x2F;&quot;&gt;GPG&lt;&#x2F;a&gt; is a program for encrypting your files, including&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Documents&lt;&#x2F;li&gt;
&lt;li&gt;Music&lt;&#x2F;li&gt;
&lt;li&gt;Programs&lt;&#x2F;li&gt;
&lt;li&gt;Anything else you can store digitally&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.xkcd.com&#x2F;1475&#x2F;&quot;&gt;Technically&lt;&#x2F;a&gt;, GPG implements the &lt;a href=&quot;https:&#x2F;&#x2F;www.openpgp.org&#x2F;&quot;&gt;PGP&lt;&#x2F;a&gt; standard,
which is &lt;a href=&quot;https:&#x2F;&#x2F;www.ietf.org&#x2F;rfc&#x2F;rfc4880.txt&quot;&gt;mandated&lt;&#x2F;a&gt; by the &lt;a href=&quot;https:&#x2F;&#x2F;www.ietf.org&#x2F;&quot;&gt;IETF®&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-encryption&quot;&gt;What is encryption?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-encryption&quot; aria-label=&quot;Anchor link for: what-is-encryption&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Encryption&quot;&gt;Encryption&lt;&#x2F;a&gt; is a way of ensuring that &lt;em&gt;only&lt;&#x2F;em&gt; people you choose
are able to read your information. Encryption goes back thousands of years
to the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Caesar_cipher&quot;&gt;Roman empire&lt;&#x2F;a&gt;. It is &lt;a href=&quot;https:&#x2F;&#x2F;doesmysiteneedhttps.com&#x2F;&quot;&gt;used every day&lt;&#x2F;a&gt;
in the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HTTPS&quot;&gt;&lt;code&gt;HTTPS&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; protocol, which ensures that the websites you visit
are only visible to you, and that the site has not &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;ryankearney&#x2F;4146814&quot;&gt;been changed in transit&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Cryptography therefore has two major functions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;To encrypt data: to make sure only people you choose can read it, and&lt;&#x2F;li&gt;
&lt;li&gt;To sign data: to ensure that information you read has not been altered by third parties.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-do-i-get-gpg&quot;&gt;How do I get GPG?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-do-i-get-gpg&quot; aria-label=&quot;Anchor link for: how-do-i-get-gpg&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;GPG is only fully-featured when used from the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Command-line_interface&quot;&gt;command line&lt;&#x2F;a&gt;.
If that sounds foreign to you, I have a quick-and-dirty guide on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;215-resources&#x2F;blob&#x2F;master&#x2F;tutorials&#x2F;ShellIntro.pdf&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Some binary releases:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Debian&#x2F;Ubuntu: &lt;code&gt;sudo apt-get install gnupg&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Windows: &lt;a href=&quot;https:&#x2F;&#x2F;gpg4win.org&#x2F;download.html&quot;&gt;GPG4Win&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;macOS:
&lt;ul&gt;
&lt;li&gt;without brew: &lt;a href=&quot;https:&#x2F;&#x2F;gpgtools.org&#x2F;&quot;&gt;GPGtools.org&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;with &lt;code&gt;brew&lt;&#x2F;code&gt; installed: &lt;code&gt;brew install gnupg &lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;how-do-i-use-gpg&quot;&gt;How do I use GPG?&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-do-i-use-gpg&quot; aria-label=&quot;Anchor link for: how-do-i-use-gpg&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Now we get to the fun stuff! GPG uses what&#x27;s called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Public-key_cryptography&quot;&gt;asymmetric encryption&lt;&#x2F;a&gt;,
which allows &lt;em&gt;anyone&lt;&#x2F;em&gt; to send secure messages to you, but only you to read them.
In order to take full advantage, you&#x27;ll need to&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Make a key&lt;&#x2F;li&gt;
&lt;li&gt;Publish your key&lt;&#x2F;li&gt;
&lt;li&gt;Start signing things&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;make-a-key&quot;&gt;Make a key&lt;a class=&quot;zola-anchor&quot; href=&quot;#make-a-key&quot; aria-label=&quot;Anchor link for: make-a-key&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;You need a &lt;a href=&quot;https:&#x2F;&#x2F;whatisapassphrase.com&#x2F;&quot;&gt;passphrase&lt;&#x2F;a&gt; to use a GPG key.
This prevents anyone from using your key.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gpg&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;quick-gen-key&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-double z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;Joe Shmoe &amp;lt;joe@email.example.com&amp;gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Enter your passphrase into the prompt that pops up.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;publish-your-key&quot;&gt;Publish your key&lt;a class=&quot;zola-anchor&quot; href=&quot;#publish-your-key&quot; aria-label=&quot;Anchor link for: publish-your-key&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gpg&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;send-keys&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;start-signing-things&quot;&gt;Start signing things&lt;a class=&quot;zola-anchor&quot; href=&quot;#start-signing-things&quot; aria-label=&quot;Anchor link for: start-signing-things&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Sign things with git:
&lt;code&gt;gpg config --global commit.gpgsign true&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Sign your emails with supporting clients:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.mozilla.org&#x2F;en-US&#x2F;thunderbird&#x2F;&quot;&gt;Thunderbird&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;www.enigmail.net&#x2F;index.php&#x2F;en&#x2F;&quot;&gt;Enigmail&lt;&#x2F;a&gt; for desktop&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.kde.org&#x2F;applications&#x2F;internet&#x2F;kmail&#x2F;&quot;&gt;Kmail&lt;&#x2F;a&gt; for KDE&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;k9mail.github.io&#x2F;&quot;&gt;K9mail&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;openkeychain.org&#x2F;&quot;&gt;OpenKeychain&lt;&#x2F;a&gt;
for Android&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gnupg.org&#x2F;software&#x2F;swlist.html#mutt&quot;&gt;Mutt&lt;&#x2F;a&gt; for the terminal&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Join &lt;a href=&quot;https:&#x2F;&#x2F;keybase.io&#x2F;&quot;&gt;Keybase&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;more-information&quot;&gt;More information&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-information&quot; aria-label=&quot;Anchor link for: more-information&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.gnupg.org&#x2F;gph&#x2F;en&#x2F;manual&#x2F;book1.html&quot;&gt;GPG handbook&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gnupg.org&#x2F;software&#x2F;frontends.html&quot;&gt;More frontends&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.glump.net&#x2F;howto&#x2F;cryptography&#x2F;practical-introduction-to-gnu-privacy-guard-in-windows&quot;&gt;A much more thorough explanation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.openpgp.org&#x2F;&quot;&gt;Homepage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gnupg.org&#x2F;&quot;&gt;GPG homepage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;emailselfdefense.fsf.org&#x2F;en&#x2F;&quot;&gt;FSF&lt;&#x2F;a&gt; on email self-defense&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;a class=&quot;zola-anchor&quot; href=&quot;#appendix&quot; aria-label=&quot;Anchor link for: appendix&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;prompts-are-repeated&quot;&gt;Prompts are repeated&lt;a class=&quot;zola-anchor&quot; href=&quot;#prompts-are-repeated&quot; aria-label=&quot;Anchor link for: prompts-are-repeated&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Note that the following prompt appears &lt;em&gt;twice&lt;&#x2F;em&gt; when you generate a key:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;We need to generate a lot of random bytes.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;It is a good idea to perform some other action (type on the keyboard,
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;move the mouse, utilize the disks) during the prime generation;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;this gives the random number generator a better chance to gain enough entropy.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is because there are actually two keys being generated:
1 private key and 1 public. The private you will store on your computer
securely. The public you will upload to a keyserver for anyone to see.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-if-i-m-not-comfortable-with-shell-quoting&quot;&gt;What if I&#x27;m not comfortable with shell quoting?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-if-i-m-not-comfortable-with-shell-quoting&quot; aria-label=&quot;Anchor link for: what-if-i-m-not-comfortable-with-shell-quoting&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Use &lt;code&gt;gpg --gen-key&lt;&#x2F;code&gt; or &lt;code&gt;gpg --full-gen-key&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>THERE IS A CAR IN SPACE</title>
        <published>2018-02-06T00:00:00+00:00</published>
        <updated>2018-02-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/there-is-a-car-in-space/"/>
        <id>https://jyn.dev/there-is-a-car-in-space/</id>
        
        <content type="html" xml:base="https://jyn.dev/there-is-a-car-in-space/">&lt;p&gt;As of today, February 6th 2018, from around 3:50 PM, there is a
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Elon_Musk%27s_Tesla_Roadster&quot;&gt;Tesla Roadster&lt;&#x2F;a&gt;
headed to Mars.&lt;&#x2F;p&gt;
&lt;p&gt;Today marked the first successful launch of the SpaceX
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Falcon_Heavy&quot;&gt;Falcon Heavy&lt;&#x2F;a&gt;, a rocket ship than
can carry other rocket ships.
Not only did the Heavy, which can carry more payload
than any other ship besides the Saturn V, launch successfully,
but its rocket boosters &lt;em&gt;then deattached and landed themselves&lt;&#x2F;em&gt;, successfully,
so that they can be reused for the next launch.&lt;&#x2F;p&gt;
&lt;p&gt;The car is currently in geostationary orbit within the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Van_Allen_radiation_belt&quot;&gt;Van Allen radiation belt&lt;&#x2F;a&gt;, testing radiation shielding
for &lt;a href=&quot;https:&#x2F;&#x2F;arstechnica.com&#x2F;science&#x2F;2018&#x2F;02&#x2F;at-the-pad-elon-musk-sizes-up-the-falcon-heavys-chance-of-success&#x2F;&quot;&gt;&quot;Air Force intel missions&quot;&lt;&#x2F;a&gt;.
It has &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=aBr2kKAHN6M&quot;&gt;&lt;em&gt;live&lt;&#x2F;em&gt; coverage&lt;&#x2F;a&gt;
and will launch for Mars within the next 8 hours.&lt;&#x2F;p&gt;
&lt;p&gt;To reiterate:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;THERE IS A CAR IN SPACE.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That is all.&lt;&#x2F;p&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Using DNSSEC</title>
        <published>2018-01-06T00:00:00+00:00</published>
        <updated>2018-01-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/using-dnssec/"/>
        <id>https://jyn.dev/using-dnssec/</id>
        
        <content type="html" xml:base="https://jyn.dev/using-dnssec/">&lt;p&gt;I was on StackOverflow the other day when I saw
&lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;90035&#x2F;how-to-set-dns-resolver-in-fedora-using-network-manager&quot;&gt;a nifty post&lt;&#x2F;a&gt; on using custom DNS servers with
&lt;a href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Projects&#x2F;NetworkManager&quot;&gt;NetworkManager&lt;&#x2F;a&gt;.
As you can see, in the middle of the post there&#x27;s a link to
&lt;a href=&quot;https:&#x2F;&#x2F;dnssec.vs.uni-due.de&quot;&gt;https:&#x2F;&#x2F;dnssec.vs.uni-due.de&lt;&#x2F;a&gt;.
Being a curious sort, I opened it up
and saw that it&#x27;s a DNSSEC tester!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Domain_Name_System_Security_Extensions&quot;&gt;DNSSEC&lt;&#x2F;a&gt; is a protocol for ensuring that &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Domain_Name_System&quot;&gt;DNS&lt;&#x2F;a&gt; results are accurate,
using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Public-key_cryptography&quot;&gt;public-key cryptographpy&lt;&#x2F;a&gt;.
It prevents &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;DNS_spoofing&quot;&gt;cache poisoning&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;DNS_hijacking&quot;&gt;dns hijacking&lt;&#x2F;a&gt;.
It also prevents &lt;a href=&quot;https:&#x2F;&#x2F;blog.xs4all.nl&#x2F;xs4all-moet-adressen-pirate-bay-voorlopig-blokkeren&#x2F;&quot;&gt;court-ordered DNS bans&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;blog.wired.com&#x2F;27bstroke6&#x2F;2008&#x2F;04&#x2F;isps-error-page.html&quot;&gt;hidden redirects&lt;&#x2F;a&gt;, both of which violate &lt;a href=&quot;https:&#x2F;&#x2F;www.ietf.org&#x2F;rfc.html&quot;&gt;RFC&lt;&#x2F;a&gt; standards.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, most computers in the world do &lt;em&gt;not&lt;&#x2F;em&gt; use DNSSEC by default.
Most end-users use DNS servers provided by their &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Internet_service_provider&quot;&gt;ISP&lt;&#x2F;a&gt;, which often
don&#x27;t support DNSSEC at all. Fortunately, configuring it is a simple process for which
Google has an &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;speed&#x2F;public-dns&#x2F;docs&#x2F;using&quot;&gt;extensive walkthrough&lt;&#x2F;a&gt;,
as well as &lt;a href=&quot;https:&#x2F;&#x2F;developers.google.com&#x2F;speed&#x2F;public-dns&#x2F;&quot;&gt;an overview&lt;&#x2F;a&gt; of DNS in general.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;appendix&quot;&gt;Appendix&lt;a class=&quot;zola-anchor&quot; href=&quot;#appendix&quot; aria-label=&quot;Anchor link for: appendix&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;You may also want to &lt;a href=&quot;https:&#x2F;&#x2F;test-ipv6.com&quot;&gt;see if you can access IPv6 sites&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Google has a &lt;a href=&quot;https:&#x2F;&#x2F;dns.google.com&quot;&gt;web interface&lt;&#x2F;a&gt; for DNS lookups&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jpmens.net&#x2F;2011&#x2F;10&#x2F;21&#x2F;automating-unbound-for-dnssec-on-your-workstation&#x2F;&quot;&gt;Run your own&lt;&#x2F;a&gt; DNS server!&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;ve included DNSSEC testers in my own site.
Open up the &lt;a href=&quot;https:&#x2F;&#x2F;webmasters.stackexchange.com&#x2F;questions&#x2F;8525&#x2F;&quot;&gt;browser console&lt;&#x2F;a&gt; to take a look!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Setting up Jekyll for GitHub Pages</title>
        <published>2017-12-28T00:00:00+00:00</published>
        <updated>2017-12-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/setting-up-jekyll/"/>
        <id>https://jyn.dev/setting-up-jekyll/</id>
        
        <content type="html" xml:base="https://jyn.dev/setting-up-jekyll/">&lt;p&gt;Jekyll is a wonderful program. The more I use it, the more I like it.
It&#x27;s customizable, automatically parses markdown, and uses a template system
that makes it very easy to create a consistent style. Its only flaw is that
it depends on &lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;setting-up-jekyll&#x2F;#appendix&quot;&gt;rubygems&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Jekyll does get a little getting used to, however.
In this article, I&#x27;ll go over the basics:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Installing&lt;&#x2F;li&gt;
&lt;li&gt;Creating a site&lt;&#x2F;li&gt;
&lt;li&gt;Customizing a site&lt;&#x2F;li&gt;
&lt;li&gt;Creating content&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Note that I assume some basic familiarity with &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&quot;&gt;Git&lt;&#x2F;a&gt;
and the commandline, which will be covered in another post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing&quot;&gt;Installing&lt;a class=&quot;zola-anchor&quot; href=&quot;#installing&quot; aria-label=&quot;Anchor link for: installing&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;If you don&#x27;t have &lt;a href=&quot;https:&#x2F;&#x2F;www.ruby-lang.org&#x2F;en&#x2F;documentation&#x2F;installation&#x2F;&quot;&gt;rubygems&lt;&#x2F;a&gt;
installed, you&#x27;ll need it. See also
&lt;a href=&quot;https:&#x2F;&#x2F;jyn.dev&#x2F;setting-up-jekyll&#x2F;#appendix&quot;&gt;footnote 1&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;gem&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; install jekyll&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;creating-a-site&quot;&gt;Creating a site&lt;a class=&quot;zola-anchor&quot; href=&quot;#creating-a-site&quot; aria-label=&quot;Anchor link for: creating-a-site&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;jekyll&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; new &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;directory&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-shell&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;jekyll&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; serve&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Congratulations! Your site is now live
(at &lt;a href=&quot;http:&#x2F;&#x2F;localhost:4000&quot;&gt;http:&#x2F;&#x2F;localhost:4000&lt;&#x2F;a&gt; by default).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;customizing-your-site&quot;&gt;Customizing your site&lt;a class=&quot;zola-anchor&quot; href=&quot;#customizing-your-site&quot; aria-label=&quot;Anchor link for: customizing-your-site&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;&quot;Your awesome title&quot; is a pretty terribly name for a site.
Go ahead and edit it in &lt;code&gt;_config.yml&lt;&#x2F;code&gt;.
There&#x27;s lots of other juicy config to change in there,
quick rundown &lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&#x2F;docs&#x2F;configuration&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;other-things-to-edit&quot;&gt;Other things to edit&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-things-to-edit&quot; aria-label=&quot;Anchor link for: other-things-to-edit&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Jekyll uses &lt;a href=&quot;https:&#x2F;&#x2F;jekyll.github.io&#x2F;minima&#x2F;&quot;&gt;minima&lt;&#x2F;a&gt;
by default; find where it is with &lt;code&gt;bundle show minima&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cp&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;r&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-expansion z-command z-parens z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;bundle&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; show minima&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;&lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;directory&lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;CSS: &lt;code&gt;_sass&#x2F;minima&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Page layouts: &lt;code&gt;_layouts&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Headers and footers: &lt;code&gt;_includes&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;404 page: &lt;code&gt;404.html&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;creating-content&quot;&gt;Creating content&lt;a class=&quot;zola-anchor&quot; href=&quot;#creating-content&quot; aria-label=&quot;Anchor link for: creating-content&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Jekyll expects a certain format from its templates. I&#x27;ve made an
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;jyn514.github.io&#x2F;blob&#x2F;master&#x2F;scripts&#x2F;new_post&quot;&gt;script&lt;&#x2F;a&gt;
that will handle the metadata automatically.&lt;&#x2F;p&gt;
&lt;p&gt;The content itself can be in one of three formats:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;daringfireball.net&#x2F;projects&#x2F;markdown&#x2F;&quot;&gt;Markdown&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;HTML&lt;&#x2F;li&gt;
&lt;li&gt;Plain text&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;jyn514.github.io&#x2F;&quot;&gt;source&lt;&#x2F;a&gt;
of my site is also available as an example.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;a class=&quot;zola-anchor&quot; href=&quot;#appendix&quot; aria-label=&quot;Anchor link for: appendix&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;If, like me, you got a permissions error -&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;jyn@debian-thinkpad:&#x2F;usr&#x2F;local&#x2F;src&#x2F;second-website$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; gem install jekyll&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ERROR:&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;  While executing gem ... (Errno::EACCES&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;&#x2F;span&gt;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;    &lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;Permission&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; denied @ dir_s_mkdir - &#x2F;var&#x2F;lib&#x2F;ruby&#x2F;2.3.0&#x2F;gem&#x2F;specs&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then you probably installed with a package manager. Unfortunately,
you&#x27;ll have to reinstall gem; I&#x27;m not aware of any way around this.
Since installing on a system-wide basis requires root permissions,
&#x2F;var&#x2F;lib&#x2F;ruby is only read&#x2F;writable for root.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to edit where gems are stored, you&#x27;ll have to edit
the rubygem script itself. Find the ruby library (in my case,
&lt;code&gt;&#x2F;usr&#x2F;lib&#x2F;ruby&lt;&#x2F;code&gt;) and ```sh
cd 2.3.0&#x2F;rubygems
sed -i &quot;s&#x2F;File.join Gem.user_home, &#x27;.gem&#x27;&#x2F;File.join Gem.user_home, &#x27;.local&#x27;, &#x27;lib&#x27;, &#x27;gem&#x27;&#x2F;&quot; **&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Hosting an SSH Server</title>
        <published>2017-12-27T00:00:00+00:00</published>
        <updated>2017-12-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/hosting-an-ssh-server/"/>
        <id>https://jyn.dev/hosting-an-ssh-server/</id>
        
        <content type="html" xml:base="https://jyn.dev/hosting-an-ssh-server/">&lt;p&gt;I decided one day over break that I really wanted a remote server.
I had a spare laptop, a router at home, and far too much free time.
The obvious solution was to combine the three.&lt;&#x2F;p&gt;
&lt;p&gt;It ended up being much simpler than I expected to set up.
On my old laptop, I installed an SSH server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; apt-get install openssh-server&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I made a few changes to the default config:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sed&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;i&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;s&#x2F;Port: 22&#x2F;Port: 666&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;s&#x2F;PermitRootLogin without-password&#x2F;PermitRootLogin no&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;s&#x2F;#PasswordAuthentication yes&#x2F;PasswordAuthentication no&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;s&#x2F;PrintMotd no&#x2F;PrintMotd yes&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &#x2F;etc&#x2F;ssh&#x2F;sshd_config&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Created and added an SSH key:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ssh-keygen&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-eval z-shell&quot;&gt;eval&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-command z-parens z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-begin z-shell&quot;&gt;(&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ssh-agent&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-punctuation z-section z-parens z-end z-shell&quot;&gt;)&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ssh-add&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ssh-copy-id&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; service ssh restart&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And copied it to my new computer:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;jyn@debian-acer:&lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; cp &lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;.ssh&#x2F;id_rsa&lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;*&lt;&#x2F;span&gt; &#x2F;media&#x2F;jyn&#x2F;usb&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;jyn@debian-acer:&lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; sudo umount &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-shell&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;jyn@debian-thinkpad:&lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;$&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; sudo mount &#x2F;dev&#x2F;sdb1 &#x2F;mnt&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cp&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &#x2F;mnt&#x2F;id_rsa&lt;span class=&quot;z-keyword z-operator z-regexp z-quantifier z-shell&quot;&gt;*&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;.ssh&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ssh-add&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;SSH now worked perfectly when I typed in the IP address.
I was moving back to USC in a few weeks though,
my server would be behind a firewall.
Not to worry though, with a mutter of approval from my dad,
I forwarded port 666 on the router to 666 on debian-acer.&lt;&#x2F;p&gt;
&lt;p&gt;Worked like a charm.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;appendix&quot;&gt;Appendix&lt;a class=&quot;zola-anchor&quot; href=&quot;#appendix&quot; aria-label=&quot;Anchor link for: appendix&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;If, like me, you have an outdated laptop
which refuses to start networking at boot, try this:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; sh&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;c&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;echo &amp;quot;# Ethernet
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;auto eth0
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;iface eth0 inet dhcp
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&amp;quot; &amp;gt;&amp;gt; &#x2F;etc&#x2F;network&#x2F;interfaces&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;More elegant way to specify ssh ports:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; sh&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;c&lt;&#x2F;span&gt; &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;echo &amp;quot;192.168.1.13   home &amp;gt;&amp;gt; &#x2F;etc&#x2F;hosts&amp;quot;&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-echo z-shell&quot;&gt;echo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-string z-begin z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;Host home
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-string z-quoted z-single z-shell&quot;&gt;Port 666&lt;span class=&quot;z-punctuation z-definition z-string z-end z-shell&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-keyword z-operator z-assignment z-redirection z-shell&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-expansion z-tilde&quot;&gt;&lt;span class=&quot;z-variable z-language z-tilde z-shell&quot;&gt;~&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&#x2F;.ssh&#x2F;config&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry><entry xml:lang="en">
        <title>Hello, World!</title>
        <published>2017-12-23T00:00:00+00:00</published>
        <updated>2017-12-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              jyn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jyn.dev/first-post/"/>
        <id>https://jyn.dev/first-post/</id>
        
        <content type="html" xml:base="https://jyn.dev/first-post/">&lt;p&gt;&lt;strong&gt;Hello, World!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is my first post on the new and improved site using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jekyll&#x2F;jekyll&quot;&gt;jekyll&lt;&#x2F;a&gt;.
It will (hopefully) be the first of many. Feel free to explore the source code &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jyn514&#x2F;second-website&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I started this site from an offhand comment by my good friend &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;charlesdaniels&quot;&gt;Charles Daniels&lt;&#x2F;a&gt;.
We were working on a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;charlesdaniels&#x2F;bitshuffle&quot;&gt;side project&lt;&#x2F;a&gt; together when I suggested
signing release commits with &lt;a href=&quot;https:&#x2F;&#x2F;gnupg.org&#x2F;&quot;&gt;GPG&lt;&#x2F;a&gt;.
He was surprised I had experience with PGP keys, and his first question was &quot;Do you have a blog?&quot;&lt;&#x2F;p&gt;
&lt;p&gt;From that simple question sprung this site. I hope you enjoy!&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
